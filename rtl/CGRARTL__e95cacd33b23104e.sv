//-------------------------------------------------------------------------
// CGRARTL__e95cacd33b23104e.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__nregs_100__rd_ports_4__wr_ports_8__const_zero_False
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py

// verilator lint_off UNSIGNED
/* verilator lint_off WIDTH */
/* verilator lint_off DECLFILENAME */
/* verilator lint_off VARHIDDEN */
/* verilator lint_off UNDRIVEN */
/* verilator lint_off UNUSED */
/* verilator lint_off UNOPTFLAT */
///* veriletor lint_off LATCH */
module RegisterFile__4181a910cefd22ac#(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  clk ,
  input  logic [TCDMAddrWidth-1:0] raddr [0:3],
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 rdata [0:3],
  input  logic [0:0] reset ,
  input  logic [TCDMAddrWidth-1:0] waddr [0:7],
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 wdata [0:7],
  input  logic [0:0] wen [0:7]
);
  localparam logic [2:0] __const__rd_ports_at_up_rf_read  = 3'd4;
  localparam logic [3:0] __const__wr_ports_at_up_rf_write  = 4'd8;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 regs [0:99];

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1; i < 3'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[2'(i)] = regs[raddr[2'(i)]];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1; i < 4'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[3'(i)] ) begin
        regs[waddr[3'(i)]] <= wdata[3'(i)];
      end
  end

endmodule


// PyMTL Component DataMemRTL Definition
// Full name: DataMemRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__data_mem_size_100__rd_ports_4__wr_ports_4__preload_data_[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0001),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0002),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0003),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0004),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0005),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0006),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0007),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0008),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0009),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0010),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0011),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0012),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0013),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0014),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0015),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0016),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0017),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0018),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0019),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0020),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0021),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0022),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0023),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0024),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0025),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0026),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0027),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0028),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0029),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0030),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0031),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0032),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0033),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0034),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0035),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0036),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0037),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0038),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0039),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0040),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0041),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0042),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0043),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0044),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0045),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0046),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0047),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0048),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0049),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0050),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0051),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0052),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0053),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0054),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0055),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0056),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0057),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0058),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0059),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0060),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0061),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0062),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0063),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/data/DataMemRTL.py

module DataMemRTL__b41b35d1723673b4#(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv_raddr__en [0:3] ,
  input logic [TCDMAddrWidth-1:0] recv_raddr__msg [0:3] ,
  output logic [0:0] recv_raddr__rdy [0:3] ,
  input logic [0:0] recv_waddr__en [0:3] ,
  input logic [TCDMAddrWidth-1:0] recv_waddr__msg [0:3] ,
  output logic [0:0] recv_waddr__rdy [0:3] ,
  input logic [0:0] recv_wdata__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_wdata__msg [0:3] ,
  output logic [0:0] recv_wdata__rdy [0:3] ,
  output logic [0:0] send_rdata__en [0:3] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_rdata__msg [0:3] ,
  input logic [0:0] send_rdata__rdy [0:3] 
);
  localparam logic [2:0] __const__rd_ports_at_update_read_with_init  = 3'd4;
  localparam logic [2:0] __const__wr_ports_at_update_read_with_init  = 3'd4;
  localparam logic [2:0] __const__rd_ports_at_update_init  = 3'd4;
  localparam logic [2:0] __const__wr_ports_at_update_init  = 3'd4;
  localparam logic [2:0] __const__rd_ports_at_update_signal  = 3'd4;
  localparam logic [2:0] __const__wr_ports_at_update_signal  = 3'd4;
  logic [0:0] initWrites [0:99];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 preloadData [0:99];
  //-------------------------------------------------------------
  // Component reg_file
  //-------------------------------------------------------------

  logic [0:0] reg_file__clk;
  logic [TCDMAddrWidth-1:0] reg_file__raddr [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 reg_file__rdata [0:3];
  logic [0:0] reg_file__reset;
  logic [TCDMAddrWidth-1:0] reg_file__waddr [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 reg_file__wdata [0:7];
  logic [0:0] reg_file__wen [0:7];

  RegisterFile__4181a910cefd22ac reg_file
  (
    .clk( reg_file__clk ),
    .raddr( reg_file__raddr ),
    .rdata( reg_file__rdata ),
    .reset( reg_file__reset ),
    .waddr( reg_file__waddr ),
    .wdata( reg_file__wdata ),
    .wen( reg_file__wen )
  );

  //-------------------------------------------------------------
  // End of component reg_file
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/data/DataMemRTL.py:59
  // @update
  // def update_read_with_init():
  // 
  //   for i in range( rd_ports ):
  //     s.reg_file.wen[wr_ports + i] @= b1(0)
  //     if s.initWrites[s.recv_raddr[i].msg] == b1(0):
  //       s.send_rdata[i].msg @= s.preloadData[s.recv_raddr[i].msg]
  //       s.reg_file.waddr[wr_ports + i] @= s.recv_raddr[i].msg
  //       s.reg_file.wdata[wr_ports + i] @= s.preloadData[s.recv_raddr[i].msg]
  //       s.reg_file.wen[wr_ports + i]   @= b1(1)
  //     else:
  //       s.reg_file.raddr[i] @= s.recv_raddr[i].msg
  //       s.send_rdata[i].msg @= s.reg_file.rdata[i]
  // 
  //   for i in range( wr_ports ):
  //     if s.recv_waddr[i].en == b1(1):
  //       s.reg_file.waddr[i] @= s.recv_waddr[i].msg
  //       s.reg_file.wdata[i] @= s.recv_wdata[i].msg
  //       s.reg_file.wen[i]   @= s.recv_wdata[i].en & s.recv_waddr[i].en
  
  always_comb begin : update_read_with_init
    for ( int unsigned i = 1; i < 3'( __const__rd_ports_at_update_read_with_init ); i += 1'd1 ) begin
      reg_file__wen[3'( __const__wr_ports_at_update_read_with_init ) + 3'(i)] = 1'd0;
      if ( initWrites[recv_raddr__msg[2'(i)]] == 1'd0 ) begin
        send_rdata__msg[2'(i)] = preloadData[recv_raddr__msg[2'(i)]];
        reg_file__waddr[3'( __const__wr_ports_at_update_read_with_init ) + 3'(i)] = recv_raddr__msg[2'(i)];
        reg_file__wdata[3'( __const__wr_ports_at_update_read_with_init ) + 3'(i)] = preloadData[recv_raddr__msg[2'(i)]];
        reg_file__wen[3'( __const__wr_ports_at_update_read_with_init ) + 3'(i)] = 1'd1;
      end
      else begin
        reg_file__raddr[2'(i)] = recv_raddr__msg[2'(i)];
        send_rdata__msg[2'(i)] = reg_file__rdata[2'(i)];
      end
    end
    for ( int unsigned i = 1; i < 3'( __const__wr_ports_at_update_read_with_init ); i += 1'd1 )
      if ( recv_waddr__en[2'(i)] == 1'd1 ) begin
        reg_file__waddr[3'(i)] = recv_waddr__msg[2'(i)];
        reg_file__wdata[3'(i)] = recv_wdata__msg[2'(i)];
        reg_file__wen[3'(i)] = recv_wdata__en[2'(i)] & recv_waddr__en[2'(i)];
      end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/data/DataMemRTL.py:90
  // @update
  // def update_signal():
  //   for i in range( rd_ports ):
  //     s.recv_raddr[i].rdy @= s.send_rdata[i].rdy
  //                           # b1( 1 ) # s.send_rdata[i].rdy
  //     s.send_rdata[i].en  @= s.recv_raddr[i].en
  //                           # s.send_rdata[i].rdy # s.recv_raddr[i].en
  //   for i in range( wr_ports ):
  //     s.recv_waddr[i].rdy @= Bits1( 1 )
  //     s.recv_wdata[i].rdy @= Bits1( 1 )
  
  always_comb begin : update_signal
    for ( int unsigned i = 1; i < 3'( __const__rd_ports_at_update_signal ); i += 1'd1 ) begin
      recv_raddr__rdy[2'(i)] = send_rdata__rdy[2'(i)];
      send_rdata__en[2'(i)] = recv_raddr__en[2'(i)];
    end
    for ( int unsigned i = 1; i < 3'( __const__wr_ports_at_update_signal ); i += 1'd1 ) begin
      recv_waddr__rdy[2'(i)] = 1'd1;
      recv_wdata__rdy[2'(i)] = 1'd1;
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/data/DataMemRTL.py:81
  // @update_ff
  // def update_init():
  //   for i in range( rd_ports ):
  //     if s.recv_raddr[i].en == b1(1):
  //       s.initWrites[s.recv_raddr[i].msg] <<= s.initWrites[s.recv_raddr[i].msg] | b1(1)
  //   for i in range( wr_ports ):
  //     if s.recv_waddr[i].en == b1(1):
  //       s.initWrites[s.recv_waddr[i].msg] <<= s.initWrites[s.recv_waddr[i].msg] | b1(1)
  
  always_ff @(posedge clk) begin : update_init
    for ( int unsigned i = 1; i < 3'( __const__rd_ports_at_update_init ); i += 1'd1 )
      if ( recv_raddr__en[2'(i)] == 1'd1 ) begin
        initWrites[recv_raddr__msg[2'(i)]] <= initWrites[recv_raddr__msg[2'(i)]] | 1'd1;
      end
    for ( int unsigned i = 1; i < 3'( __const__wr_ports_at_update_init ); i += 1'd1 )
      if ( recv_waddr__en[2'(i)] == 1'd1 ) begin
        initWrites[recv_waddr__msg[2'(i)]] <= initWrites[recv_waddr__msg[2'(i)]] | 1'd1;
      end
  end

  assign reg_file__clk = clk;
  assign reg_file__reset = reset;
  assign preloadData[0] = { 16'd0, 1'd1, 1'd0 };
  assign preloadData[1] = { 16'd1, 1'd1, 1'd0 };
  assign preloadData[2] = { 16'd2, 1'd1, 1'd0 };
  assign preloadData[3] = { 16'd3, 1'd1, 1'd0 };
  assign preloadData[4] = { 16'd4, 1'd1, 1'd0 };
  assign preloadData[5] = { 16'd5, 1'd1, 1'd0 };
  assign preloadData[6] = { 16'd6, 1'd1, 1'd0 };
  assign preloadData[7] = { 16'd7, 1'd1, 1'd0 };
  assign preloadData[8] = { 16'd8, 1'd1, 1'd0 };
  assign preloadData[9] = { 16'd9, 1'd1, 1'd0 };
  assign preloadData[10] = { 16'd10, 1'd1, 1'd0 };
  assign preloadData[11] = { 16'd11, 1'd1, 1'd0 };
  assign preloadData[12] = { 16'd12, 1'd1, 1'd0 };
  assign preloadData[13] = { 16'd13, 1'd1, 1'd0 };
  assign preloadData[14] = { 16'd14, 1'd1, 1'd0 };
  assign preloadData[15] = { 16'd15, 1'd1, 1'd0 };
  assign preloadData[16] = { 16'd16, 1'd1, 1'd0 };
  assign preloadData[17] = { 16'd17, 1'd1, 1'd0 };
  assign preloadData[18] = { 16'd18, 1'd1, 1'd0 };
  assign preloadData[19] = { 16'd19, 1'd1, 1'd0 };
  assign preloadData[20] = { 16'd20, 1'd1, 1'd0 };
  assign preloadData[21] = { 16'd21, 1'd1, 1'd0 };
  assign preloadData[22] = { 16'd22, 1'd1, 1'd0 };
  assign preloadData[23] = { 16'd23, 1'd1, 1'd0 };
  assign preloadData[24] = { 16'd24, 1'd1, 1'd0 };
  assign preloadData[25] = { 16'd25, 1'd1, 1'd0 };
  assign preloadData[26] = { 16'd26, 1'd1, 1'd0 };
  assign preloadData[27] = { 16'd27, 1'd1, 1'd0 };
  assign preloadData[28] = { 16'd28, 1'd1, 1'd0 };
  assign preloadData[29] = { 16'd29, 1'd1, 1'd0 };
  assign preloadData[30] = { 16'd30, 1'd1, 1'd0 };
  assign preloadData[31] = { 16'd31, 1'd1, 1'd0 };
  assign preloadData[32] = { 16'd32, 1'd1, 1'd0 };
  assign preloadData[33] = { 16'd33, 1'd1, 1'd0 };
  assign preloadData[34] = { 16'd34, 1'd1, 1'd0 };
  assign preloadData[35] = { 16'd35, 1'd1, 1'd0 };
  assign preloadData[36] = { 16'd36, 1'd1, 1'd0 };
  assign preloadData[37] = { 16'd37, 1'd1, 1'd0 };
  assign preloadData[38] = { 16'd38, 1'd1, 1'd0 };
  assign preloadData[39] = { 16'd39, 1'd1, 1'd0 };
  assign preloadData[40] = { 16'd40, 1'd1, 1'd0 };
  assign preloadData[41] = { 16'd41, 1'd1, 1'd0 };
  assign preloadData[42] = { 16'd42, 1'd1, 1'd0 };
  assign preloadData[43] = { 16'd43, 1'd1, 1'd0 };
  assign preloadData[44] = { 16'd44, 1'd1, 1'd0 };
  assign preloadData[45] = { 16'd45, 1'd1, 1'd0 };
  assign preloadData[46] = { 16'd46, 1'd1, 1'd0 };
  assign preloadData[47] = { 16'd47, 1'd1, 1'd0 };
  assign preloadData[48] = { 16'd48, 1'd1, 1'd0 };
  assign preloadData[49] = { 16'd49, 1'd1, 1'd0 };
  assign preloadData[50] = { 16'd50, 1'd1, 1'd0 };
  assign preloadData[51] = { 16'd51, 1'd1, 1'd0 };
  assign preloadData[52] = { 16'd52, 1'd1, 1'd0 };
  assign preloadData[53] = { 16'd53, 1'd1, 1'd0 };
  assign preloadData[54] = { 16'd54, 1'd1, 1'd0 };
  assign preloadData[55] = { 16'd55, 1'd1, 1'd0 };
  assign preloadData[56] = { 16'd56, 1'd1, 1'd0 };
  assign preloadData[57] = { 16'd57, 1'd1, 1'd0 };
  assign preloadData[58] = { 16'd58, 1'd1, 1'd0 };
  assign preloadData[59] = { 16'd59, 1'd1, 1'd0 };
  assign preloadData[60] = { 16'd60, 1'd1, 1'd0 };
  assign preloadData[61] = { 16'd61, 1'd1, 1'd0 };
  assign preloadData[62] = { 16'd62, 1'd1, 1'd0 };
  assign preloadData[63] = { 16'd63, 1'd1, 1'd0 };
  assign preloadData[64] = { 16'd64, 1'd1, 1'd0 };
  assign preloadData[65] = { 16'd65, 1'd1, 1'd0 };
  assign preloadData[66] = { 16'd66, 1'd1, 1'd0 };
  assign preloadData[67] = { 16'd67, 1'd1, 1'd0 };
  assign preloadData[68] = { 16'd68, 1'd1, 1'd0 };
  assign preloadData[69] = { 16'd69, 1'd1, 1'd0 };
  assign preloadData[70] = { 16'd70, 1'd1, 1'd0 };
  assign preloadData[71] = { 16'd71, 1'd1, 1'd0 };
  assign preloadData[72] = { 16'd72, 1'd1, 1'd0 };
  assign preloadData[73] = { 16'd73, 1'd1, 1'd0 };
  assign preloadData[74] = { 16'd74, 1'd1, 1'd0 };
  assign preloadData[75] = { 16'd75, 1'd1, 1'd0 };
  assign preloadData[76] = { 16'd76, 1'd1, 1'd0 };
  assign preloadData[77] = { 16'd77, 1'd1, 1'd0 };
  assign preloadData[78] = { 16'd78, 1'd1, 1'd0 };
  assign preloadData[79] = { 16'd79, 1'd1, 1'd0 };
  assign preloadData[80] = { 16'd80, 1'd1, 1'd0 };
  assign preloadData[81] = { 16'd81, 1'd1, 1'd0 };
  assign preloadData[82] = { 16'd82, 1'd1, 1'd0 };
  assign preloadData[83] = { 16'd83, 1'd1, 1'd0 };
  assign preloadData[84] = { 16'd84, 1'd1, 1'd0 };
  assign preloadData[85] = { 16'd85, 1'd1, 1'd0 };
  assign preloadData[86] = { 16'd86, 1'd1, 1'd0 };
  assign preloadData[87] = { 16'd87, 1'd1, 1'd0 };
  assign preloadData[88] = { 16'd88, 1'd1, 1'd0 };
  assign preloadData[89] = { 16'd89, 1'd1, 1'd0 };
  assign preloadData[90] = { 16'd90, 1'd1, 1'd0 };
  assign preloadData[91] = { 16'd91, 1'd1, 1'd0 };
  assign preloadData[92] = { 16'd92, 1'd1, 1'd0 };
  assign preloadData[93] = { 16'd93, 1'd1, 1'd0 };
  assign preloadData[94] = { 16'd94, 1'd1, 1'd0 };
  assign preloadData[95] = { 16'd95, 1'd1, 1'd0 };
  assign preloadData[96] = { 16'd96, 1'd1, 1'd0 };
  assign preloadData[97] = { 16'd97, 1'd1, 1'd0 };
  assign preloadData[98] = { 16'd98, 1'd1, 1'd0 };
  assign preloadData[99] = { 16'd99, 1'd1, 1'd0 };

endmodule


// PyMTL Component Mux Definition
// Full name: Mux__Type_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__ninputs_2
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/arithmetics.py

module Mux__cd767a384c5aaad8
(
  input  logic [0:0] clk ,
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 in_ [0:1],
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 out ,
  input  logic [0:0] reset ,
  input  logic [0:0] sel 
);

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/arithmetics.py:13
  // @update
  // def up_mux():
  //   s.out @= s.in_[ s.sel ]
  
  always_comb begin : up_mux
    out = in_[sel];
  end

endmodule


// PyMTL Component BypassQueue1Entry Definition
// Full name: BypassQueue1Entry__EntryType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module BypassQueue1Entry__eddc71e57d9a6f8b
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] deq_en ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 deq_msg ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 enq_msg ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] reset 
);
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 entry;
  logic [0:0] full;
  //-------------------------------------------------------------
  // Component bypass_mux
  //-------------------------------------------------------------

  logic [0:0] bypass_mux__clk;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 bypass_mux__in_ [0:1];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 bypass_mux__out;
  logic [0:0] bypass_mux__reset;
  logic [0:0] bypass_mux__sel;

  Mux__cd767a384c5aaad8 bypass_mux
  (
    .clk( bypass_mux__clk ),
    .in_( bypass_mux__in_ ),
    .out( bypass_mux__out ),
    .reset( bypass_mux__reset ),
    .sel( bypass_mux__sel )
  );

  //-------------------------------------------------------------
  // End of component bypass_mux
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:583
  // s.deq_rdy //= lambda: ~s.reset & ( s.full | s.enq_en )
  
  always_comb begin : _lambda__s_dut_tile_0__channel_0__bypass_q_q_deq_rdy
    deq_rdy = ( ~reset ) & ( full | enq_en );
  end

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:582
  // s.enq_rdy //= lambda: ~s.reset & ~s.full
  
  always_comb begin : _lambda__s_dut_tile_0__channel_0__bypass_q_q_enq_rdy
    enq_rdy = ( ~reset ) & ( ~full );
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:585
  // @update_ff
  // def ff_bypass1():
  //   s.full <<= ~s.reset & ( ~s.deq_en & (s.enq_en | s.full) )
  // 
  //   if s.enq_en & ~s.deq_en:
  //     s.entry <<= s.enq_msg
  
  always_ff @(posedge clk) begin : ff_bypass1
    full <= ( ~reset ) & ( ( ~deq_en ) & ( enq_en | full ) );
    if ( enq_en & ( ~deq_en ) ) begin
      entry <= enq_msg;
    end
  end

  assign bypass_mux__clk = clk;
  assign bypass_mux__reset = reset;
  assign bypass_mux__in_[0] = enq_msg;
  assign bypass_mux__in_[1] = entry;
  assign deq_msg = bypass_mux__out;
  assign bypass_mux__sel = full;
  assign count = full;

endmodule


// PyMTL Component BypassQueue Definition
// Full name: BypassQueue__EntryType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__num_entries_1
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module BypassQueue__b63a1971918aadb2
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] deq_en ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 deq_msg ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 enq_msg ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] reset 
);
  //-------------------------------------------------------------
  // Component q
  //-------------------------------------------------------------

  logic [0:0] q__clk;
  logic [0:0] q__count;
  logic [0:0] q__deq_en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 q__deq_msg;
  logic [0:0] q__deq_rdy;
  logic [0:0] q__enq_en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 q__enq_msg;
  logic [0:0] q__enq_rdy;
  logic [0:0] q__reset;

  BypassQueue1Entry__eddc71e57d9a6f8b q
  (
    .clk( q__clk ),
    .count( q__count ),
    .deq_en( q__deq_en ),
    .deq_msg( q__deq_msg ),
    .deq_rdy( q__deq_rdy ),
    .enq_en( q__enq_en ),
    .enq_msg( q__enq_msg ),
    .enq_rdy( q__enq_rdy ),
    .reset( q__reset )
  );

  //-------------------------------------------------------------
  // End of component q
  //-------------------------------------------------------------

  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq_en = enq_en;
  assign enq_rdy = q__enq_rdy;
  assign q__enq_msg = enq_msg;
  assign q__deq_en = deq_en;
  assign deq_rdy = q__deq_rdy;
  assign deq_msg = q__deq_msg;
  assign count = q__count;

endmodule


// PyMTL Component NormalQueueCtrl Definition
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module NormalQueueCtrl__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] deq_en ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  output logic [0:0] enq_rdy ,
  output logic [0:0] raddr ,
  input  logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] deq_xfer;
  logic [0:0] enq_xfer;
  logic [0:0] head;
  logic [0:0] tail;

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:89
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_dut_tile_0__channel_0__queues_0__ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 2'd0 );
  end

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:92
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_dut_tile_0__channel_0__queues_0__ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:88
  // s.enq_rdy //= lambda: ~s.reset & ( s.count < s.num_entries )
  
  always_comb begin : _lambda__s_dut_tile_0__channel_0__queues_0__ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( count < 2'd2 );
  end

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:91
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_dut_tile_0__channel_0__queues_0__ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py:94
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 1'd1 ) ? head + 1'd1 : 1'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 1'd1 ) ? tail + 1'd1 : 1'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 2'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py

module RegisterFile__ff473bd3ce489042
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 regs [0:1];

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpath Definition
// Full name: NormalQueueDpath__EntryType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__num_entries_2
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module NormalQueueDpath__6f977f90f0c6afae
(
  input  logic [0:0] clk ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 deq_msg ,
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__ff473bd3ce489042 queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_msg = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueue Definition
// Full name: NormalQueue__EntryType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__num_entries_2
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module NormalQueue__6f977f90f0c6afae
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] deq_en ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 deq_msg ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  input  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 enq_msg ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] reset 
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrl__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 dpath__deq_msg;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpath__6f977f90f0c6afae dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq_en;
  assign enq_rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq_en;
  assign deq_rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq_msg;
  assign deq_msg = dpath__deq_msg;

endmodule


// PyMTL Component ChannelRTL Definition
// Full name: ChannelRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__latency_1
// At /home/lab-cgra/OpenCGRA/VectorCGRA/noc/ChannelRTL.py

module ChannelRTL__b3d10fbae4900e6b
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] recv__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv__msg  ,
  output logic [0:0] recv__rdy  ,
  output logic [0:0] send__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send__msg  ,
  input logic [0:0] send__rdy  
);
  //-------------------------------------------------------------
  // Component bypass_q
  //-------------------------------------------------------------

  logic [0:0] bypass_q__clk;
  logic [0:0] bypass_q__count;
  logic [0:0] bypass_q__deq_en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 bypass_q__deq_msg;
  logic [0:0] bypass_q__deq_rdy;
  logic [0:0] bypass_q__enq_en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 bypass_q__enq_msg;
  logic [0:0] bypass_q__enq_rdy;
  logic [0:0] bypass_q__reset;

  BypassQueue__b63a1971918aadb2 bypass_q
  (
    .clk( bypass_q__clk ),
    .count( bypass_q__count ),
    .deq_en( bypass_q__deq_en ),
    .deq_msg( bypass_q__deq_msg ),
    .deq_rdy( bypass_q__deq_rdy ),
    .enq_en( bypass_q__enq_en ),
    .enq_msg( bypass_q__enq_msg ),
    .enq_rdy( bypass_q__enq_rdy ),
    .reset( bypass_q__reset )
  );

  //-------------------------------------------------------------
  // End of component bypass_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component queues[0:0]
  //-------------------------------------------------------------

  logic [0:0] queues__clk [0:0];
  logic [1:0] queues__count [0:0];
  logic [0:0] queues__deq_en [0:0];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 queues__deq_msg [0:0];
  logic [0:0] queues__deq_rdy [0:0];
  logic [0:0] queues__enq_en [0:0];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 queues__enq_msg [0:0];
  logic [0:0] queues__enq_rdy [0:0];
  logic [0:0] queues__reset [0:0];

  NormalQueue__6f977f90f0c6afae queues__0
  (
    .clk( queues__clk[0] ),
    .count( queues__count[0] ),
    .deq_en( queues__deq_en[0] ),
    .deq_msg( queues__deq_msg[0] ),
    .deq_rdy( queues__deq_rdy[0] ),
    .enq_en( queues__enq_en[0] ),
    .enq_msg( queues__enq_msg[0] ),
    .enq_rdy( queues__enq_rdy[0] ),
    .reset( queues__reset[0] )
  );

  //-------------------------------------------------------------
  // End of component queues[0:0]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/noc/ChannelRTL.py:41
  // @update
  // def process():
  //   for i in range(s.latency - 1):
  //     s.queues[i+1].enq_msg @= s.queues[i].deq_msg
  //     s.queues[i+1].enq_en  @= s.queues[i].deq_rdy & s.queues[i+1].enq_rdy
  //     s.queues[i].deq_en    @= s.queues[i+1].enq_en
  // 
  //   if ~s.bypass_q.deq_msg.bypass:
  //     s.queues[0].enq_msg @= s.bypass_q.deq_msg
  //     s.bypass_q.deq_en   @= s.queues[0].enq_rdy & s.bypass_q.deq_rdy
  //     s.queues[0].enq_en  @= s.queues[0].enq_rdy & s.bypass_q.deq_rdy
  // 
  //     s.send.msg                   @= s.queues[s.latency-1].deq_msg
  //     s.send.en                    @= s.send.rdy & s.queues[s.latency-1].deq_rdy
  //     s.queues[s.latency-1].deq_en @= s.send.rdy & s.queues[s.latency-1].deq_rdy
  // 
  //   else:
  //     s.queues[0].enq_en           @= 0
  //     s.queues[0].enq_msg          @= DataType()
  //     s.queues[s.latency-1].deq_en @= 0
  // 
  //     s.send.msg           @= DataType()
  //     s.send.msg.payload   @= s.bypass_q.deq_msg.payload
  //     s.send.msg.predicate @= s.bypass_q.deq_msg.predicate
  //     s.send.msg.bypass    @= 0
  //     s.send.en            @= s.send.rdy & s.bypass_q.deq_rdy
  //     s.bypass_q.deq_en    @= s.send.rdy & s.bypass_q.deq_rdy
  
  always_comb begin : process
    for ( int unsigned i = 1; i < 1'd1 - 1'd1; i += 1'd1 ) begin
      queues__enq_msg[1'(i) + 1'd1] = queues__deq_msg[1'(i)];
      queues__enq_en[1'(i) + 1'd1] = queues__deq_rdy[1'(i)] & queues__enq_rdy[1'(i) + 1'd1];
      queues__deq_en[1'(i)] = queues__enq_en[1'(i) + 1'd1];
    end
    if ( ~bypass_q__deq_msg.bypass ) begin
      queues__enq_msg[1'd0] = bypass_q__deq_msg;
      bypass_q__deq_en = queues__enq_rdy[1'd0] & bypass_q__deq_rdy;
      queues__enq_en[1'd0] = queues__enq_rdy[1'd0] & bypass_q__deq_rdy;
      send__msg = queues__deq_msg[1'd1 - 1'd1];
      send__en = send__rdy & queues__deq_rdy[1'd1 - 1'd1];
      queues__deq_en[1'd1 - 1'd1] = send__rdy & queues__deq_rdy[1'd1 - 1'd1];
    end
    else begin
      queues__enq_en[1'd0] = 1'd0;
      queues__enq_msg[1'd0] = { 16'd0, 1'd0, 1'd0 };
      queues__deq_en[1'd1 - 1'd1] = 1'd0;
      send__msg = { 16'd0, 1'd0, 1'd0 };
      send__msg.payload = bypass_q__deq_msg.payload;
      send__msg.predicate = bypass_q__deq_msg.predicate;
      send__msg.bypass = 1'd0;
      send__en = send__rdy & bypass_q__deq_rdy;
      bypass_q__deq_en = send__rdy & bypass_q__deq_rdy;
    end
  end

  assign queues__clk[0] = clk;
  assign queues__reset[0] = reset;
  assign bypass_q__clk = clk;
  assign bypass_q__reset = reset;
  assign bypass_q__enq_en = recv__en;
  assign bypass_q__enq_msg = recv__msg;
  assign recv__rdy = bypass_q__enq_rdy;
  assign count = queues__count[0];

endmodule


// PyMTL Component ConstQueueRTL Definition
// Full name: ConstQueueRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__const_list_[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py

module ConstQueueRTL__a9e8e43f61bd7ac6
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] send_const__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_const__msg  ,
  input logic [0:0] send_const__rdy  
);
  localparam logic [2:0] __const__num_const_at_update_raddr  = 3'd4;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue [0:4];
  logic [2:0] cur;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:41
  // @update
  // def load():
  //   s.send_const.msg @= s.const_queue[ s.cur ]
  
  always_comb begin : load
    send_const__msg = const_queue[cur];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:45
  // @update
  // def update_en():
  //   s.send_const.en @= s.send_const.rdy
  
  always_comb begin : update_en
    send_const__en = send_const__rdy;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:49
  // @update_ff
  // def update_raddr():
  //   # if s.send_const.rdy:
  //     if s.cur + AddrType( 1 )  >= AddrType( num_const ):
  //       s.cur <<= AddrType( 0 )
  //     else:
  //       s.cur <<= s.cur + AddrType( 1 )
  
  always_ff @(posedge clk) begin : update_raddr
    if ( ( cur + 3'd1 ) >= 3'd4 ) begin
      cur <= 3'd0;
    end
    else
      cur <= cur + 3'd1;
  end

  assign const_queue[0] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[1] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[2] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[3] = { 16'd0, 1'd1, 1'd0 };

endmodule


// PyMTL Component CrossbarRTL Definition
// Full name: CrossbarRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_6__num_outports_8__bypass_point_4__id_0
// At /home/lab-cgra/OpenCGRA/VectorCGRA/noc/CrossbarRTL.py

module CrossbarRTL__27570a81c91409e5
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv_data__en [0:5] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_data__msg [0:5] ,
  output logic [0:0] recv_data__rdy [0:5] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  output logic [0:0] send_data__en [0:7] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_data__msg [0:7] ,
  input logic [0:0] send_data__rdy [0:7] ,
  output logic [0:0] send_predicate__en  ,
  output CGRAData_1_1__payload_1__predicate_1 send_predicate__msg  ,
  input logic [0:0] send_predicate__rdy  
);
  localparam logic [2:0] __const__num_inports_at_update_signal  = 3'd6;
  localparam logic [3:0] __const__num_outports_at_update_signal  = 4'd8;
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  logic [2:0] in_dir;
  logic [2:0] in_dir_local;
  logic [7:0] out_rdy_vector;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/noc/CrossbarRTL.py:38
  //     @update
  //     def update_signal():
  //       s.out_rdy_vector     @= 0
  //       s.in_dir             @= 0
  //       s.in_dir_local       @= 0
  //       s.send_predicate.en  @= 0
  //       s.send_predicate.msg @= PredicateType()
  //       for i in range( num_inports ):
  //         s.recv_data[i].rdy @= 0
  //       for i in range( num_outports ):
  //         s.send_data[i].en @= 0
  //         s.send_data[i].msg @= DataType()
  // 
  //       # predicate_out_rdy = b1( 0 )
  //       # For predication register update. 'predicate' and 'predicate_in' no need
  //       # to be active at the same time. Specifically, the 'predicate' is for
  //       # the operation at the current cycle while the 'predicate_in' accumulates
  //       # the predicate and pushes into the predicate register that will be used
  //       # in the future.
  //       if s.recv_opt.msg.predicate:
  //         # s.send_predicate.msg.payload = b1( 0 )
  //         # s.send_predicate.msg.predicate = b1( 0 )
  //         s.send_predicate.msg @= PredicateType( b1(0), b1(0) )
  // 
  //       if s.recv_opt.msg.ctrl != OPT_START:
  //         for i in range( num_inports ):
  //           # Set predicate once the recv_data is stable (i.e., en == true).
  //           if s.recv_opt.msg.predicate_in[i] & s.recv_data[i].en:
  //             s.send_predicate.en @= b1( 1 )
  //             s.send_predicate.msg.payload @= b1( 1 )
  //             s.send_predicate.msg.predicate @= s.send_predicate.msg.predicate | s.recv_data[i].msg.predicate
  //             # predicate_out_rdy = b1( 1 )
  //         for i in range( num_outports ):
  //           s.in_dir  @= s.recv_opt.msg.outport[i]
  //           s.out_rdy_vector[i] @= s.send_data[i].rdy
  // #          s.send_data[i].msg.bypass = b1( 0 )
  //           if (s.in_dir > 0) & s.send_data[i].rdy:
  //             s.in_dir_local @= s.in_dir - 1
  //             s.recv_data[s.in_dir_local].rdy @= s.send_data[i].rdy
  //             s.send_data[i].en         @= s.recv_data[s.in_dir_local].en
  //             if s.send_data[i].en & s.recv_data[s.in_dir_local].rdy:
  //               s.send_data[i].msg.payload   @= s.recv_data[s.in_dir_local].msg.payload
  //               s.send_data[i].msg.predicate @= s.recv_data[s.in_dir_local].msg.predicate
  //               s.send_data[i].msg.bypass    @= s.recv_data[s.in_dir_local].msg.bypass
  //               # The generate one can be send to other tile without buffering,
  //               # but buffering is still needed when 'other tile' is yourself
  //               # (i.e., generating output to self input). Here we avoid self
  //               # connecting by checking whether the inport belongs to FU and
  //               # outport be towards to remote tiles to eliminate combinational
  //               # loop.
  //               if (s.in_dir_local >= s.bypass_point) & (i < s.bypass_point):
  //                 s.send_data[i].msg.bypass @= b1( 1 )
  // #                print("in crossbar ", s, " set bypass ... s.recv_opt.msg.outport[", i, "]: ", s.recv_opt.msg.outport[i])
  //               else:
  //                 s.send_data[i].msg.bypass @= b1( 0 )
  // #              print("in crossbar if... s.send_data[", i, "].msg: ", s.send_data[i].msg, "; recv.rdy: ", s.recv_data[in_dir].rdy)
  //           else:
  //             s.send_data[i].en  @= b1( 0 )
  //             #s.send_data[i].msg = b1( 0 )
  // #            print("in crossbar else... s.send_data[", i, "].msg: ", s.send_data[i].msg)
  // 
  //       else:
  //         for i in range( num_outports ):
  // #          s.send_data[i].msg.bypass = b1( 0 )
  //           s.send_data[i].en @= b1( 0 )
  //       s.recv_opt.rdy @= reduce_or( s.out_rdy_vector )
  
  always_comb begin : update_signal
    out_rdy_vector = 8'd0;
    in_dir = 3'd0;
    in_dir_local = 3'd0;
    send_predicate__en = 1'd0;
    send_predicate__msg = { 1'd0, 1'd0 };
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_update_signal ); i += 1'd1 )
      recv_data__rdy[3'(i)] = 1'd0;
    for ( int unsigned i = 1; i < 4'( __const__num_outports_at_update_signal ); i += 1'd1 ) begin
      send_data__en[3'(i)] = 1'd0;
      send_data__msg[3'(i)] = { 16'd0, 1'd0, 1'd0 };
    end
    if ( recv_opt__msg.predicate ) begin
      send_predicate__msg = { 1'd0, 1'd0 };
    end
    if ( recv_opt__msg.ctrl != 6'( __const__OPT_START ) ) begin
      for ( int unsigned i = 1; i < 3'( __const__num_inports_at_update_signal ); i += 1'd1 )
        if ( recv_opt__msg.predicate_in[3'(i)] & recv_data__en[3'(i)] ) begin
          send_predicate__en = 1'd1;
          send_predicate__msg.payload = 1'd1;
          send_predicate__msg.predicate = send_predicate__msg.predicate | recv_data__msg[3'(i)].predicate;
        end
      for ( int unsigned i = 1; i < 4'( __const__num_outports_at_update_signal ); i += 1'd1 ) begin
        in_dir = recv_opt__msg.outport[3'(i)];
        out_rdy_vector[3'(i)] = send_data__rdy[3'(i)];
        if ( ( in_dir > 3'd0 ) & send_data__rdy[3'(i)] ) begin
          in_dir_local = in_dir - 3'd1;
          recv_data__rdy[in_dir_local] = send_data__rdy[3'(i)];
          send_data__en[3'(i)] = recv_data__en[in_dir_local];
          if ( send_data__en[3'(i)] & recv_data__rdy[in_dir_local] ) begin
            send_data__msg[3'(i)].payload = recv_data__msg[in_dir_local].payload;
            send_data__msg[3'(i)].predicate = recv_data__msg[in_dir_local].predicate;
            send_data__msg[3'(i)].bypass = recv_data__msg[in_dir_local].bypass;
            if ( ( in_dir_local >= 3'd4 ) & ( 3'(i) < 3'd4 ) ) begin
              send_data__msg[3'(i)].bypass = 1'd1;
            end
            else
              send_data__msg[3'(i)].bypass = 1'd0;
          end
        end
        else
          send_data__en[3'(i)] = 1'd0;
      end
    end
    else
      for ( int unsigned i = 1; i < 4'( __const__num_outports_at_update_signal ); i += 1'd1 )
        send_data__en[3'(i)] = 1'd0;
    recv_opt__rdy = ( | out_rdy_vector );
  end

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_CGRAConfig_6_4_6_8__764c37c5066f1efc__nregs_4__rd_ports_1__wr_ports_1__const_zero_False
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py

module RegisterFile__f71aee70bc8be3e5
(
  input  logic [0:0] clk ,
  input  logic [1:0] raddr [0:0],
  output CGRAConfig_6_4_6_8__764c37c5066f1efc rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [1:0] waddr [0:0],
  input  CGRAConfig_6_4_6_8__764c37c5066f1efc wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  CGRAConfig_6_4_6_8__764c37c5066f1efc regs [0:3];

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component CtrlMemRTL Definition
// Full name: CtrlMemRTL__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__ctrl_mem_size_4__ctrl_count_per_iter_4__total_ctrl_steps_140
// At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/ctrl/CtrlMemRTL.py

module CtrlMemRTL__42b68a36bf462733
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv_ctrl__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_ctrl__msg  ,
  output logic [0:0] recv_ctrl__rdy  ,
  input logic [0:0] recv_waddr__en  ,
  input logic [1:0] recv_waddr__msg  ,
  output logic [0:0] recv_waddr__rdy  ,
  output logic [0:0] send_ctrl__en  ,
  output CGRAConfig_6_4_6_8__764c37c5066f1efc send_ctrl__msg  ,
  input logic [0:0] send_ctrl__rdy  
);
  localparam logic [7:0] __const__total_ctrl_steps_at_update_signal  = 8'd140;
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  localparam logic [7:0] __const__total_ctrl_steps_at_update_raddr  = 8'd140;
  localparam logic [2:0] __const__ctrl_count_per_iter_at_update_raddr  = 3'd4;
  logic [7:0] times;
  //-------------------------------------------------------------
  // Component reg_file
  //-------------------------------------------------------------

  logic [0:0] reg_file__clk;
  logic [1:0] reg_file__raddr [0:0];
  CGRAConfig_6_4_6_8__764c37c5066f1efc reg_file__rdata [0:0];
  logic [0:0] reg_file__reset;
  logic [1:0] reg_file__waddr [0:0];
  CGRAConfig_6_4_6_8__764c37c5066f1efc reg_file__wdata [0:0];
  logic [0:0] reg_file__wen [0:0];

  RegisterFile__f71aee70bc8be3e5 reg_file
  (
    .clk( reg_file__clk ),
    .raddr( reg_file__raddr ),
    .rdata( reg_file__rdata ),
    .reset( reg_file__reset ),
    .waddr( reg_file__waddr ),
    .wdata( reg_file__wdata ),
    .wen( reg_file__wen )
  );

  //-------------------------------------------------------------
  // End of component reg_file
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/ctrl/CtrlMemRTL.py:48
  // s.reg_file.wen[0]   //= lambda: s.recv_ctrl.en & s.recv_waddr.en
  
  always_comb begin : _lambda__s_dut_tile_0__ctrl_mem_reg_file_wen_0_
    reg_file__wen[1'd0] = recv_ctrl__en & recv_waddr__en;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/ctrl/CtrlMemRTL.py:50
  // @update
  // def update_signal():
  //   if ( ( total_ctrl_steps > 0 ) & \
  //        ( s.times == TimeType( total_ctrl_steps ) ) ) | \
  //      (s.reg_file.rdata[0].ctrl == OPT_START):
  //     s.send_ctrl.en @= b1( 0 )
  //   else:
  //     s.send_ctrl.en @= s.send_ctrl.rdy # s.recv_raddr[i].rdy
  //   s.recv_waddr.rdy @= b1( 1 )
  //   s.recv_ctrl.rdy @= b1( 1 )
  
  always_comb begin : update_signal
    if ( ( ( 8'( __const__total_ctrl_steps_at_update_signal ) > 8'd0 ) & ( times == 8'd140 ) ) | ( reg_file__rdata[1'd0].ctrl == 6'( __const__OPT_START ) ) ) begin
      send_ctrl__en = 1'd0;
    end
    else
      send_ctrl__en = send_ctrl__rdy;
    recv_waddr__rdy = 1'd1;
    recv_ctrl__rdy = 1'd1;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/ctrl/CtrlMemRTL.py:61
  // @update_ff
  // def update_raddr():
  //   if s.reg_file.rdata[0].ctrl != OPT_START:
  //     if ( total_ctrl_steps == 0 ) | \
  //        ( s.times < TimeType( total_ctrl_steps ) ):
  //       s.times <<= s.times + TimeType( 1 )
  //     # Reads the next ctrl signal only when the current one is done.
  //     if s.send_ctrl.rdy:
  //       if zext(s.reg_file.raddr[0] + 1, PCType) == \
  //          PCType( ctrl_count_per_iter ):
  //         s.reg_file.raddr[0] <<= AddrType( 0 )
  //       else:
  //         s.reg_file.raddr[0] <<= s.reg_file.raddr[0] + AddrType( 1 )
  
  always_ff @(posedge clk) begin : update_raddr
    if ( reg_file__rdata[1'd0].ctrl != 6'( __const__OPT_START ) ) begin
      if ( ( 8'( __const__total_ctrl_steps_at_update_raddr ) == 8'd0 ) | ( times < 8'd140 ) ) begin
        times <= times + 8'd1;
      end
      if ( send_ctrl__rdy ) begin
        if ( { { 1 { 1'b0 } }, reg_file__raddr[1'd0] + 2'd1 } == 3'd4 ) begin
          reg_file__raddr[1'd0] <= 2'd0;
        end
        else
          reg_file__raddr[1'd0] <= reg_file__raddr[1'd0] + 2'd1;
      end
    end
  end

  assign reg_file__clk = clk;
  assign reg_file__reset = reset;
  assign send_ctrl__msg = reg_file__rdata[0];
  assign reg_file__waddr[0] = recv_waddr__msg;
  assign reg_file__wdata[0] = recv_ctrl__msg;

endmodule


// PyMTL Component PhiRTL Definition
// Full name: PhiRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/PhiRTL.py

module PhiRTL__f8a032dec339975b #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  localparam CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_zero = { 16'd0, 1'd0, 1'd0 };
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  localparam logic [0:0] __const__latency_at_proceed_latency  = 1'd1;
  localparam logic [1:0] __const__num_outports_at_update_signal  = 2'd2;
  localparam logic [0:0] __const__latency_at_update_signal  = 1'd1;
  localparam logic [5:0] __const__OPT_NAH  = 6'd1;
  localparam logic [2:0] __const__num_inports_at_comb_logic  = 3'd4;
  localparam logic [1:0] __const__num_outports_at_comb_logic  = 2'd2;
  localparam logic [5:0] __const__OPT_PHI  = 6'd17;
  localparam logic [5:0] __const__OPT_PHI_CONST  = 6'd32;
  logic [2:0] in0;
  logic [1:0] in0_idx;
  logic [2:0] in1;
  logic [1:0] in1_idx;
  logic [0:0] latency;
  logic [1:0] recv_rdy_vector;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/PhiRTL.py:41
  // @update
  // def comb_logic():
  // 
  //   # For pick input register
  //   s.in0 @= 0
  //   s.in1 @= 0
  //   for i in range( num_inports ):
  //     s.recv_in[i].rdy @= b1( 0 )
  //   for i in range( num_outports ):
  //     s.send_out[i].en  @= s.recv_opt.en
  //     s.send_out[i].msg @= DataType()
  // 
  //   s.recv_predicate.rdy @= b1( 0 )
  // 
  //   if s.recv_opt.en:
  //     if s.recv_opt.msg.fu_in[0] != FuInType( 0 ):
  //       s.in0 @= s.recv_opt.msg.fu_in[0] - FuInType( 1 )
  //       s.recv_in[s.in0_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.fu_in[1] != FuInType( 0 ):
  //       s.in1 @= s.recv_opt.msg.fu_in[1] - FuInType( 1 )
  //       s.recv_in[s.in1_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.predicate == b1( 1 ):
  //       s.recv_predicate.rdy @= b1( 1 )
  // 
  //   if s.recv_opt.msg.ctrl == OPT_PHI:
  //     if s.recv_in[s.in0_idx].msg.predicate == Bits1( 1 ):
  //       s.send_out[0].msg.payload   @= s.recv_in[s.in0_idx].msg.payload
  //       s.send_out[0].msg.predicate @= Bits1( 1 )
  //     elif s.recv_in[s.in1_idx].msg.predicate == Bits1( 1 ):
  //       s.send_out[0].msg.payload   @= s.recv_in[s.in1_idx].msg.payload
  //       s.send_out[0].msg.predicate @= Bits1( 1 )
  //     else: # No predecessor is active.
  //       s.send_out[0].msg.payload   @= s.recv_in[s.in0_idx].msg.payload
  //       s.send_out[0].msg.predicate @= Bits1( 0 )
  //     if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                          (s.recv_in_count[s.in1_idx] == 0) ):
  //       s.recv_in[s.in0_idx].rdy   @= b1( 0 )
  //       s.recv_in[s.in1_idx].rdy   @= b1( 0 )
  //       s.recv_predicate.rdy @= b1( 0 )
  //       s.send_out[0].msg.predicate @= b1( 0 )
  // 
  //     if (s.recv_opt.msg.predicate     == b1( 1 )) & \
  //        (s.recv_predicate.msg.payload == b1( 0 )):
  //       s.recv_predicate.rdy @= b1( 0 )
  //       s.recv_in[s.in0_idx].rdy   @= b1( 0 )
  //       s.recv_in[s.in1_idx].rdy   @= b1( 0 )
  // 
  //   elif s.recv_opt.msg.ctrl == OPT_PHI_CONST:
  // 
  //     s.send_out[0].msg.predicate @= Bits1( 1 )
  //     if s.recv_in[s.in0_idx].msg.predicate == Bits1( 1 ):
  //       s.send_out[0].msg.payload   @= s.recv_in[s.in0_idx].msg.payload
  //     else:
  //       s.send_out[0].msg.payload   @= s.recv_const.msg.payload
  // 
  //     # Predication signal not arrive yet.
  //     if (s.recv_opt.msg.predicate     == b1( 1 )) & \
  //        (s.recv_predicate.msg.payload == b1( 0 )):
  //       #s.recv_predicate.rdy = b1( 0 )
  //       s.recv_in[s.in0_idx].rdy   @= b1( 0 )
  // 
  //   else:
  //     for j in range( num_outports ):
  //       s.send_out[j].en @= b1( 0 )
  // 
  //   if s.recv_opt.msg.predicate == b1( 1 ):
  // 
  //     s.send_out[0].msg.predicate @= s.send_out[0].msg.predicate & \
  //                                    s.recv_predicate.msg.predicate
  //     # The PHI_CONST operation executed an the first time does not need predication signal.
  //     if s.recv_opt.msg.ctrl == OPT_PHI_CONST:
  //       if s.recv_predicate.msg.payload == b1( 0 ):
  //         s.send_out[0].msg.predicate @= b1( 1 )
  
  always_comb begin : comb_logic
    in0 = 3'd0;
    in1 = 3'd0;
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
      recv_in__rdy[2'(i)] = 1'd0;
    for ( int unsigned i = 1; i < 2'( __const__num_outports_at_comb_logic ); i += 1'd1 ) begin
      send_out__en[1'(i)] = recv_opt__en;
      send_out__msg[1'(i)] = { 16'd0, 1'd0, 1'd0 };
    end
    recv_predicate__rdy = 1'd0;
    if ( recv_opt__en ) begin
      if ( recv_opt__msg.fu_in[2'd0] != 3'd0 ) begin
        in0 = recv_opt__msg.fu_in[2'd0] - 3'd1;
        recv_in__rdy[in0_idx] = 1'd1;
      end
      if ( recv_opt__msg.fu_in[2'd1] != 3'd0 ) begin
        in1 = recv_opt__msg.fu_in[2'd1] - 3'd1;
        recv_in__rdy[in1_idx] = 1'd1;
      end
      if ( recv_opt__msg.predicate == 1'd1 ) begin
        recv_predicate__rdy = 1'd1;
      end
    end
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_PHI ) ) begin
      if ( recv_in__msg[in0_idx].predicate == 1'd1 ) begin
        send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload;
        send_out__msg[1'd0].predicate = 1'd1;
      end
      else if ( recv_in__msg[in1_idx].predicate == 1'd1 ) begin
        send_out__msg[1'd0].payload = recv_in__msg[in1_idx].payload;
        send_out__msg[1'd0].predicate = 1'd1;
      end
      else begin
        send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload;
        send_out__msg[1'd0].predicate = 1'd0;
      end
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
        recv_predicate__rdy = 1'd0;
        send_out__msg[1'd0].predicate = 1'd0;
      end
      if ( ( recv_opt__msg.predicate == 1'd1 ) & ( recv_predicate__msg.payload == 1'd0 ) ) begin
        recv_predicate__rdy = 1'd0;
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_PHI_CONST ) ) begin
      send_out__msg[1'd0].predicate = 1'd1;
      if ( recv_in__msg[in0_idx].predicate == 1'd1 ) begin
        send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload;
      end
      else
        send_out__msg[1'd0].payload = recv_const__msg.payload;
      if ( ( recv_opt__msg.predicate == 1'd1 ) & ( recv_predicate__msg.payload == 1'd0 ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
      end
    end
    else
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
        send_out__en[1'(j)] = 1'd0;
    if ( recv_opt__msg.predicate == 1'd1 ) begin
      send_out__msg[1'd0].predicate = send_out__msg[1'd0].predicate & recv_predicate__msg.predicate;
      if ( recv_opt__msg.ctrl == 6'( __const__OPT_PHI_CONST ) ) begin
        if ( recv_predicate__msg.payload == 1'd0 ) begin
          send_out__msg[1'd0].predicate = 1'd1;
        end
      end
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:69
  // @update
  // def update_mem():
  //   s.to_mem_waddr.en    @= b1( 0 )
  //   s.to_mem_wdata.en    @= b1( 0 )
  //   s.to_mem_wdata.msg   @= s.const_zero
  //   s.to_mem_waddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.en    @= b1( 0 )
  //   s.from_mem_rdata.rdy @= b1( 0 )
  
  always_comb begin : update_mem
    to_mem_waddr__en = 1'd0;
    to_mem_wdata__en = 1'd0;
    to_mem_wdata__msg = const_zero;
    to_mem_waddr__msg = 7'd0;
    to_mem_raddr__msg = 7'd0;
    to_mem_raddr__en = 1'd0;
    from_mem_rdata__rdy = 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:59
  // @update
  // def update_signal():
  //   for j in range( num_outports ):
  //     s.recv_rdy_vector[j] @= s.send_out[j].rdy
  //   s.recv_const.rdy @= reduce_or( s.recv_rdy_vector ) & ( s.latency == latency - 1 )
  //   # OPT_NAH doesn't require consuming any input.
  //   s.recv_opt.rdy   @= (( s.recv_opt.msg.ctrl == OPT_NAH ) | \
  //                        reduce_or( s.recv_rdy_vector ) ) & \
  //                       ( s.latency == latency - 1 )
  
  always_comb begin : update_signal
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_update_signal ); j += 1'd1 )
      recv_rdy_vector[1'(j)] = send_out__rdy[1'(j)];
    recv_const__rdy = ( | recv_rdy_vector ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
    recv_opt__rdy = ( ( recv_opt__msg.ctrl == 6'( __const__OPT_NAH ) ) | ( | recv_rdy_vector ) ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:50
  // @update_ff
  // def proceed_latency():
  //   if s.recv_opt.msg.ctrl == OPT_START:
  //     s.latency <<= LatencyType( 0 )
  //   elif s.latency == latency - 1:
  //     s.latency <<= LatencyType( 0 )
  //   else:
  //     s.latency <<= s.latency + LatencyType( 1 )
  
  always_ff @(posedge clk) begin : proceed_latency
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_START ) ) begin
      latency <= 1'd0;
    end
    else if ( latency == ( 1'( __const__latency_at_proceed_latency ) - 1'd1 ) ) begin
      latency <= 1'd0;
    end
    else
      latency <= latency + 1'd1;
  end

  assign in0_idx = in0[1:0];
  assign in1_idx = in1[1:0];

endmodule


// PyMTL Component AdderRTL Definition
// Full name: AdderRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/AdderRTL.py

module AdderRTL__f8a032dec339975b #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  localparam CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_zero = { 16'd0, 1'd0, 1'd0 };
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  localparam logic [0:0] __const__latency_at_proceed_latency  = 1'd1;
  localparam logic [1:0] __const__num_outports_at_update_signal  = 2'd2;
  localparam logic [0:0] __const__latency_at_update_signal  = 1'd1;
  localparam logic [5:0] __const__OPT_NAH  = 6'd1;
  localparam logic [2:0] __const__num_inports_at_comb_logic  = 3'd4;
  localparam logic [1:0] __const__num_outports_at_comb_logic  = 2'd2;
  localparam logic [5:0] __const__OPT_ADD  = 6'd2;
  localparam logic [5:0] __const__OPT_ADD_CONST  = 6'd25;
  localparam logic [5:0] __const__OPT_INC  = 6'd3;
  localparam logic [5:0] __const__OPT_SUB  = 6'd4;
  localparam logic [5:0] __const__OPT_PAS  = 6'd31;
  logic [2:0] in0;
  logic [1:0] in0_idx;
  logic [2:0] in1;
  logic [1:0] in1_idx;
  logic [0:0] latency;
  logic [1:0] recv_rdy_vector;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/AdderRTL.py:41
  //     @update
  //     def comb_logic():
  // 
  //       s.in0 @= 0
  //       s.in1 @= 0
  //       s.recv_predicate.rdy @= 0
  //       # For pick input register
  //       for i in range( num_inports ):
  //         s.recv_in[i].rdy @= b1( 0 )
  // 
  //       for i in range( num_outports ):
  //         s.send_out[i].en  @= s.recv_opt.en
  //         s.send_out[i].msg @= DataType()
  // 
  //       s.recv_predicate.rdy @= b1( 0 )
  // 
  //       if s.recv_opt.en:
  //         if s.recv_opt.msg.fu_in[0] != 0:
  //           s.in0 @= zext(s.recv_opt.msg.fu_in[0] - 1, FuInType)
  //           s.recv_in[s.in0_idx].rdy @= b1( 1 )
  //         if s.recv_opt.msg.fu_in[1] != 0:
  //           s.in1 @= zext(s.recv_opt.msg.fu_in[1] - 1, FuInType)
  //           s.recv_in[s.in1_idx].rdy @= b1( 1 )
  //         if s.recv_opt.msg.predicate == b1( 1 ):
  //           s.recv_predicate.rdy @= b1( 1 )
  // 
  //       s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate & \
  //                                      s.recv_in[s.in1_idx].msg.predicate
  // 
  // 
  // #      s.send_out[0].en = s.recv_opt.en
  // 
  //       if s.recv_opt.msg.ctrl == OPT_ADD:
  //         s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload + s.recv_in[s.in1_idx].msg.payload
  //         s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate & s.recv_in[s.in1_idx].msg.predicate
  //         if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                              (s.recv_in_count[s.in1_idx] == 0) ):
  //           s.recv_in[s.in0_idx].rdy @= b1( 0 )
  //           s.recv_in[s.in1_idx].rdy @= b1( 0 )
  //           s.send_out[0].msg.predicate @= b1( 0 )
  //       elif s.recv_opt.msg.ctrl == OPT_ADD_CONST:
  //         s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload + s.recv_const.msg.payload
  //         s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //       elif s.recv_opt.msg.ctrl == OPT_INC:
  //         s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload + s.const_one.payload
  //         s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //       elif s.recv_opt.msg.ctrl == OPT_SUB:
  //         s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload - s.recv_in[s.in1_idx].msg.payload
  //         s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //         if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                              (s.recv_in_count[s.in1_idx] == 0) ):
  //           s.recv_in[s.in0_idx].rdy @= b1( 0 )
  //           s.recv_in[s.in1_idx].rdy @= b1( 0 )
  //           s.send_out[0].msg.predicate @= b1( 0 )
  //       elif s.recv_opt.msg.ctrl == OPT_PAS:
  //         s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload
  //         s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //       else:
  //         for j in range( num_outports ):
  //           s.send_out[j].en @= b1( 0 )
  // 
  //       if s.recv_opt.msg.predicate == b1( 1 ):
  //         s.send_out[0].msg.predicate @= s.send_out[0].msg.predicate & \
  //                                        s.recv_predicate.msg.predicate
  
  always_comb begin : comb_logic
    in0 = 3'd0;
    in1 = 3'd0;
    recv_predicate__rdy = 1'd0;
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
      recv_in__rdy[2'(i)] = 1'd0;
    for ( int unsigned i = 1; i < 2'( __const__num_outports_at_comb_logic ); i += 1'd1 ) begin
      send_out__en[1'(i)] = recv_opt__en;
      send_out__msg[1'(i)] = { 16'd0, 1'd0, 1'd0 };
    end
    recv_predicate__rdy = 1'd0;
    if ( recv_opt__en ) begin
      if ( recv_opt__msg.fu_in[2'd0] != 3'd0 ) begin
        in0 = recv_opt__msg.fu_in[2'd0] - 3'd1;
        recv_in__rdy[in0_idx] = 1'd1;
      end
      if ( recv_opt__msg.fu_in[2'd1] != 3'd0 ) begin
        in1 = recv_opt__msg.fu_in[2'd1] - 3'd1;
        recv_in__rdy[in1_idx] = 1'd1;
      end
      if ( recv_opt__msg.predicate == 1'd1 ) begin
        recv_predicate__rdy = 1'd1;
      end
    end
    send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate & recv_in__msg[in1_idx].predicate;
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_ADD ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload + recv_in__msg[in1_idx].payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate & recv_in__msg[in1_idx].predicate;
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
        send_out__msg[1'd0].predicate = 1'd0;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_ADD_CONST ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload + recv_const__msg.payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_INC ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload + 16'd1;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_SUB ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload - recv_in__msg[in1_idx].payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
        send_out__msg[1'd0].predicate = 1'd0;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_PAS ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
        send_out__en[1'(j)] = 1'd0;
    if ( recv_opt__msg.predicate == 1'd1 ) begin
      send_out__msg[1'd0].predicate = send_out__msg[1'd0].predicate & recv_predicate__msg.predicate;
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:69
  // @update
  // def update_mem():
  //   s.to_mem_waddr.en    @= b1( 0 )
  //   s.to_mem_wdata.en    @= b1( 0 )
  //   s.to_mem_wdata.msg   @= s.const_zero
  //   s.to_mem_waddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.en    @= b1( 0 )
  //   s.from_mem_rdata.rdy @= b1( 0 )
  
  always_comb begin : update_mem
    to_mem_waddr__en = 1'd0;
    to_mem_wdata__en = 1'd0;
    to_mem_wdata__msg = const_zero;
    to_mem_waddr__msg = 7'd0;
    to_mem_raddr__msg = 7'd0;
    to_mem_raddr__en = 1'd0;
    from_mem_rdata__rdy = 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:59
  // @update
  // def update_signal():
  //   for j in range( num_outports ):
  //     s.recv_rdy_vector[j] @= s.send_out[j].rdy
  //   s.recv_const.rdy @= reduce_or( s.recv_rdy_vector ) & ( s.latency == latency - 1 )
  //   # OPT_NAH doesn't require consuming any input.
  //   s.recv_opt.rdy   @= (( s.recv_opt.msg.ctrl == OPT_NAH ) | \
  //                        reduce_or( s.recv_rdy_vector ) ) & \
  //                       ( s.latency == latency - 1 )
  
  always_comb begin : update_signal
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_update_signal ); j += 1'd1 )
      recv_rdy_vector[1'(j)] = send_out__rdy[1'(j)];
    recv_const__rdy = ( | recv_rdy_vector ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
    recv_opt__rdy = ( ( recv_opt__msg.ctrl == 6'( __const__OPT_NAH ) ) | ( | recv_rdy_vector ) ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:50
  // @update_ff
  // def proceed_latency():
  //   if s.recv_opt.msg.ctrl == OPT_START:
  //     s.latency <<= LatencyType( 0 )
  //   elif s.latency == latency - 1:
  //     s.latency <<= LatencyType( 0 )
  //   else:
  //     s.latency <<= s.latency + LatencyType( 1 )
  
  always_ff @(posedge clk) begin : proceed_latency
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_START ) ) begin
      latency <= 1'd0;
    end
    else if ( latency == ( 1'( __const__latency_at_proceed_latency ) - 1'd1 ) ) begin
      latency <= 1'd0;
    end
    else
      latency <= latency + 1'd1;
  end

  assign in0_idx = in0[1:0];
  assign in1_idx = in1[1:0];

endmodule


// PyMTL Component CompRTL Definition
// Full name: CompRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/CompRTL.py

module CompRTL__f8a032dec339975b #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  localparam CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_one  = { 16'd1, 1'd0, 1'd0 };
  localparam CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_zero  = { 16'd0, 1'd0, 1'd0 };
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  localparam logic [0:0] __const__latency_at_proceed_latency  = 1'd1;
  localparam logic [1:0] __const__num_outports_at_update_signal  = 2'd2;
  localparam logic [0:0] __const__latency_at_update_signal  = 1'd1;
  localparam logic [5:0] __const__OPT_NAH  = 6'd1;
  localparam logic [2:0] __const__num_inports_at_read_reg  = 3'd4;
  localparam logic [1:0] __const__num_outports_at_read_reg  = 2'd2;
  localparam logic [5:0] __const__OPT_EQ  = 6'd14;
  localparam logic [5:0] __const__OPT_EQ_CONST  = 6'd33;
  localparam logic [5:0] __const__OPT_LE  = 6'd15;
  logic [2:0] in0;
  logic [1:0] in0_idx;
  logic [2:0] in1;
  logic [1:0] in1_idx;
  logic [0:0] latency;
  logic [1:0] recv_rdy_vector;
  logic [0:0] __tmpvar__read_reg_predicate;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/CompRTL.py:45
  // @update
  // def read_reg():
  // 
  //   # For pick input register
  //   s.in0 @= FuInType( 0 )
  //   s.in1 @= FuInType( 0 )
  //   for i in range( num_inports ):
  //     s.recv_in[i].rdy @= b1( 0 )
  //   s.recv_predicate.rdy @= b1( 0 )
  //   if s.recv_opt.en:
  //     if s.recv_opt.msg.fu_in[0] != FuInType( 0 ):
  //       s.in0 @= s.recv_opt.msg.fu_in[0] - FuInType( 1 )
  //       s.recv_in[s.in0_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.fu_in[1] != FuInType( 0 ):
  //       s.in1 @= s.recv_opt.msg.fu_in[1] - FuInType( 1 )
  //       s.recv_in[s.in1_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.predicate == b1( 1 ):
  //       s.recv_predicate.rdy @= b1( 1 )
  // 
  //   predicate = s.recv_in[s.in0_idx].msg.predicate & s.recv_in[s.in1_idx].msg.predicate
  //   s.send_out[0].msg @= s.const_one
  // 
  //   for j in range( num_outports ):
  //     s.send_out[j].en @= s.recv_opt.en
  // 
  //   if s.recv_opt.msg.ctrl == OPT_EQ:
  //     if s.recv_in[s.in0_idx].msg.payload == s.recv_in[s.in1_idx].msg.payload:
  //       s.send_out[0].msg @= s.const_one
  //       s.send_out[0].msg.predicate @= predicate
  //     else:
  //       s.send_out[0].msg @= s.const_zero
  //       s.send_out[0].msg.predicate @= predicate
  //     if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                          (s.recv_in_count[s.in1_idx] == 0) ):
  //       s.recv_in[s.in0_idx].rdy @= b1( 0 )
  //       s.recv_in[s.in1_idx].rdy @= b1( 0 )
  //       s.send_out[0].msg.predicate @= b1( 0 )
  // 
  //   elif s.recv_opt.msg.ctrl == OPT_EQ_CONST:
  //     if s.recv_in[s.in0_idx].msg.payload == s.recv_const.msg.payload:
  //       s.send_out[0].msg @= s.const_one
  //       s.send_out[0].msg.predicate @= b1( 1 )
  //     else:
  //       s.send_out[0].msg @= s.const_zero
  //       s.send_out[0].msg.predicate @= b1( 1 )
  // 
  //   elif s.recv_opt.msg.ctrl == OPT_LE:
  //     if s.recv_in[s.in0_idx].msg.payload < s.recv_in[s.in1_idx].msg.payload:
  //       s.send_out[0].msg @= s.const_one
  //       s.send_out[0].msg.predicate @= predicate
  //     else:
  //       s.send_out[0].msg @= s.const_zero
  //       s.send_out[0].msg.predicate @= predicate
  //     if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                          (s.recv_in_count[s.in1_idx] == 0) ):
  //       s.recv_in[s.in0_idx].rdy @= b1( 0 )
  //       s.recv_in[s.in1_idx].rdy @= b1( 0 )
  // 
  //   else:
  //     for j in range( num_outports ):
  //       s.send_out[j].en @= b1( 0 )
  // 
  //   # TODO: and -> &
  //   if s.recv_opt.msg.predicate == b1( 1 ):
  //     s.send_out[0].msg.predicate @= s.send_out[0].msg.predicate & \
  //                                    s.recv_predicate.msg.predicate
  
  always_comb begin : read_reg
    in0 = 3'd0;
    in1 = 3'd0;
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_read_reg ); i += 1'd1 )
      recv_in__rdy[2'(i)] = 1'd0;
    recv_predicate__rdy = 1'd0;
    if ( recv_opt__en ) begin
      if ( recv_opt__msg.fu_in[2'd0] != 3'd0 ) begin
        in0 = recv_opt__msg.fu_in[2'd0] - 3'd1;
        recv_in__rdy[in0_idx] = 1'd1;
      end
      if ( recv_opt__msg.fu_in[2'd1] != 3'd0 ) begin
        in1 = recv_opt__msg.fu_in[2'd1] - 3'd1;
        recv_in__rdy[in1_idx] = 1'd1;
      end
      if ( recv_opt__msg.predicate == 1'd1 ) begin
        recv_predicate__rdy = 1'd1;
      end
    end
    __tmpvar__read_reg_predicate = recv_in__msg[in0_idx].predicate & recv_in__msg[in1_idx].predicate;
    send_out__msg[1'd0] = const_one;
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_read_reg ); j += 1'd1 )
      send_out__en[1'(j)] = recv_opt__en;
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_EQ ) ) begin
      if ( recv_in__msg[in0_idx].payload == recv_in__msg[in1_idx].payload ) begin
        send_out__msg[1'd0] = const_one;
        send_out__msg[1'd0].predicate = __tmpvar__read_reg_predicate;
      end
      else begin
        send_out__msg[1'd0] = const_zero;
        send_out__msg[1'd0].predicate = __tmpvar__read_reg_predicate;
      end
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
        send_out__msg[1'd0].predicate = 1'd0;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_EQ_CONST ) ) begin
      if ( recv_in__msg[in0_idx].payload == recv_const__msg.payload ) begin
        send_out__msg[1'd0] = const_one;
        send_out__msg[1'd0].predicate = 1'd1;
      end
      else begin
        send_out__msg[1'd0] = const_zero;
        send_out__msg[1'd0].predicate = 1'd1;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_LE ) ) begin
      if ( recv_in__msg[in0_idx].payload < recv_in__msg[in1_idx].payload ) begin
        send_out__msg[1'd0] = const_one;
        send_out__msg[1'd0].predicate = __tmpvar__read_reg_predicate;
      end
      else begin
        send_out__msg[1'd0] = const_zero;
        send_out__msg[1'd0].predicate = __tmpvar__read_reg_predicate;
      end
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
      end
    end
    else
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_read_reg ); j += 1'd1 )
        send_out__en[1'(j)] = 1'd0;
    if ( recv_opt__msg.predicate == 1'd1 ) begin
      send_out__msg[1'd0].predicate = send_out__msg[1'd0].predicate & recv_predicate__msg.predicate;
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:69
  // @update
  // def update_mem():
  //   s.to_mem_waddr.en    @= b1( 0 )
  //   s.to_mem_wdata.en    @= b1( 0 )
  //   s.to_mem_wdata.msg   @= s.const_zero
  //   s.to_mem_waddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.en    @= b1( 0 )
  //   s.from_mem_rdata.rdy @= b1( 0 )
  
  always_comb begin : update_mem
    to_mem_waddr__en = 1'd0;
    to_mem_wdata__en = 1'd0;
    to_mem_wdata__msg = const_zero;
    to_mem_waddr__msg = 7'd0;
    to_mem_raddr__msg = 7'd0;
    to_mem_raddr__en = 1'd0;
    from_mem_rdata__rdy = 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:59
  // @update
  // def update_signal():
  //   for j in range( num_outports ):
  //     s.recv_rdy_vector[j] @= s.send_out[j].rdy
  //   s.recv_const.rdy @= reduce_or( s.recv_rdy_vector ) & ( s.latency == latency - 1 )
  //   # OPT_NAH doesn't require consuming any input.
  //   s.recv_opt.rdy   @= (( s.recv_opt.msg.ctrl == OPT_NAH ) | \
  //                        reduce_or( s.recv_rdy_vector ) ) & \
  //                       ( s.latency == latency - 1 )
  
  always_comb begin : update_signal
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_update_signal ); j += 1'd1 )
      recv_rdy_vector[1'(j)] = send_out__rdy[1'(j)];
    recv_const__rdy = ( | recv_rdy_vector ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
    recv_opt__rdy = ( ( recv_opt__msg.ctrl == 6'( __const__OPT_NAH ) ) | ( | recv_rdy_vector ) ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:50
  // @update_ff
  // def proceed_latency():
  //   if s.recv_opt.msg.ctrl == OPT_START:
  //     s.latency <<= LatencyType( 0 )
  //   elif s.latency == latency - 1:
  //     s.latency <<= LatencyType( 0 )
  //   else:
  //     s.latency <<= s.latency + LatencyType( 1 )
  
  always_ff @(posedge clk) begin : proceed_latency
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_START ) ) begin
      latency <= 1'd0;
    end
    else if ( latency == ( 1'( __const__latency_at_proceed_latency ) - 1'd1 ) ) begin
      latency <= 1'd0;
    end
    else
      latency <= latency + 1'd1;
  end

  assign in0_idx = in0[1:0];
  assign in1_idx = in1[1:0];

endmodule


// PyMTL Component MulRTL Definition
// Full name: MulRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/MulRTL.py

module MulRTL__f8a032dec339975b #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  localparam CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_zero  = { 16'd0, 1'd0, 1'd0 };
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  localparam logic [0:0] __const__latency_at_proceed_latency  = 1'd1;
  localparam logic [1:0] __const__num_outports_at_update_signal  = 2'd2;
  localparam logic [0:0] __const__latency_at_update_signal  = 1'd1;
  localparam logic [5:0] __const__OPT_NAH  = 6'd1;
  localparam logic [2:0] __const__num_inports_at_comb_logic  = 3'd4;
  localparam logic [1:0] __const__num_outports_at_comb_logic  = 2'd2;
  localparam logic [5:0] __const__OPT_MUL  = 6'd7;
  localparam logic [5:0] __const__OPT_MUL_CONST  = 6'd29;
  localparam logic [5:0] __const__OPT_DIV_CONST  = 6'd26;
  localparam logic [5:0] __const__OPT_REM_CONST  = 6'd37;
  logic [2:0] in0;
  logic [1:0] in0_idx;
  logic [2:0] in1;
  logic [1:0] in1_idx;
  logic [0:0] latency;
  logic [1:0] recv_rdy_vector;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/MulRTL.py:41
  // @update
  // def comb_logic():
  // 
  //   # For pick input register
  //   s.in0 @= 0
  //   s.in1 @= 0
  //   for i in range( num_inports ):
  //     s.recv_in[i].rdy @= b1( 0 )
  //   for i in range( num_outports ):
  //     s.send_out[i].en  @= s.recv_opt.en
  //     s.send_out[i].msg @= DataType()
  // 
  //   s.recv_predicate.rdy @= b1( 0 )
  // 
  //   if s.recv_opt.en:
  //     if s.recv_opt.msg.fu_in[0] != 0:
  //       s.in0 @= zext(s.recv_opt.msg.fu_in[0] - 1, FuInType)
  //       s.recv_in[s.in0_idx].rdy @= b1(1)
  //     if s.recv_opt.msg.fu_in[1] != 0:
  //       s.in1 @= zext(s.recv_opt.msg.fu_in[1] - 1, FuInType)
  //       s.recv_in[s.in1_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.predicate == b1(1):
  //       s.recv_predicate.rdy @= b1( 1 )
  // 
  //   s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate & \
  //                                  s.recv_in[s.in1_idx].msg.predicate
  // 
  //   if s.recv_opt.msg.ctrl == OPT_MUL:
  //     s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload * s.recv_in[s.in1_idx].msg.payload
  //     if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                            (s.recv_in_count[s.in1_idx] == 0) ):
  //       s.recv_in[s.in0_idx].rdy @= b1( 0 )
  //       s.recv_in[s.in1_idx].rdy @= b1( 0 )
  //       s.send_out[0].msg.predicate @= b1( 0 )
  //   elif s.recv_opt.msg.ctrl == OPT_MUL_CONST:
  //     s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload * s.recv_const.msg.payload
  //     s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //   elif s.recv_opt.msg.ctrl == OPT_DIV_CONST:
  //     s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload / s.recv_const.msg.payload
  //     s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //   elif s.recv_opt.msg.ctrl == OPT_REM_CONST:
  //     s.send_out[0].msg.payload @= s.recv_in[s.in0_idx].msg.payload % s.recv_const.msg.payload
  //     s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  //   else:
  //     for j in range( num_outports ):
  //       s.send_out[j].en @= b1( 0 )
  // 
  //   if s.recv_opt.msg.predicate == b1( 1 ):
  //     s.send_out[0].msg.predicate @= s.send_out[0].msg.predicate & \
  //                                   s.recv_predicate.msg.predicate
  
  always_comb begin : comb_logic
    in0 = 3'd0;
    in1 = 3'd0;
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
      recv_in__rdy[2'(i)] = 1'd0;
    for ( int unsigned i = 1; i < 2'( __const__num_outports_at_comb_logic ); i += 1'd1 ) begin
      send_out__en[1'(i)] = recv_opt__en;
      send_out__msg[1'(i)] = { 16'd0, 1'd0, 1'd0 };
    end
    recv_predicate__rdy = 1'd0;
    if ( recv_opt__en ) begin
      if ( recv_opt__msg.fu_in[2'd0] != 3'd0 ) begin
        in0 = recv_opt__msg.fu_in[2'd0] - 3'd1;
        recv_in__rdy[in0_idx] = 1'd1;
      end
      if ( recv_opt__msg.fu_in[2'd1] != 3'd0 ) begin
        in1 = recv_opt__msg.fu_in[2'd1] - 3'd1;
        recv_in__rdy[in1_idx] = 1'd1;
      end
      if ( recv_opt__msg.predicate == 1'd1 ) begin
        recv_predicate__rdy = 1'd1;
      end
    end
    send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate & recv_in__msg[in1_idx].predicate;
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_MUL ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload * recv_in__msg[in1_idx].payload;
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
        send_out__msg[1'd0].predicate = 1'd0;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_MUL_CONST ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload * recv_const__msg.payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_DIV_CONST ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload / recv_const__msg.payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_REM_CONST ) ) begin
      send_out__msg[1'd0].payload = recv_in__msg[in0_idx].payload % recv_const__msg.payload;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
        send_out__en[1'(j)] = 1'd0;
    if ( recv_opt__msg.predicate == 1'd1 ) begin
      send_out__msg[1'd0].predicate = send_out__msg[1'd0].predicate & recv_predicate__msg.predicate;
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:69
  // @update
  // def update_mem():
  //   s.to_mem_waddr.en    @= b1( 0 )
  //   s.to_mem_wdata.en    @= b1( 0 )
  //   s.to_mem_wdata.msg   @= s.const_zero
  //   s.to_mem_waddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.en    @= b1( 0 )
  //   s.from_mem_rdata.rdy @= b1( 0 )
  
  always_comb begin : update_mem
    to_mem_waddr__en = 1'd0;
    to_mem_wdata__en = 1'd0;
    to_mem_wdata__msg = const_zero;
    to_mem_waddr__msg = 7'd0;
    to_mem_raddr__msg = 7'd0;
    to_mem_raddr__en = 1'd0;
    from_mem_rdata__rdy = 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:59
  // @update
  // def update_signal():
  //   for j in range( num_outports ):
  //     s.recv_rdy_vector[j] @= s.send_out[j].rdy
  //   s.recv_const.rdy @= reduce_or( s.recv_rdy_vector ) & ( s.latency == latency - 1 )
  //   # OPT_NAH doesn't require consuming any input.
  //   s.recv_opt.rdy   @= (( s.recv_opt.msg.ctrl == OPT_NAH ) | \
  //                        reduce_or( s.recv_rdy_vector ) ) & \
  //                       ( s.latency == latency - 1 )
  
  always_comb begin : update_signal
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_update_signal ); j += 1'd1 )
      recv_rdy_vector[1'(j)] = send_out__rdy[1'(j)];
    recv_const__rdy = ( | recv_rdy_vector ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
    recv_opt__rdy = ( ( recv_opt__msg.ctrl == 6'( __const__OPT_NAH ) ) | ( | recv_rdy_vector ) ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:50
  // @update_ff
  // def proceed_latency():
  //   if s.recv_opt.msg.ctrl == OPT_START:
  //     s.latency <<= LatencyType( 0 )
  //   elif s.latency == latency - 1:
  //     s.latency <<= LatencyType( 0 )
  //   else:
  //     s.latency <<= s.latency + LatencyType( 1 )
  
  always_ff @(posedge clk) begin : proceed_latency
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_START ) ) begin
      latency <= 1'd0;
    end
    else if ( latency == ( 1'( __const__latency_at_proceed_latency ) - 1'd1 ) ) begin
      latency <= 1'd0;
    end
    else
      latency <= latency + 1'd1;
  end

  assign in0_idx = in0[1:0];
  assign in1_idx = in1[1:0];

endmodule


// PyMTL Component BranchRTL Definition
// Full name: BranchRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/BranchRTL.py

module BranchRTL__f8a032dec339975b #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  localparam CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_zero  = { 16'd0, 1'd0, 1'd0 };
  localparam logic [5:0] __const__OPT_START  = 6'd0;
  localparam logic [0:0] __const__latency_at_proceed_latency  = 1'd1;
  localparam logic [1:0] __const__num_outports_at_update_signal  = 2'd2;
  localparam logic [0:0] __const__latency_at_update_signal  = 1'd1;
  localparam logic [5:0] __const__OPT_NAH  = 6'd1;
  localparam logic [2:0] __const__num_inports_at_comb_logic  = 3'd4;
  localparam logic [1:0] __const__num_outports_at_comb_logic  = 2'd2;
  localparam logic [5:0] __const__OPT_BRH  = 6'd16;
  localparam logic [5:0] __const__OPT_BRH_START  = 6'd34;
  logic [0:0] first;
  logic [2:0] in0;
  logic [1:0] in0_idx;
  logic [0:0] latency;
  logic [1:0] recv_rdy_vector;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/BranchRTL.py:40
  //     @update
  //     def comb_logic():
  // 
  //       # For pick input register
  //       s.in0 @= 0
  //       # in1 = FuInType( 0 )
  //       for i in range( num_inports ):
  //         s.recv_in[i].rdy @= b1( 0 )
  //       for i in range( num_outports ):
  //         s.send_out[i].en  @= s.recv_opt.en
  //         s.send_out[i].msg @= DataType()
  // 
  //       s.recv_predicate.rdy @= b1( 0 )
  // 
  //       if s.recv_opt.en:
  //         if s.recv_opt.msg.fu_in[0] != FuInType( 0 ):
  //           s.in0 @= s.recv_opt.msg.fu_in[0] - FuInType( 1 )
  //           s.recv_in[s.in0_idx].rdy @= b1( 1 )
  // #        if s.recv_opt.msg.fu_in[1] != FuInType( 0 ):
  // #          in1 = s.recv_opt.msg.fu_in[1] - FuInType( 1 )
  // #          s.recv_in[in1].rdy = b1( 1 )
  // 
  //         if s.recv_opt.msg.predicate == b1( 1 ):
  //           s.recv_predicate.rdy @= b1( 1 )
  // 
  //       if s.recv_opt.msg.ctrl == OPT_BRH:
  //         # Branch is only used to set predication rather than delivering value.
  //         s.send_out[0].msg @= DataType(ZeroType( 0 ), b1( 0 ), b1( 0 ) )
  //         s.send_out[1].msg @= DataType(ZeroType( 0 ), b1( 0 ), b1( 0 ) )
  //         if s.recv_in[s.in0_idx].msg.payload == s.const_zero.payload:
  //           s.send_out[0].msg.predicate @= Bits1( 1 )
  //           s.send_out[1].msg.predicate @= Bits1( 0 )
  //         else:
  //           s.send_out[0].msg.predicate @= Bits1( 0 )
  //           s.send_out[1].msg.predicate @= Bits1( 1 )
  //       elif s.recv_opt.msg.ctrl == OPT_BRH_START:
  //         s.send_out[0].msg @= DataType(ZeroType( 0 ), b1( 0 ), b1( 0 ) )
  //         s.send_out[1].msg @= DataType(ZeroType( 0 ), b1( 0 ), b1( 0 ) )
  //         if s.first:
  //           s.send_out[0].msg.predicate @= Bits1( 1 )
  //           s.send_out[1].msg.predicate @= Bits1( 0 )
  //         else:
  //           s.send_out[0].msg.predicate @= Bits1( 0 )
  //           s.send_out[1].msg.predicate @= Bits1( 1 )
  // 
  //       else:
  //         for j in range( num_outports ):
  //           s.send_out[j].en @= b1( 0 )
  // 
  //       if (s.recv_opt.msg.predicate == 1) & (s.recv_opt.msg.ctrl != OPT_BRH_START):
  //         # The operation executed on the first cycle gets no input predicate.
  //         s.send_out[0].msg.predicate @= s.send_out[0].msg.predicate & \
  //                                        s.recv_predicate.msg.predicate
  //         s.send_out[1].msg.predicate @= s.send_out[1].msg.predicate & \
  //                                        s.recv_predicate.msg.predicate
  
  always_comb begin : comb_logic
    in0 = 3'd0;
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
      recv_in__rdy[2'(i)] = 1'd0;
    for ( int unsigned i = 1; i < 2'( __const__num_outports_at_comb_logic ); i += 1'd1 ) begin
      send_out__en[1'(i)] = recv_opt__en;
      send_out__msg[1'(i)] = { 16'd0, 1'd0, 1'd0 };
    end
    recv_predicate__rdy = 1'd0;
    if ( recv_opt__en ) begin
      if ( recv_opt__msg.fu_in[2'd0] != 3'd0 ) begin
        in0 = recv_opt__msg.fu_in[2'd0] - 3'd1;
        recv_in__rdy[in0_idx] = 1'd1;
      end
      if ( recv_opt__msg.predicate == 1'd1 ) begin
        recv_predicate__rdy = 1'd1;
      end
    end
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_BRH ) ) begin
      send_out__msg[1'd0] = { 16'd0, 1'd0, 1'd0 };
      send_out__msg[1'd1] = { 16'd0, 1'd0, 1'd0 };
      if ( recv_in__msg[in0_idx].payload == 16'd0 ) begin
        send_out__msg[1'd0].predicate = 1'd1;
        send_out__msg[1'd1].predicate = 1'd0;
      end
      else begin
        send_out__msg[1'd0].predicate = 1'd0;
        send_out__msg[1'd1].predicate = 1'd1;
      end
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_BRH_START ) ) begin
      send_out__msg[1'd0] = { 16'd0, 1'd0, 1'd0 };
      send_out__msg[1'd1] = { 16'd0, 1'd0, 1'd0 };
      if ( first ) begin
        send_out__msg[1'd0].predicate = 1'd1;
        send_out__msg[1'd1].predicate = 1'd0;
      end
      else begin
        send_out__msg[1'd0].predicate = 1'd0;
        send_out__msg[1'd1].predicate = 1'd1;
      end
    end
    else
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
        send_out__en[1'(j)] = 1'd0;
    if ( ( recv_opt__msg.predicate == 1'd1 ) & ( recv_opt__msg.ctrl != 6'( __const__OPT_BRH_START ) ) ) begin
      send_out__msg[1'd0].predicate = send_out__msg[1'd0].predicate & recv_predicate__msg.predicate;
      send_out__msg[1'd1].predicate = send_out__msg[1'd1].predicate & recv_predicate__msg.predicate;
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:69
  // @update
  // def update_mem():
  //   s.to_mem_waddr.en    @= b1( 0 )
  //   s.to_mem_wdata.en    @= b1( 0 )
  //   s.to_mem_wdata.msg   @= s.const_zero
  //   s.to_mem_waddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.msg   @= AddrType( 0 )
  //   s.to_mem_raddr.en    @= b1( 0 )
  //   s.from_mem_rdata.rdy @= b1( 0 )
  
  always_comb begin : update_mem
    to_mem_waddr__en = 1'd0;
    to_mem_wdata__en = 1'd0;
    to_mem_wdata__msg = const_zero;
    to_mem_waddr__msg = 7'd0;
    to_mem_raddr__msg = 7'd0;
    to_mem_raddr__en = 1'd0;
    from_mem_rdata__rdy = 1'd0;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:59
  // @update
  // def update_signal():
  //   for j in range( num_outports ):
  //     s.recv_rdy_vector[j] @= s.send_out[j].rdy
  //   s.recv_const.rdy @= reduce_or( s.recv_rdy_vector ) & ( s.latency == latency - 1 )
  //   # OPT_NAH doesn't require consuming any input.
  //   s.recv_opt.rdy   @= (( s.recv_opt.msg.ctrl == OPT_NAH ) | \
  //                        reduce_or( s.recv_rdy_vector ) ) & \
  //                       ( s.latency == latency - 1 )
  
  always_comb begin : update_signal
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_update_signal ); j += 1'd1 )
      recv_rdy_vector[1'(j)] = send_out__rdy[1'(j)];
    recv_const__rdy = ( | recv_rdy_vector ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
    recv_opt__rdy = ( ( recv_opt__msg.ctrl == 6'( __const__OPT_NAH ) ) | ( | recv_rdy_vector ) ) & ( latency == ( 1'( __const__latency_at_update_signal ) - 1'd1 ) );
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/BranchRTL.py:98
  // @update_ff
  // def br_start_once():
  //   if s.reset:
  //     s.first <<= b1( 1 )
  //   if s.recv_opt.msg.ctrl == OPT_BRH_START:
  //     s.first <<= b1( 0 )
  
  always_ff @(posedge clk) begin : br_start_once
    if ( reset ) begin
      first <= 1'd1;
    end
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_BRH_START ) ) begin
      first <= 1'd0;
    end
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/basic/Fu.py:50
  // @update_ff
  // def proceed_latency():
  //   if s.recv_opt.msg.ctrl == OPT_START:
  //     s.latency <<= LatencyType( 0 )
  //   elif s.latency == latency - 1:
  //     s.latency <<= LatencyType( 0 )
  //   else:
  //     s.latency <<= s.latency + LatencyType( 1 )
  
  always_ff @(posedge clk) begin : proceed_latency
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_START ) ) begin
      latency <= 1'd0;
    end
    else if ( latency == ( 1'( __const__latency_at_proceed_latency ) - 1'd1 ) ) begin
      latency <= 1'd0;
    end
    else
      latency <= latency + 1'd1;
  end

  assign in0_idx = in0[1:0];

endmodule


// PyMTL Component MemUnitRTL Definition
// Full name: MemUnitRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/MemUnitRTL.py

module MemUnitRTL__f8a032dec339975b #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  localparam logic [2:0] __const__num_inports_at_comb_logic  = 3'd4;
  localparam logic [1:0] __const__num_outports_at_comb_logic  = 2'd2;
  localparam logic [5:0] __const__OPT_LD  = 6'd12;
  localparam logic [5:0] __const__OPT_LD_CONST  = 6'd28;
  localparam logic [5:0] __const__OPT_STR  = 6'd13;
  logic [2:0] in0;
  logic [1:0] in0_idx;
  logic [2:0] in1;
  logic [1:0] in1_idx;
  logic [3:0] recv_in_en_vector;
  logic [1:0] recv_rdy_vector;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/single/MemUnitRTL.py:59
  // @update
  // def comb_logic():
  // 
  //   # For pick input register
  //   s.in0 @= FuInType( 0 )
  //   s.in1 @= FuInType( 0 )
  //   for i in range( num_inports ):
  //     s.recv_in[i].rdy @= b1( 0 )
  // 
  //   s.recv_predicate.rdy @= b1( 0 )
  // 
  //   if s.recv_opt.en:
  //     if s.recv_opt.msg.fu_in[0] != 0:
  //       s.in0 @= zext( s.recv_opt.msg.fu_in[0] - 1, FuInType )
  //       s.recv_in[s.in0_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.fu_in[1] != 0:
  //       s.in1 @= zext( s.recv_opt.msg.fu_in[1] - 1, FuInType )
  //       s.recv_in[s.in1_idx].rdy @= b1( 1 )
  //     if s.recv_opt.msg.predicate == b1( 1 ):
  //       s.recv_predicate.rdy @= b1( 1 )
  // 
  //   for j in range( num_outports ):
  //     # s.recv_const.rdy @= s.send_out[j].rdy | s.recv_const.rdy
  //     s.recv_rdy_vector[j] @= s.send_out[j].rdy
  // 
  //   # for j in range( num_outports ):
  //   #   s.recv_opt.rdy @= s.send_out[j].rdy | s.recv_opt.rdy
  //   s.recv_const.rdy @= reduce_or( s.recv_rdy_vector )
  //   s.recv_opt.rdy   @= reduce_or( s.recv_rdy_vector )
  // 
  //   # for j in range( num_outports ):
  //   #   for i in range( num_inports ):
  //   #     s.send_out[j].en @= s.recv_in[i].en | s.send_out[j].en
  //   #   s.send_out[j].en @= s.send_out[j].en & s.recv_opt.en
  // 
  //   for i in range( num_inports ):
  //     s.recv_in_en_vector[i] @= s.recv_in[i].en
  // 
  //   for j in range( num_outports ):
  //     s.send_out[j].en @= s.recv_opt.en & reduce_or( s.recv_in_en_vector)
  // 
  //   s.send_out[0].msg     @= s.from_mem_rdata.msg
  // 
  //   s.to_mem_waddr.en     @= 0
  //   s.to_mem_waddr.msg    @= AddrType()
  //   s.to_mem_wdata.en     @= 0
  //   s.to_mem_wdata.msg    @= DataType()
  //   s.to_mem_raddr.en     @= 0
  //   s.to_mem_raddr.msg    @= AddrType()
  //   s.from_mem_rdata.rdy  @= 0
  // 
  //   if s.recv_opt.msg.ctrl == OPT_LD:
  //     s.recv_in[s.in0_idx].rdy     @= s.to_mem_raddr.rdy
  //     s.recv_in[s.in1_idx].rdy     @= s.from_mem_rdata.rdy
  //     # s.to_mem_raddr.msg   @= AddrType( s.recv_in[s.in0_idx].msg.payload )
  //     s.to_mem_raddr.msg   @= AddrType( s.recv_in[s.in0_idx].msg.payload[0:AddrType.nbits] )
  //     s.to_mem_raddr.en    @= s.recv_in[s.in0_idx].en
  //     s.from_mem_rdata.rdy @= s.send_out[0].rdy
  //     s.send_out[0].msg    @= s.from_mem_rdata.msg
  //     s.send_out[0].en     @= s.recv_opt.en
  //     s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate
  // 
  //   elif s.recv_opt.msg.ctrl == OPT_LD_CONST:
  //     for i in range( num_inports):
  //       s.recv_in[i].rdy @= b1( 0 )
  //     s.recv_const.rdy     @= s.to_mem_raddr.rdy
  //     s.to_mem_raddr.msg   @= AddrType( s.recv_const.msg.payload[0:AddrType.nbits] )
  //     s.to_mem_raddr.en    @= s.recv_const.en
  //     s.from_mem_rdata.rdy @= s.send_out[0].rdy
  //     s.send_out[0].msg    @= s.from_mem_rdata.msg
  //     s.send_out[0].en     @= s.recv_opt.en
  //     # Const's predicate will always be true.
  //     s.send_out[0].msg.predicate @= b1( 1 )
  // 
  //   # TODO: and -> &
  //   elif s.recv_opt.msg.ctrl == OPT_STR:
  //     s.send_out[0].en     @= s.from_mem_rdata.en & s.recv_in[s.in0_idx].en & s.recv_in[s.in1_idx].en
  //     s.recv_in[s.in0_idx].rdy   @= s.to_mem_waddr.rdy
  //     s.recv_in[s.in1_idx].rdy   @= s.to_mem_wdata.rdy
  //     # s.to_mem_waddr.msg @= AddrType( s.recv_in[0].msg.payload )
  //     s.to_mem_waddr.msg @= AddrType( s.recv_in[0].msg.payload[0:AddrType.nbits] )
  //     s.to_mem_waddr.en  @= s.recv_in[s.in0_idx].en
  //     s.to_mem_wdata.msg @= s.recv_in[s.in1_idx].msg
  //     s.to_mem_wdata.en  @= s.recv_in[s.in1_idx].en
  //     s.send_out[0].en   @= b1( 0 )
  //     s.send_out[0].msg  @= s.from_mem_rdata.msg
  //     s.send_out[0].msg.predicate @= s.recv_in[s.in0_idx].msg.predicate & \
  //                                   s.recv_in[s.in1_idx].msg.predicate
  //     if s.recv_opt.en & ( (s.recv_in_count[s.in0_idx] == 0) | \
  //                          (s.recv_in_count[s.in1_idx] == 0) ):
  //       s.recv_in[s.in0_idx].rdy @= b1( 0 )
  //       s.recv_in[s.in1_idx].rdy @= b1( 0 )
  //       s.send_out[0].msg.predicate @= b1( 0 )
  // 
  //   else:
  //     for j in range( num_outports ):
  //       s.send_out[j].en @= b1( 0 )
  // 
  //   if s.recv_opt.msg.predicate == b1( 1 ):
  //     s.send_out[0].msg.predicate @= s.send_out[0].msg.predicate & \
  //                                    s.recv_predicate.msg.predicate
  
  always_comb begin : comb_logic
    in0 = 3'd0;
    in1 = 3'd0;
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
      recv_in__rdy[2'(i)] = 1'd0;
    recv_predicate__rdy = 1'd0;
    if ( recv_opt__en ) begin
      if ( recv_opt__msg.fu_in[2'd0] != 3'd0 ) begin
        in0 = recv_opt__msg.fu_in[2'd0] - 3'd1;
        recv_in__rdy[in0_idx] = 1'd1;
      end
      if ( recv_opt__msg.fu_in[2'd1] != 3'd0 ) begin
        in1 = recv_opt__msg.fu_in[2'd1] - 3'd1;
        recv_in__rdy[in1_idx] = 1'd1;
      end
      if ( recv_opt__msg.predicate == 1'd1 ) begin
        recv_predicate__rdy = 1'd1;
      end
    end
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
      recv_rdy_vector[1'(j)] = send_out__rdy[1'(j)];
    recv_const__rdy = ( | recv_rdy_vector );
    recv_opt__rdy = ( | recv_rdy_vector );
    for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
      recv_in_en_vector[2'(i)] = recv_in__en[2'(i)];
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
      send_out__en[1'(j)] = recv_opt__en & ( | recv_in_en_vector );
    send_out__msg[1'd0] = from_mem_rdata__msg;
    to_mem_waddr__en = 1'd0;
    to_mem_waddr__msg = 7'd0;
    to_mem_wdata__en = 1'd0;
    to_mem_wdata__msg = { 16'd0, 1'd0, 1'd0 };
    to_mem_raddr__en = 1'd0;
    to_mem_raddr__msg = 7'd0;
    from_mem_rdata__rdy = 1'd0;
    if ( recv_opt__msg.ctrl == 6'( __const__OPT_LD ) ) begin
      recv_in__rdy[in0_idx] = to_mem_raddr__rdy;
      recv_in__rdy[in1_idx] = from_mem_rdata__rdy;
      to_mem_raddr__msg = 7'( recv_in__msg[in0_idx].payload[4'd6:4'd0] );
      to_mem_raddr__en = recv_in__en[in0_idx];
      from_mem_rdata__rdy = send_out__rdy[1'd0];
      send_out__msg[1'd0] = from_mem_rdata__msg;
      send_out__en[1'd0] = recv_opt__en;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate;
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_LD_CONST ) ) begin
      for ( int unsigned i = 1; i < 3'( __const__num_inports_at_comb_logic ); i += 1'd1 )
        recv_in__rdy[2'(i)] = 1'd0;
      recv_const__rdy = to_mem_raddr__rdy;
      to_mem_raddr__msg = 7'( recv_const__msg.payload[4'd6:4'd0] );
      to_mem_raddr__en = recv_const__en;
      from_mem_rdata__rdy = send_out__rdy[1'd0];
      send_out__msg[1'd0] = from_mem_rdata__msg;
      send_out__en[1'd0] = recv_opt__en;
      send_out__msg[1'd0].predicate = 1'd1;
    end
    else if ( recv_opt__msg.ctrl == 6'( __const__OPT_STR ) ) begin
      send_out__en[1'd0] = ( from_mem_rdata__en & recv_in__en[in0_idx] ) & recv_in__en[in1_idx];
      recv_in__rdy[in0_idx] = to_mem_waddr__rdy;
      recv_in__rdy[in1_idx] = to_mem_wdata__rdy;
      to_mem_waddr__msg = 7'( recv_in__msg[2'd0].payload[4'd6:4'd0] );
      to_mem_waddr__en = recv_in__en[in0_idx];
      to_mem_wdata__msg = recv_in__msg[in1_idx];
      to_mem_wdata__en = recv_in__en[in1_idx];
      send_out__en[1'd0] = 1'd0;
      send_out__msg[1'd0] = from_mem_rdata__msg;
      send_out__msg[1'd0].predicate = recv_in__msg[in0_idx].predicate & recv_in__msg[in1_idx].predicate;
      if ( recv_opt__en & ( ( recv_in_count[in0_idx] == 2'd0 ) | ( recv_in_count[in1_idx] == 2'd0 ) ) ) begin
        recv_in__rdy[in0_idx] = 1'd0;
        recv_in__rdy[in1_idx] = 1'd0;
        send_out__msg[1'd0].predicate = 1'd0;
      end
    end
    else
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 )
        send_out__en[1'(j)] = 1'd0;
    if ( recv_opt__msg.predicate == 1'd1 ) begin
      send_out__msg[1'd0].predicate = send_out__msg[1'd0].predicate & recv_predicate__msg.predicate;
    end
  end

  assign in0_idx = in0[1:0];
  assign in1_idx = in1[1:0];

endmodule


// PyMTL Component FlexibleFuRTL Definition
// Full name: FlexibleFuRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__num_inports_4__num_outports_2__data_mem_size_100__FuList_[<class 'VectorCGRA.fu.single.PhiRTL.PhiRTL'>, <class 'VectorCGRA.fu.single.AdderRTL.AdderRTL'>, <class 'VectorCGRA.fu.single.CompRTL.CompRTL'>, <class 'VectorCGRA.fu.single.MulRTL.MulRTL'>, <class 'VectorCGRA.fu.single.BranchRTL.BranchRTL'>, <class 'VectorCGRA.fu.single.MemUnitRTL.MemUnitRTL'>]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/flexible/FlexibleFuRTL.py

module FlexibleFuRTL__91aabf4745f968b9 #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [1:0] recv_in_count [0:3],
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en [0:5] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg [0:5] ,
  output logic [0:0] from_mem_rdata__rdy [0:5] ,
  input logic [0:0] recv_const__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_const__msg  ,
  output logic [0:0] recv_const__rdy  ,
  input logic [0:0] recv_in__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_in__msg [0:3] ,
  output logic [0:0] recv_in__rdy [0:3] ,
  input logic [0:0] recv_opt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_opt__msg  ,
  output logic [0:0] recv_opt__rdy  ,
  input logic [0:0] recv_predicate__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv_predicate__msg  ,
  output logic [0:0] recv_predicate__rdy  ,
  output logic [0:0] send_out__en [0:1] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_out__msg [0:1] ,
  input logic [0:0] send_out__rdy [0:1] ,
  output logic [0:0] to_mem_raddr__en [0:5] ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg [0:5] ,
  input logic [0:0] to_mem_raddr__rdy [0:5] ,
  output logic [0:0] to_mem_waddr__en [0:5] ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg [0:5] ,
  input logic [0:0] to_mem_waddr__rdy [0:5] ,
  output logic [0:0] to_mem_wdata__en [0:5] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg [0:5] ,
  input logic [0:0] to_mem_wdata__rdy [0:5] 
);
  localparam logic [1:0] __const__num_outports_at_comb_logic  = 2'd2;
  localparam logic [2:0] __const__num_inports_at_comb_logic  = 3'd4;
  logic [5:0] fu_recv_const_rdy_vector;
  logic [5:0] fu_recv_in_rdy_vector [0:3];
  logic [5:0] fu_recv_opt_rdy_vector;
  logic [5:0] fu_recv_predicate_rdy_vector;
  //-------------------------------------------------------------
  // Component fu[0:5]
  //-------------------------------------------------------------

  logic [0:0] fu__clk [0:5];
  logic [1:0] fu__recv_in_count [0:5][0:3];
  logic [0:0] fu__reset [0:5];
  logic [0:0] fu__from_mem_rdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 fu__from_mem_rdata__msg [0:5];
  logic [0:0] fu__from_mem_rdata__rdy [0:5];
  logic [0:0] fu__recv_const__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 fu__recv_const__msg [0:5];
  logic [0:0] fu__recv_const__rdy [0:5];
  logic [0:0] fu__recv_in__en [0:5][0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 fu__recv_in__msg [0:5][0:3];
  logic [0:0] fu__recv_in__rdy [0:5][0:3];
  logic [0:0] fu__recv_opt__en [0:5];
  CGRAConfig_6_4_6_8__764c37c5066f1efc fu__recv_opt__msg [0:5];
  logic [0:0] fu__recv_opt__rdy [0:5];
  logic [0:0] fu__recv_predicate__en [0:5];
  CGRAData_1_1__payload_1__predicate_1 fu__recv_predicate__msg [0:5];
  logic [0:0] fu__recv_predicate__rdy [0:5];
  logic [0:0] fu__send_out__en [0:5][0:1];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 fu__send_out__msg [0:5][0:1];
  logic [0:0] fu__send_out__rdy [0:5][0:1];
  logic [0:0] fu__to_mem_raddr__en [0:5];
  logic [TCDMAddrWidth-1:0] fu__to_mem_raddr__msg [0:5];
  logic [0:0] fu__to_mem_raddr__rdy [0:5];
  logic [0:0] fu__to_mem_waddr__en [0:5];
  logic [TCDMAddrWidth-1:0] fu__to_mem_waddr__msg [0:5];
  logic [0:0] fu__to_mem_waddr__rdy [0:5];
  logic [0:0] fu__to_mem_wdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 fu__to_mem_wdata__msg [0:5];
  logic [0:0] fu__to_mem_wdata__rdy [0:5];

  PhiRTL__f8a032dec339975b #(
.TCDMAddrWidth(TCDMAddrWidth)
)fu__0  (
    .clk( fu__clk[0] ),
    .recv_in_count( fu__recv_in_count[0] ),
    .reset( fu__reset[0] ),
    .from_mem_rdata__en( fu__from_mem_rdata__en[0] ),
    .from_mem_rdata__msg( fu__from_mem_rdata__msg[0] ),
    .from_mem_rdata__rdy( fu__from_mem_rdata__rdy[0] ),
    .recv_const__en( fu__recv_const__en[0] ),
    .recv_const__msg( fu__recv_const__msg[0] ),
    .recv_const__rdy( fu__recv_const__rdy[0] ),
    .recv_in__en( fu__recv_in__en[0] ),
    .recv_in__msg( fu__recv_in__msg[0] ),
    .recv_in__rdy( fu__recv_in__rdy[0] ),
    .recv_opt__en( fu__recv_opt__en[0] ),
    .recv_opt__msg( fu__recv_opt__msg[0] ),
    .recv_opt__rdy( fu__recv_opt__rdy[0] ),
    .recv_predicate__en( fu__recv_predicate__en[0] ),
    .recv_predicate__msg( fu__recv_predicate__msg[0] ),
    .recv_predicate__rdy( fu__recv_predicate__rdy[0] ),
    .send_out__en( fu__send_out__en[0] ),
    .send_out__msg( fu__send_out__msg[0] ),
    .send_out__rdy( fu__send_out__rdy[0] ),
    .to_mem_raddr__en( fu__to_mem_raddr__en[0] ),
    .to_mem_raddr__msg( fu__to_mem_raddr__msg[0] ),
    .to_mem_raddr__rdy( fu__to_mem_raddr__rdy[0] ),
    .to_mem_waddr__en( fu__to_mem_waddr__en[0] ),
    .to_mem_waddr__msg( fu__to_mem_waddr__msg[0] ),
    .to_mem_waddr__rdy( fu__to_mem_waddr__rdy[0] ),
    .to_mem_wdata__en( fu__to_mem_wdata__en[0] ),
    .to_mem_wdata__msg( fu__to_mem_wdata__msg[0] ),
    .to_mem_wdata__rdy( fu__to_mem_wdata__rdy[0] )
  );

  AdderRTL__f8a032dec339975b #(
.TCDMAddrWidth(TCDMAddrWidth)
)fu__1  (
    .clk( fu__clk[1] ),
    .recv_in_count( fu__recv_in_count[1] ),
    .reset( fu__reset[1] ),
    .from_mem_rdata__en( fu__from_mem_rdata__en[1] ),
    .from_mem_rdata__msg( fu__from_mem_rdata__msg[1] ),
    .from_mem_rdata__rdy( fu__from_mem_rdata__rdy[1] ),
    .recv_const__en( fu__recv_const__en[1] ),
    .recv_const__msg( fu__recv_const__msg[1] ),
    .recv_const__rdy( fu__recv_const__rdy[1] ),
    .recv_in__en( fu__recv_in__en[1] ),
    .recv_in__msg( fu__recv_in__msg[1] ),
    .recv_in__rdy( fu__recv_in__rdy[1] ),
    .recv_opt__en( fu__recv_opt__en[1] ),
    .recv_opt__msg( fu__recv_opt__msg[1] ),
    .recv_opt__rdy( fu__recv_opt__rdy[1] ),
    .recv_predicate__en( fu__recv_predicate__en[1] ),
    .recv_predicate__msg( fu__recv_predicate__msg[1] ),
    .recv_predicate__rdy( fu__recv_predicate__rdy[1] ),
    .send_out__en( fu__send_out__en[1] ),
    .send_out__msg( fu__send_out__msg[1] ),
    .send_out__rdy( fu__send_out__rdy[1] ),
    .to_mem_raddr__en( fu__to_mem_raddr__en[1] ),
    .to_mem_raddr__msg( fu__to_mem_raddr__msg[1] ),
    .to_mem_raddr__rdy( fu__to_mem_raddr__rdy[1] ),
    .to_mem_waddr__en( fu__to_mem_waddr__en[1] ),
    .to_mem_waddr__msg( fu__to_mem_waddr__msg[1] ),
    .to_mem_waddr__rdy( fu__to_mem_waddr__rdy[1] ),
    .to_mem_wdata__en( fu__to_mem_wdata__en[1] ),
    .to_mem_wdata__msg( fu__to_mem_wdata__msg[1] ),
    .to_mem_wdata__rdy( fu__to_mem_wdata__rdy[1] )
  );

  CompRTL__f8a032dec339975b #(
.TCDMAddrWidth(TCDMAddrWidth)
)fu__2  (
    .clk( fu__clk[2] ),
    .recv_in_count( fu__recv_in_count[2] ),
    .reset( fu__reset[2] ),
    .from_mem_rdata__en( fu__from_mem_rdata__en[2] ),
    .from_mem_rdata__msg( fu__from_mem_rdata__msg[2] ),
    .from_mem_rdata__rdy( fu__from_mem_rdata__rdy[2] ),
    .recv_const__en( fu__recv_const__en[2] ),
    .recv_const__msg( fu__recv_const__msg[2] ),
    .recv_const__rdy( fu__recv_const__rdy[2] ),
    .recv_in__en( fu__recv_in__en[2] ),
    .recv_in__msg( fu__recv_in__msg[2] ),
    .recv_in__rdy( fu__recv_in__rdy[2] ),
    .recv_opt__en( fu__recv_opt__en[2] ),
    .recv_opt__msg( fu__recv_opt__msg[2] ),
    .recv_opt__rdy( fu__recv_opt__rdy[2] ),
    .recv_predicate__en( fu__recv_predicate__en[2] ),
    .recv_predicate__msg( fu__recv_predicate__msg[2] ),
    .recv_predicate__rdy( fu__recv_predicate__rdy[2] ),
    .send_out__en( fu__send_out__en[2] ),
    .send_out__msg( fu__send_out__msg[2] ),
    .send_out__rdy( fu__send_out__rdy[2] ),
    .to_mem_raddr__en( fu__to_mem_raddr__en[2] ),
    .to_mem_raddr__msg( fu__to_mem_raddr__msg[2] ),
    .to_mem_raddr__rdy( fu__to_mem_raddr__rdy[2] ),
    .to_mem_waddr__en( fu__to_mem_waddr__en[2] ),
    .to_mem_waddr__msg( fu__to_mem_waddr__msg[2] ),
    .to_mem_waddr__rdy( fu__to_mem_waddr__rdy[2] ),
    .to_mem_wdata__en( fu__to_mem_wdata__en[2] ),
    .to_mem_wdata__msg( fu__to_mem_wdata__msg[2] ),
    .to_mem_wdata__rdy( fu__to_mem_wdata__rdy[2] )
  );

  MulRTL__f8a032dec339975b #(
.TCDMAddrWidth(TCDMAddrWidth)
) fu__3  (
    .clk( fu__clk[3] ),
    .recv_in_count( fu__recv_in_count[3] ),
    .reset( fu__reset[3] ),
    .from_mem_rdata__en( fu__from_mem_rdata__en[3] ),
    .from_mem_rdata__msg( fu__from_mem_rdata__msg[3] ),
    .from_mem_rdata__rdy( fu__from_mem_rdata__rdy[3] ),
    .recv_const__en( fu__recv_const__en[3] ),
    .recv_const__msg( fu__recv_const__msg[3] ),
    .recv_const__rdy( fu__recv_const__rdy[3] ),
    .recv_in__en( fu__recv_in__en[3] ),
    .recv_in__msg( fu__recv_in__msg[3] ),
    .recv_in__rdy( fu__recv_in__rdy[3] ),
    .recv_opt__en( fu__recv_opt__en[3] ),
    .recv_opt__msg( fu__recv_opt__msg[3] ),
    .recv_opt__rdy( fu__recv_opt__rdy[3] ),
    .recv_predicate__en( fu__recv_predicate__en[3] ),
    .recv_predicate__msg( fu__recv_predicate__msg[3] ),
    .recv_predicate__rdy( fu__recv_predicate__rdy[3] ),
    .send_out__en( fu__send_out__en[3] ),
    .send_out__msg( fu__send_out__msg[3] ),
    .send_out__rdy( fu__send_out__rdy[3] ),
    .to_mem_raddr__en( fu__to_mem_raddr__en[3] ),
    .to_mem_raddr__msg( fu__to_mem_raddr__msg[3] ),
    .to_mem_raddr__rdy( fu__to_mem_raddr__rdy[3] ),
    .to_mem_waddr__en( fu__to_mem_waddr__en[3] ),
    .to_mem_waddr__msg( fu__to_mem_waddr__msg[3] ),
    .to_mem_waddr__rdy( fu__to_mem_waddr__rdy[3] ),
    .to_mem_wdata__en( fu__to_mem_wdata__en[3] ),
    .to_mem_wdata__msg( fu__to_mem_wdata__msg[3] ),
    .to_mem_wdata__rdy( fu__to_mem_wdata__rdy[3] )
  );

  BranchRTL__f8a032dec339975b #(
.TCDMAddrWidth(TCDMAddrWidth)
)fu__4  (
    .clk( fu__clk[4] ),
    .recv_in_count( fu__recv_in_count[4] ),
    .reset( fu__reset[4] ),
    .from_mem_rdata__en( fu__from_mem_rdata__en[4] ),
    .from_mem_rdata__msg( fu__from_mem_rdata__msg[4] ),
    .from_mem_rdata__rdy( fu__from_mem_rdata__rdy[4] ),
    .recv_const__en( fu__recv_const__en[4] ),
    .recv_const__msg( fu__recv_const__msg[4] ),
    .recv_const__rdy( fu__recv_const__rdy[4] ),
    .recv_in__en( fu__recv_in__en[4] ),
    .recv_in__msg( fu__recv_in__msg[4] ),
    .recv_in__rdy( fu__recv_in__rdy[4] ),
    .recv_opt__en( fu__recv_opt__en[4] ),
    .recv_opt__msg( fu__recv_opt__msg[4] ),
    .recv_opt__rdy( fu__recv_opt__rdy[4] ),
    .recv_predicate__en( fu__recv_predicate__en[4] ),
    .recv_predicate__msg( fu__recv_predicate__msg[4] ),
    .recv_predicate__rdy( fu__recv_predicate__rdy[4] ),
    .send_out__en( fu__send_out__en[4] ),
    .send_out__msg( fu__send_out__msg[4] ),
    .send_out__rdy( fu__send_out__rdy[4] ),
    .to_mem_raddr__en( fu__to_mem_raddr__en[4] ),
    .to_mem_raddr__msg( fu__to_mem_raddr__msg[4] ),
    .to_mem_raddr__rdy( fu__to_mem_raddr__rdy[4] ),
    .to_mem_waddr__en( fu__to_mem_waddr__en[4] ),
    .to_mem_waddr__msg( fu__to_mem_waddr__msg[4] ),
    .to_mem_waddr__rdy( fu__to_mem_waddr__rdy[4] ),
    .to_mem_wdata__en( fu__to_mem_wdata__en[4] ),
    .to_mem_wdata__msg( fu__to_mem_wdata__msg[4] ),
    .to_mem_wdata__rdy( fu__to_mem_wdata__rdy[4] )
  );

  MemUnitRTL__f8a032dec339975b #(
.TCDMAddrWidth(TCDMAddrWidth)
) fu__5  (
    .clk( fu__clk[5] ),
    .recv_in_count( fu__recv_in_count[5] ),
    .reset( fu__reset[5] ),
    .from_mem_rdata__en( fu__from_mem_rdata__en[5] ),
    .from_mem_rdata__msg( fu__from_mem_rdata__msg[5] ),
    .from_mem_rdata__rdy( fu__from_mem_rdata__rdy[5] ),
    .recv_const__en( fu__recv_const__en[5] ),
    .recv_const__msg( fu__recv_const__msg[5] ),
    .recv_const__rdy( fu__recv_const__rdy[5] ),
    .recv_in__en( fu__recv_in__en[5] ),
    .recv_in__msg( fu__recv_in__msg[5] ),
    .recv_in__rdy( fu__recv_in__rdy[5] ),
    .recv_opt__en( fu__recv_opt__en[5] ),
    .recv_opt__msg( fu__recv_opt__msg[5] ),
    .recv_opt__rdy( fu__recv_opt__rdy[5] ),
    .recv_predicate__en( fu__recv_predicate__en[5] ),
    .recv_predicate__msg( fu__recv_predicate__msg[5] ),
    .recv_predicate__rdy( fu__recv_predicate__rdy[5] ),
    .send_out__en( fu__send_out__en[5] ),
    .send_out__msg( fu__send_out__msg[5] ),
    .send_out__rdy( fu__send_out__rdy[5] ),
    .to_mem_raddr__en( fu__to_mem_raddr__en[5] ),
    .to_mem_raddr__msg( fu__to_mem_raddr__msg[5] ),
    .to_mem_raddr__rdy( fu__to_mem_raddr__rdy[5] ),
    .to_mem_waddr__en( fu__to_mem_waddr__en[5] ),
    .to_mem_waddr__msg( fu__to_mem_waddr__msg[5] ),
    .to_mem_waddr__rdy( fu__to_mem_waddr__rdy[5] ),
    .to_mem_wdata__en( fu__to_mem_wdata__en[5] ),
    .to_mem_wdata__msg( fu__to_mem_wdata__msg[5] ),
    .to_mem_wdata__rdy( fu__to_mem_wdata__rdy[5] )
  );

  //-------------------------------------------------------------
  // End of component fu[0:5]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/fu/flexible/FlexibleFuRTL.py:58
  // @update
  // def comb_logic():
  // 
  //   for j in range( num_outports ):
  //     s.send_out[j].en  @= b1( 0 )
  //     s.send_out[j].msg @= DataType()
  // 
  //   for i in range( s.fu_list_size ):
  // 
  //     # const connection
  //     s.fu[i].recv_const.msg @= s.recv_const.msg
  //     s.fu[i].recv_const.en  @= s.recv_const.en
  //     # s.recv_const.rdy       @= s.recv_const.rdy | s.fu[i].recv_const.rdy
  //     s.fu_recv_const_rdy_vector[i] @= s.fu[i].recv_const.rdy
  // 
  //     for j in range( num_inports):
  //       s.fu[i].recv_in_count[j] @= s.recv_in_count[j]
  // 
  //     # opt connection
  //     s.fu[i].recv_opt.msg @= s.recv_opt.msg
  //     s.fu[i].recv_opt.en  @= s.recv_opt.en
  //     # s.recv_opt.rdy       @= s.fu[i].recv_opt.rdy | s.recv_opt.rdy
  //     s.fu_recv_opt_rdy_vector[i] @= s.fu[i].recv_opt.rdy
  // 
  //     # Note that the predication for a combined FU should be identical/shareable,
  //     # which means the computation in different basic block cannot be combined.
  //     s.fu[i].recv_opt.msg.predicate @= s.recv_opt.msg.predicate
  //     s.fu[i].recv_predicate.en      @= s.recv_predicate.en
  //     # s.recv_predicate.rdy           @= s.fu[i].recv_predicate.rdy | s.recv_predicate.rdy
  //     s.fu_recv_predicate_rdy_vector[i] @= s.fu[i].recv_predicate.rdy
  //     s.fu[i].recv_predicate.msg     @= s.recv_predicate.msg
  // 
  //     # send_out connection
  //     for j in range( num_outports ):
  //       if s.fu[i].send_out[j].en:
  //         s.send_out[j].msg     @= s.fu[i].send_out[j].msg
  //         s.send_out[j].en      @= s.fu[i].send_out[j].en
  //       s.fu[i].send_out[j].rdy @= s.send_out[j].rdy
  // 
  //   s.recv_const.rdy     @= reduce_or( s.fu_recv_const_rdy_vector )
  //   s.recv_predicate.rdy @= reduce_or( s.fu_recv_predicate_rdy_vector )
  //   s.recv_opt.rdy       @= reduce_or( s.fu_recv_opt_rdy_vector )
  // 
  //   for j in range( num_inports ):
  //     s.recv_in[j].rdy @= b1( 0 )
  // 
  //   # recv_in connection
  //   for port in range( num_inports ):
  //     for i in range( s.fu_list_size ):
  //       s.fu[i].recv_in[port].msg @= s.recv_in[port].msg
  //       s.fu[i].recv_in[port].en  @= s.recv_in[port].en
  //       # s.recv_in[j].rdy       @= s.fu[i].recv_in[j].rdy | s.recv_in[j].rdy
  //       s.fu_recv_in_rdy_vector[port][i] @= s.fu[i].recv_in[port].rdy
  //     s.recv_in[port].rdy @= reduce_or( s.fu_recv_in_rdy_vector[port] )
  
  always_comb begin : comb_logic
    for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 ) begin
      send_out__en[1'(j)] = 1'd0;
      send_out__msg[1'(j)] = { 16'd0, 1'd0, 1'd0 };
    end
    for ( int unsigned i = 1; i < 3'd6; i += 1'd1 ) begin
      fu__recv_const__msg[3'(i)] = recv_const__msg;
      fu__recv_const__en[3'(i)] = recv_const__en;
      fu_recv_const_rdy_vector[3'(i)] = fu__recv_const__rdy[3'(i)];
      for ( int unsigned j = 1; j < 3'( __const__num_inports_at_comb_logic ); j += 1'd1 )
        fu__recv_in_count[3'(i)][2'(j)] = recv_in_count[2'(j)];
      fu__recv_opt__msg[3'(i)] = recv_opt__msg;
      fu__recv_opt__en[3'(i)] = recv_opt__en;
      fu_recv_opt_rdy_vector[3'(i)] = fu__recv_opt__rdy[3'(i)];
      fu__recv_opt__msg[3'(i)].predicate = recv_opt__msg.predicate;
      fu__recv_predicate__en[3'(i)] = recv_predicate__en;
      fu_recv_predicate_rdy_vector[3'(i)] = fu__recv_predicate__rdy[3'(i)];
      fu__recv_predicate__msg[3'(i)] = recv_predicate__msg;
      for ( int unsigned j = 1; j < 2'( __const__num_outports_at_comb_logic ); j += 1'd1 ) begin
        if ( fu__send_out__en[3'(i)][1'(j)] ) begin
          send_out__msg[1'(j)] = fu__send_out__msg[3'(i)][1'(j)];
          send_out__en[1'(j)] = fu__send_out__en[3'(i)][1'(j)];
        end
        fu__send_out__rdy[3'(i)][1'(j)] = send_out__rdy[1'(j)];
      end
    end
    recv_const__rdy = ( | fu_recv_const_rdy_vector );
    recv_predicate__rdy = ( | fu_recv_predicate_rdy_vector );
    recv_opt__rdy = ( | fu_recv_opt_rdy_vector );
    for ( int unsigned j = 1; j < 3'( __const__num_inports_at_comb_logic ); j += 1'd1 )
      recv_in__rdy[2'(j)] = 1'd0;
    for ( int unsigned port = 1'd0; port < 3'( __const__num_inports_at_comb_logic ); port += 1'd1 ) begin
      for ( int unsigned i = 1; i < 3'd6; i += 1'd1 ) begin
        fu__recv_in__msg[3'(i)][2'(port)] = recv_in__msg[2'(port)];
        fu__recv_in__en[3'(i)][2'(port)] = recv_in__en[2'(port)];
        fu_recv_in_rdy_vector[2'(port)][3'(i)] = fu__recv_in__rdy[3'(i)][2'(port)];
      end
      recv_in__rdy[2'(port)] = ( | fu_recv_in_rdy_vector[2'(port)] );
    end
  end

  assign fu__clk[0] = clk;
  assign fu__reset[0] = reset;
  assign fu__clk[1] = clk;
  assign fu__reset[1] = reset;
  assign fu__clk[2] = clk;
  assign fu__reset[2] = reset;
  assign fu__clk[3] = clk;
  assign fu__reset[3] = reset;
  assign fu__clk[4] = clk;
  assign fu__reset[4] = reset;
  assign fu__clk[5] = clk;
  assign fu__reset[5] = reset;
  assign to_mem_raddr__en[0] = fu__to_mem_raddr__en[0];
  assign to_mem_raddr__msg[0] = fu__to_mem_raddr__msg[0];
  assign fu__to_mem_raddr__rdy[0] = to_mem_raddr__rdy[0];
  assign fu__from_mem_rdata__en[0] = from_mem_rdata__en[0];
  assign fu__from_mem_rdata__msg[0] = from_mem_rdata__msg[0];
  assign from_mem_rdata__rdy[0] = fu__from_mem_rdata__rdy[0];
  assign to_mem_waddr__en[0] = fu__to_mem_waddr__en[0];
  assign to_mem_waddr__msg[0] = fu__to_mem_waddr__msg[0];
  assign fu__to_mem_waddr__rdy[0] = to_mem_waddr__rdy[0];
  assign to_mem_wdata__en[0] = fu__to_mem_wdata__en[0];
  assign to_mem_wdata__msg[0] = fu__to_mem_wdata__msg[0];
  assign fu__to_mem_wdata__rdy[0] = to_mem_wdata__rdy[0];
  assign to_mem_raddr__en[1] = fu__to_mem_raddr__en[1];
  assign to_mem_raddr__msg[1] = fu__to_mem_raddr__msg[1];
  assign fu__to_mem_raddr__rdy[1] = to_mem_raddr__rdy[1];
  assign fu__from_mem_rdata__en[1] = from_mem_rdata__en[1];
  assign fu__from_mem_rdata__msg[1] = from_mem_rdata__msg[1];
  assign from_mem_rdata__rdy[1] = fu__from_mem_rdata__rdy[1];
  assign to_mem_waddr__en[1] = fu__to_mem_waddr__en[1];
  assign to_mem_waddr__msg[1] = fu__to_mem_waddr__msg[1];
  assign fu__to_mem_waddr__rdy[1] = to_mem_waddr__rdy[1];
  assign to_mem_wdata__en[1] = fu__to_mem_wdata__en[1];
  assign to_mem_wdata__msg[1] = fu__to_mem_wdata__msg[1];
  assign fu__to_mem_wdata__rdy[1] = to_mem_wdata__rdy[1];
  assign to_mem_raddr__en[2] = fu__to_mem_raddr__en[2];
  assign to_mem_raddr__msg[2] = fu__to_mem_raddr__msg[2];
  assign fu__to_mem_raddr__rdy[2] = to_mem_raddr__rdy[2];
  assign fu__from_mem_rdata__en[2] = from_mem_rdata__en[2];
  assign fu__from_mem_rdata__msg[2] = from_mem_rdata__msg[2];
  assign from_mem_rdata__rdy[2] = fu__from_mem_rdata__rdy[2];
  assign to_mem_waddr__en[2] = fu__to_mem_waddr__en[2];
  assign to_mem_waddr__msg[2] = fu__to_mem_waddr__msg[2];
  assign fu__to_mem_waddr__rdy[2] = to_mem_waddr__rdy[2];
  assign to_mem_wdata__en[2] = fu__to_mem_wdata__en[2];
  assign to_mem_wdata__msg[2] = fu__to_mem_wdata__msg[2];
  assign fu__to_mem_wdata__rdy[2] = to_mem_wdata__rdy[2];
  assign to_mem_raddr__en[3] = fu__to_mem_raddr__en[3];
  assign to_mem_raddr__msg[3] = fu__to_mem_raddr__msg[3];
  assign fu__to_mem_raddr__rdy[3] = to_mem_raddr__rdy[3];
  assign fu__from_mem_rdata__en[3] = from_mem_rdata__en[3];
  assign fu__from_mem_rdata__msg[3] = from_mem_rdata__msg[3];
  assign from_mem_rdata__rdy[3] = fu__from_mem_rdata__rdy[3];
  assign to_mem_waddr__en[3] = fu__to_mem_waddr__en[3];
  assign to_mem_waddr__msg[3] = fu__to_mem_waddr__msg[3];
  assign fu__to_mem_waddr__rdy[3] = to_mem_waddr__rdy[3];
  assign to_mem_wdata__en[3] = fu__to_mem_wdata__en[3];
  assign to_mem_wdata__msg[3] = fu__to_mem_wdata__msg[3];
  assign fu__to_mem_wdata__rdy[3] = to_mem_wdata__rdy[3];
  assign to_mem_raddr__en[4] = fu__to_mem_raddr__en[4];
  assign to_mem_raddr__msg[4] = fu__to_mem_raddr__msg[4];
  assign fu__to_mem_raddr__rdy[4] = to_mem_raddr__rdy[4];
  assign fu__from_mem_rdata__en[4] = from_mem_rdata__en[4];
  assign fu__from_mem_rdata__msg[4] = from_mem_rdata__msg[4];
  assign from_mem_rdata__rdy[4] = fu__from_mem_rdata__rdy[4];
  assign to_mem_waddr__en[4] = fu__to_mem_waddr__en[4];
  assign to_mem_waddr__msg[4] = fu__to_mem_waddr__msg[4];
  assign fu__to_mem_waddr__rdy[4] = to_mem_waddr__rdy[4];
  assign to_mem_wdata__en[4] = fu__to_mem_wdata__en[4];
  assign to_mem_wdata__msg[4] = fu__to_mem_wdata__msg[4];
  assign fu__to_mem_wdata__rdy[4] = to_mem_wdata__rdy[4];
  assign to_mem_raddr__en[5] = fu__to_mem_raddr__en[5];
  assign to_mem_raddr__msg[5] = fu__to_mem_raddr__msg[5];
  assign fu__to_mem_raddr__rdy[5] = to_mem_raddr__rdy[5];
  assign fu__from_mem_rdata__en[5] = from_mem_rdata__en[5];
  assign fu__from_mem_rdata__msg[5] = from_mem_rdata__msg[5];
  assign from_mem_rdata__rdy[5] = fu__from_mem_rdata__rdy[5];
  assign to_mem_waddr__en[5] = fu__to_mem_waddr__en[5];
  assign to_mem_waddr__msg[5] = fu__to_mem_waddr__msg[5];
  assign fu__to_mem_waddr__rdy[5] = to_mem_waddr__rdy[5];
  assign to_mem_wdata__en[5] = fu__to_mem_wdata__en[5];
  assign to_mem_wdata__msg[5] = fu__to_mem_wdata__msg[5];
  assign fu__to_mem_wdata__rdy[5] = to_mem_wdata__rdy[5];

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_CGRAData_1_1__payload_1__predicate_1__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py

module RegisterFile__351680845b4f9dfa
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output CGRAData_1_1__payload_1__predicate_1 rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  CGRAData_1_1__payload_1__predicate_1 wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  CGRAData_1_1__payload_1__predicate_1 regs [0:1];

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/primitive/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpath Definition
// Full name: NormalQueueDpath__EntryType_CGRAData_1_1__payload_1__predicate_1__num_entries_2
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module NormalQueueDpath__d3f62ca56ef20036
(
  input  logic [0:0] clk ,
  output CGRAData_1_1__payload_1__predicate_1 deq_msg ,
  input  CGRAData_1_1__payload_1__predicate_1 enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  CGRAData_1_1__payload_1__predicate_1 queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  CGRAData_1_1__payload_1__predicate_1 queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__351680845b4f9dfa queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_msg = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueue Definition
// Full name: NormalQueue__EntryType_CGRAData_1_1__payload_1__predicate_1__num_entries_2
// At /home/lab-cgra/Envs/miniconda3/envs/CGRA-Flow/lib/python3.7/site-packages/pymtl3/stdlib/dstruct/queues.py

module NormalQueue__d3f62ca56ef20036
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] deq_en ,
  output CGRAData_1_1__payload_1__predicate_1 deq_msg ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  input  CGRAData_1_1__payload_1__predicate_1 enq_msg ,
  output logic [0:0] enq_rdy ,
  input  logic [0:0] reset 
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrl__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  CGRAData_1_1__payload_1__predicate_1 dpath__deq_msg;
  CGRAData_1_1__payload_1__predicate_1 dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpath__d3f62ca56ef20036 dpath
  (
    .clk( dpath__clk ),
    .deq_msg( dpath__deq_msg ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq_en;
  assign enq_rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq_en;
  assign deq_rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq_msg;
  assign deq_msg = dpath__deq_msg;

endmodule


// PyMTL Component RegisterRTL Definition
// Full name: RegisterRTL__DataType_CGRAData_1_1__payload_1__predicate_1__latency_1
// At /home/lab-cgra/OpenCGRA/VectorCGRA/rf/RegisterRTL.py

module RegisterRTL__e306da7100516ae4
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] recv__en  ,
  input CGRAData_1_1__payload_1__predicate_1 recv__msg  ,
  output logic [0:0] recv__rdy  ,
  output logic [0:0] send__en  ,
  output CGRAData_1_1__payload_1__predicate_1 send__msg  ,
  input logic [0:0] send__rdy  
);
  //-------------------------------------------------------------
  // Component queues[0:0]
  //-------------------------------------------------------------

  logic [0:0] queues__clk [0:0];
  logic [1:0] queues__count [0:0];
  logic [0:0] queues__deq_en [0:0];
  CGRAData_1_1__payload_1__predicate_1 queues__deq_msg [0:0];
  logic [0:0] queues__deq_rdy [0:0];
  logic [0:0] queues__enq_en [0:0];
  CGRAData_1_1__payload_1__predicate_1 queues__enq_msg [0:0];
  logic [0:0] queues__enq_rdy [0:0];
  logic [0:0] queues__reset [0:0];

  NormalQueue__d3f62ca56ef20036 queues__0
  (
    .clk( queues__clk[0] ),
    .count( queues__count[0] ),
    .deq_en( queues__deq_en[0] ),
    .deq_msg( queues__deq_msg[0] ),
    .deq_rdy( queues__deq_rdy[0] ),
    .enq_en( queues__enq_en[0] ),
    .enq_msg( queues__enq_msg[0] ),
    .enq_rdy( queues__enq_rdy[0] ),
    .reset( queues__reset[0] )
  );

  //-------------------------------------------------------------
  // End of component queues[0:0]
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/rf/RegisterRTL.py:31
  // @update
  // def process():
  //   s.recv.rdy @= s.queues[0].enq_rdy
  //   s.queues[0].enq_msg @= s.recv.msg
  //   s.queues[0].enq_en  @= s.recv.en & s.queues[0].enq_rdy
  //   for i in range(s.latency - 1):
  //     s.queues[i+1].enq_msg @= s.queues[i].deq_msg
  //     s.queues[i+1].enq_en  @= s.queues[i].deq_rdy & s.queues[i+1].enq_rdy
  //     s.queues[i].deq_en    @= s.queues[i+1].enq_en
  // 
  //   s.send.msg @= s.queues[s.latency-1].deq_msg
  //   s.send.en  @= s.send.rdy & s.queues[s.latency-1].deq_rdy
  //   s.queues[s.latency-1].deq_en @= s.send.en
  
  always_comb begin : process
    recv__rdy = queues__enq_rdy[1'd0];
    queues__enq_msg[1'd0] = recv__msg;
    queues__enq_en[1'd0] = recv__en & queues__enq_rdy[1'd0];
    for ( int unsigned i = 1; i < 1'd1 - 1'd1; i += 1'd1 ) begin
      queues__enq_msg[1'(i) + 1'd1] = queues__deq_msg[1'(i)];
      queues__enq_en[1'(i) + 1'd1] = queues__deq_rdy[1'(i)] & queues__enq_rdy[1'(i) + 1'd1];
      queues__deq_en[1'(i)] = queues__enq_en[1'(i) + 1'd1];
    end
    send__msg = queues__deq_msg[1'd1 - 1'd1];
    send__en = send__rdy & queues__deq_rdy[1'd1 - 1'd1];
    queues__deq_en[1'd1 - 1'd1] = send__en;
  end

  assign queues__clk[0] = clk;
  assign queues__reset[0] = reset;

endmodule


// PyMTL Component TileRTL Definition
// Full name: TileRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__ctrl_mem_size_4__data_mem_size_100__num_ctrl_4__total_steps_140__num_fu_inports_4__num_fu_outports_2__num_connect_inports_4__num_connect_outports_4__Fu_FlexibleFuRTL__FuList_[<class 'VectorCGRA.fu.single.PhiRTL.PhiRTL'>, <class 'VectorCGRA.fu.single.AdderRTL.AdderRTL'>, <class 'VectorCGRA.fu.single.CompRTL.CompRTL'>, <class 'VectorCGRA.fu.single.MulRTL.MulRTL'>, <class 'VectorCGRA.fu.single.BranchRTL.BranchRTL'>, <class 'VectorCGRA.fu.single.MemUnitRTL.MemUnitRTL'>]__const_list_[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py

module TileRTL__c49ddb6cf72af7d2 #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_data__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_data__msg [0:3] ,
  output logic [0:0] recv_data__rdy [0:3] ,
  input logic [0:0] recv_waddr__en  ,
  input logic [1:0] recv_waddr__msg  ,
  output logic [0:0] recv_waddr__rdy  ,
  input logic [0:0] recv_wopt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_wopt__msg  ,
  output logic [0:0] recv_wopt__rdy  ,
  output logic [0:0] send_data__en [0:3] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_data__msg [0:3] ,
  input logic [0:0] send_data__rdy [0:3] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  //-------------------------------------------------------------
  // Component channel[0:7]
  //-------------------------------------------------------------

  logic [0:0] channel__clk [0:7];
  logic [1:0] channel__count [0:7];
  logic [0:0] channel__reset [0:7];
  logic [0:0] channel__recv__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__recv__msg [0:7];
  logic [0:0] channel__recv__rdy [0:7];
  logic [0:0] channel__send__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__send__msg [0:7];
  logic [0:0] channel__send__rdy [0:7];

  ChannelRTL__b3d10fbae4900e6b channel__0
  (
    .clk( channel__clk[0] ),
    .count( channel__count[0] ),
    .reset( channel__reset[0] ),
    .recv__en( channel__recv__en[0] ),
    .recv__msg( channel__recv__msg[0] ),
    .recv__rdy( channel__recv__rdy[0] ),
    .send__en( channel__send__en[0] ),
    .send__msg( channel__send__msg[0] ),
    .send__rdy( channel__send__rdy[0] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__1
  (
    .clk( channel__clk[1] ),
    .count( channel__count[1] ),
    .reset( channel__reset[1] ),
    .recv__en( channel__recv__en[1] ),
    .recv__msg( channel__recv__msg[1] ),
    .recv__rdy( channel__recv__rdy[1] ),
    .send__en( channel__send__en[1] ),
    .send__msg( channel__send__msg[1] ),
    .send__rdy( channel__send__rdy[1] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__2
  (
    .clk( channel__clk[2] ),
    .count( channel__count[2] ),
    .reset( channel__reset[2] ),
    .recv__en( channel__recv__en[2] ),
    .recv__msg( channel__recv__msg[2] ),
    .recv__rdy( channel__recv__rdy[2] ),
    .send__en( channel__send__en[2] ),
    .send__msg( channel__send__msg[2] ),
    .send__rdy( channel__send__rdy[2] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__3
  (
    .clk( channel__clk[3] ),
    .count( channel__count[3] ),
    .reset( channel__reset[3] ),
    .recv__en( channel__recv__en[3] ),
    .recv__msg( channel__recv__msg[3] ),
    .recv__rdy( channel__recv__rdy[3] ),
    .send__en( channel__send__en[3] ),
    .send__msg( channel__send__msg[3] ),
    .send__rdy( channel__send__rdy[3] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__4
  (
    .clk( channel__clk[4] ),
    .count( channel__count[4] ),
    .reset( channel__reset[4] ),
    .recv__en( channel__recv__en[4] ),
    .recv__msg( channel__recv__msg[4] ),
    .recv__rdy( channel__recv__rdy[4] ),
    .send__en( channel__send__en[4] ),
    .send__msg( channel__send__msg[4] ),
    .send__rdy( channel__send__rdy[4] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__5
  (
    .clk( channel__clk[5] ),
    .count( channel__count[5] ),
    .reset( channel__reset[5] ),
    .recv__en( channel__recv__en[5] ),
    .recv__msg( channel__recv__msg[5] ),
    .recv__rdy( channel__recv__rdy[5] ),
    .send__en( channel__send__en[5] ),
    .send__msg( channel__send__msg[5] ),
    .send__rdy( channel__send__rdy[5] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__6
  (
    .clk( channel__clk[6] ),
    .count( channel__count[6] ),
    .reset( channel__reset[6] ),
    .recv__en( channel__recv__en[6] ),
    .recv__msg( channel__recv__msg[6] ),
    .recv__rdy( channel__recv__rdy[6] ),
    .send__en( channel__send__en[6] ),
    .send__msg( channel__send__msg[6] ),
    .send__rdy( channel__send__rdy[6] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__7
  (
    .clk( channel__clk[7] ),
    .count( channel__count[7] ),
    .reset( channel__reset[7] ),
    .recv__en( channel__recv__en[7] ),
    .recv__msg( channel__recv__msg[7] ),
    .recv__rdy( channel__recv__rdy[7] ),
    .send__en( channel__send__en[7] ),
    .send__msg( channel__send__msg[7] ),
    .send__rdy( channel__send__rdy[7] )
  );

  //-------------------------------------------------------------
  // End of component channel[0:7]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component const_queue
  //-------------------------------------------------------------

  logic [0:0] const_queue__clk;
  logic [0:0] const_queue__reset;
  logic [0:0] const_queue__send_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue__send_const__msg;
  logic [0:0] const_queue__send_const__rdy;

  ConstQueueRTL__a9e8e43f61bd7ac6 const_queue
  (
    .clk( const_queue__clk ),
    .reset( const_queue__reset ),
    .send_const__en( const_queue__send_const__en ),
    .send_const__msg( const_queue__send_const__msg ),
    .send_const__rdy( const_queue__send_const__rdy )
  );

  //-------------------------------------------------------------
  // End of component const_queue
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component crossbar
  //-------------------------------------------------------------

  logic [0:0] crossbar__clk;
  logic [0:0] crossbar__reset;
  logic [0:0] crossbar__recv_data__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__recv_data__msg [0:5];
  logic [0:0] crossbar__recv_data__rdy [0:5];
  logic [0:0] crossbar__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc crossbar__recv_opt__msg;
  logic [0:0] crossbar__recv_opt__rdy;
  logic [0:0] crossbar__send_data__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__send_data__msg [0:7];
  logic [0:0] crossbar__send_data__rdy [0:7];
  logic [0:0] crossbar__send_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 crossbar__send_predicate__msg;
  logic [0:0] crossbar__send_predicate__rdy;

  CrossbarRTL__27570a81c91409e5 crossbar
  (
    .clk( crossbar__clk ),
    .reset( crossbar__reset ),
    .recv_data__en( crossbar__recv_data__en ),
    .recv_data__msg( crossbar__recv_data__msg ),
    .recv_data__rdy( crossbar__recv_data__rdy ),
    .recv_opt__en( crossbar__recv_opt__en ),
    .recv_opt__msg( crossbar__recv_opt__msg ),
    .recv_opt__rdy( crossbar__recv_opt__rdy ),
    .send_data__en( crossbar__send_data__en ),
    .send_data__msg( crossbar__send_data__msg ),
    .send_data__rdy( crossbar__send_data__rdy ),
    .send_predicate__en( crossbar__send_predicate__en ),
    .send_predicate__msg( crossbar__send_predicate__msg ),
    .send_predicate__rdy( crossbar__send_predicate__rdy )
  );

  //-------------------------------------------------------------
  // End of component crossbar
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ctrl_mem
  //-------------------------------------------------------------

  logic [0:0] ctrl_mem__clk;
  logic [0:0] ctrl_mem__reset;
  logic [0:0] ctrl_mem__recv_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__recv_ctrl__msg;
  logic [0:0] ctrl_mem__recv_ctrl__rdy;
  logic [0:0] ctrl_mem__recv_waddr__en;
  logic [1:0] ctrl_mem__recv_waddr__msg;
  logic [0:0] ctrl_mem__recv_waddr__rdy;
  logic [0:0] ctrl_mem__send_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__send_ctrl__msg;
  logic [0:0] ctrl_mem__send_ctrl__rdy;

  CtrlMemRTL__42b68a36bf462733 ctrl_mem
  (
    .clk( ctrl_mem__clk ),
    .reset( ctrl_mem__reset ),
    .recv_ctrl__en( ctrl_mem__recv_ctrl__en ),
    .recv_ctrl__msg( ctrl_mem__recv_ctrl__msg ),
    .recv_ctrl__rdy( ctrl_mem__recv_ctrl__rdy ),
    .recv_waddr__en( ctrl_mem__recv_waddr__en ),
    .recv_waddr__msg( ctrl_mem__recv_waddr__msg ),
    .recv_waddr__rdy( ctrl_mem__recv_waddr__rdy ),
    .send_ctrl__en( ctrl_mem__send_ctrl__en ),
    .send_ctrl__msg( ctrl_mem__send_ctrl__msg ),
    .send_ctrl__rdy( ctrl_mem__send_ctrl__rdy )
  );

  //-------------------------------------------------------------
  // End of component ctrl_mem
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component element
  //-------------------------------------------------------------

  logic [0:0] element__clk;
  logic [1:0] element__recv_in_count [0:3];
  logic [0:0] element__reset;
  logic [0:0] element__from_mem_rdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__from_mem_rdata__msg [0:5];
  logic [0:0] element__from_mem_rdata__rdy [0:5];
  logic [0:0] element__recv_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_const__msg;
  logic [0:0] element__recv_const__rdy;
  logic [0:0] element__recv_in__en [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_in__msg [0:3];
  logic [0:0] element__recv_in__rdy [0:3];
  logic [0:0] element__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc element__recv_opt__msg;
  logic [0:0] element__recv_opt__rdy;
  logic [0:0] element__recv_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 element__recv_predicate__msg;
  logic [0:0] element__recv_predicate__rdy;
  logic [0:0] element__send_out__en [0:1];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__send_out__msg [0:1];
  logic [0:0] element__send_out__rdy [0:1];
  logic [0:0] element__to_mem_raddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_raddr__msg [0:5];
  logic [0:0] element__to_mem_raddr__rdy [0:5];
  logic [0:0] element__to_mem_waddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_waddr__msg [0:5];
  logic [0:0] element__to_mem_waddr__rdy [0:5];
  logic [0:0] element__to_mem_wdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__to_mem_wdata__msg [0:5];
  logic [0:0] element__to_mem_wdata__rdy [0:5];

  FlexibleFuRTL__91aabf4745f968b9 #(
.TCDMAddrWidth(TCDMAddrWidth)
) element (
    .clk( element__clk ),
    .recv_in_count( element__recv_in_count ),
    .reset( element__reset ),
    .from_mem_rdata__en( element__from_mem_rdata__en ),
    .from_mem_rdata__msg( element__from_mem_rdata__msg ),
    .from_mem_rdata__rdy( element__from_mem_rdata__rdy ),
    .recv_const__en( element__recv_const__en ),
    .recv_const__msg( element__recv_const__msg ),
    .recv_const__rdy( element__recv_const__rdy ),
    .recv_in__en( element__recv_in__en ),
    .recv_in__msg( element__recv_in__msg ),
    .recv_in__rdy( element__recv_in__rdy ),
    .recv_opt__en( element__recv_opt__en ),
    .recv_opt__msg( element__recv_opt__msg ),
    .recv_opt__rdy( element__recv_opt__rdy ),
    .recv_predicate__en( element__recv_predicate__en ),
    .recv_predicate__msg( element__recv_predicate__msg ),
    .recv_predicate__rdy( element__recv_predicate__rdy ),
    .send_out__en( element__send_out__en ),
    .send_out__msg( element__send_out__msg ),
    .send_out__rdy( element__send_out__rdy ),
    .to_mem_raddr__en( element__to_mem_raddr__en ),
    .to_mem_raddr__msg( element__to_mem_raddr__msg ),
    .to_mem_raddr__rdy( element__to_mem_raddr__rdy ),
    .to_mem_waddr__en( element__to_mem_waddr__en ),
    .to_mem_waddr__msg( element__to_mem_waddr__msg ),
    .to_mem_waddr__rdy( element__to_mem_waddr__rdy ),
    .to_mem_wdata__en( element__to_mem_wdata__en ),
    .to_mem_wdata__msg( element__to_mem_wdata__msg ),
    .to_mem_wdata__rdy( element__to_mem_wdata__rdy )
  );

  //-------------------------------------------------------------
  // End of component element
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component reg_predicate
  //-------------------------------------------------------------

  logic [0:0] reg_predicate__clk;
  logic [0:0] reg_predicate__reset;
  logic [0:0] reg_predicate__recv__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__recv__msg;
  logic [0:0] reg_predicate__recv__rdy;
  logic [0:0] reg_predicate__send__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__send__msg;
  logic [0:0] reg_predicate__send__rdy;

  RegisterRTL__e306da7100516ae4 reg_predicate
  (
    .clk( reg_predicate__clk ),
    .reset( reg_predicate__reset ),
    .recv__en( reg_predicate__recv__en ),
    .recv__msg( reg_predicate__recv__msg ),
    .recv__rdy( reg_predicate__recv__rdy ),
    .send__en( reg_predicate__send__en ),
    .send__msg( reg_predicate__send__msg ),
    .send__rdy( reg_predicate__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component reg_predicate
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py:112
  // @update
  // def update_opt():
  //   s.element.recv_opt.msg   @= s.ctrl_mem.send_ctrl.msg
  //   s.crossbar.recv_opt.msg  @= s.ctrl_mem.send_ctrl.msg
  //   s.element.recv_opt.en    @= s.ctrl_mem.send_ctrl.en
  //   s.crossbar.recv_opt.en   @= s.ctrl_mem.send_ctrl.en
  //   s.ctrl_mem.send_ctrl.rdy @= s.element.recv_opt.rdy & s.crossbar.recv_opt.rdy
  
  always_comb begin : update_opt
    element__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    crossbar__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    element__recv_opt__en = ctrl_mem__send_ctrl__en;
    crossbar__recv_opt__en = ctrl_mem__send_ctrl__en;
    ctrl_mem__send_ctrl__rdy = element__recv_opt__rdy & crossbar__recv_opt__rdy;
  end

  assign element__clk = clk;
  assign element__reset = reset;
  assign const_queue__clk = clk;
  assign const_queue__reset = reset;
  assign crossbar__clk = clk;
  assign crossbar__reset = reset;
  assign ctrl_mem__clk = clk;
  assign ctrl_mem__reset = reset;
  assign channel__clk[0] = clk;
  assign channel__reset[0] = reset;
  assign channel__clk[1] = clk;
  assign channel__reset[1] = reset;
  assign channel__clk[2] = clk;
  assign channel__reset[2] = reset;
  assign channel__clk[3] = clk;
  assign channel__reset[3] = reset;
  assign channel__clk[4] = clk;
  assign channel__reset[4] = reset;
  assign channel__clk[5] = clk;
  assign channel__reset[5] = reset;
  assign channel__clk[6] = clk;
  assign channel__reset[6] = reset;
  assign channel__clk[7] = clk;
  assign channel__reset[7] = reset;
  assign reg_predicate__clk = clk;
  assign reg_predicate__reset = reset;
  assign ctrl_mem__recv_waddr__en = recv_waddr__en;
  assign ctrl_mem__recv_waddr__msg = recv_waddr__msg;
  assign recv_waddr__rdy = ctrl_mem__recv_waddr__rdy;
  assign ctrl_mem__recv_ctrl__en = recv_wopt__en;
  assign ctrl_mem__recv_ctrl__msg = recv_wopt__msg;
  assign recv_wopt__rdy = ctrl_mem__recv_ctrl__rdy;
  assign element__recv_const__en = const_queue__send_const__en;
  assign element__recv_const__msg = const_queue__send_const__msg;
  assign const_queue__send_const__rdy = element__recv_const__rdy;
  assign element__to_mem_raddr__rdy[0] = 1'd0;
  assign element__from_mem_rdata__en[0] = 1'd0;
  assign element__from_mem_rdata__msg[0] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[0] = 1'd0;
  assign element__to_mem_wdata__rdy[0] = 1'd0;
  assign element__to_mem_raddr__rdy[1] = 1'd0;
  assign element__from_mem_rdata__en[1] = 1'd0;
  assign element__from_mem_rdata__msg[1] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[1] = 1'd0;
  assign element__to_mem_wdata__rdy[1] = 1'd0;
  assign element__to_mem_raddr__rdy[2] = 1'd0;
  assign element__from_mem_rdata__en[2] = 1'd0;
  assign element__from_mem_rdata__msg[2] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[2] = 1'd0;
  assign element__to_mem_wdata__rdy[2] = 1'd0;
  assign element__to_mem_raddr__rdy[3] = 1'd0;
  assign element__from_mem_rdata__en[3] = 1'd0;
  assign element__from_mem_rdata__msg[3] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[3] = 1'd0;
  assign element__to_mem_wdata__rdy[3] = 1'd0;
  assign element__to_mem_raddr__rdy[4] = 1'd0;
  assign element__from_mem_rdata__en[4] = 1'd0;
  assign element__from_mem_rdata__msg[4] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[4] = 1'd0;
  assign element__to_mem_wdata__rdy[4] = 1'd0;
  assign to_mem_raddr__en = element__to_mem_raddr__en[5];
  assign to_mem_raddr__msg = element__to_mem_raddr__msg[5];
  assign element__to_mem_raddr__rdy[5] = to_mem_raddr__rdy;
  assign element__from_mem_rdata__en[5] = from_mem_rdata__en;
  assign element__from_mem_rdata__msg[5] = from_mem_rdata__msg;
  assign from_mem_rdata__rdy = element__from_mem_rdata__rdy[5];
  assign to_mem_waddr__en = element__to_mem_waddr__en[5];
  assign to_mem_waddr__msg = element__to_mem_waddr__msg[5];
  assign element__to_mem_waddr__rdy[5] = to_mem_waddr__rdy;
  assign to_mem_wdata__en = element__to_mem_wdata__en[5];
  assign to_mem_wdata__msg = element__to_mem_wdata__msg[5];
  assign element__to_mem_wdata__rdy[5] = to_mem_wdata__rdy;
  assign crossbar__recv_data__en[0] = recv_data__en[0];
  assign crossbar__recv_data__msg[0] = recv_data__msg[0];
  assign recv_data__rdy[0] = crossbar__recv_data__rdy[0];
  assign crossbar__recv_data__en[1] = recv_data__en[1];
  assign crossbar__recv_data__msg[1] = recv_data__msg[1];
  assign recv_data__rdy[1] = crossbar__recv_data__rdy[1];
  assign crossbar__recv_data__en[2] = recv_data__en[2];
  assign crossbar__recv_data__msg[2] = recv_data__msg[2];
  assign recv_data__rdy[2] = crossbar__recv_data__rdy[2];
  assign crossbar__recv_data__en[3] = recv_data__en[3];
  assign crossbar__recv_data__msg[3] = recv_data__msg[3];
  assign recv_data__rdy[3] = crossbar__recv_data__rdy[3];
  assign channel__recv__en[0] = crossbar__send_data__en[0];
  assign channel__recv__msg[0] = crossbar__send_data__msg[0];
  assign crossbar__send_data__rdy[0] = channel__recv__rdy[0];
  assign channel__recv__en[1] = crossbar__send_data__en[1];
  assign channel__recv__msg[1] = crossbar__send_data__msg[1];
  assign crossbar__send_data__rdy[1] = channel__recv__rdy[1];
  assign channel__recv__en[2] = crossbar__send_data__en[2];
  assign channel__recv__msg[2] = crossbar__send_data__msg[2];
  assign crossbar__send_data__rdy[2] = channel__recv__rdy[2];
  assign channel__recv__en[3] = crossbar__send_data__en[3];
  assign channel__recv__msg[3] = crossbar__send_data__msg[3];
  assign crossbar__send_data__rdy[3] = channel__recv__rdy[3];
  assign channel__recv__en[4] = crossbar__send_data__en[4];
  assign channel__recv__msg[4] = crossbar__send_data__msg[4];
  assign crossbar__send_data__rdy[4] = channel__recv__rdy[4];
  assign channel__recv__en[5] = crossbar__send_data__en[5];
  assign channel__recv__msg[5] = crossbar__send_data__msg[5];
  assign crossbar__send_data__rdy[5] = channel__recv__rdy[5];
  assign channel__recv__en[6] = crossbar__send_data__en[6];
  assign channel__recv__msg[6] = crossbar__send_data__msg[6];
  assign crossbar__send_data__rdy[6] = channel__recv__rdy[6];
  assign channel__recv__en[7] = crossbar__send_data__en[7];
  assign channel__recv__msg[7] = crossbar__send_data__msg[7];
  assign crossbar__send_data__rdy[7] = channel__recv__rdy[7];
  assign reg_predicate__recv__en = crossbar__send_predicate__en;
  assign reg_predicate__recv__msg = crossbar__send_predicate__msg;
  assign crossbar__send_predicate__rdy = reg_predicate__recv__rdy;
  assign element__recv_predicate__en = reg_predicate__send__en;
  assign element__recv_predicate__msg = reg_predicate__send__msg;
  assign reg_predicate__send__rdy = element__recv_predicate__rdy;
  assign send_data__en[0] = channel__send__en[0];
  assign send_data__msg[0] = channel__send__msg[0];
  assign channel__send__rdy[0] = send_data__rdy[0];
  assign send_data__en[1] = channel__send__en[1];
  assign send_data__msg[1] = channel__send__msg[1];
  assign channel__send__rdy[1] = send_data__rdy[1];
  assign send_data__en[2] = channel__send__en[2];
  assign send_data__msg[2] = channel__send__msg[2];
  assign channel__send__rdy[2] = send_data__rdy[2];
  assign send_data__en[3] = channel__send__en[3];
  assign send_data__msg[3] = channel__send__msg[3];
  assign channel__send__rdy[3] = send_data__rdy[3];
  assign element__recv_in__en[0] = channel__send__en[4];
  assign element__recv_in__msg[0] = channel__send__msg[4];
  assign channel__send__rdy[4] = element__recv_in__rdy[0];
  assign element__recv_in_count[0] = channel__count[4];
  assign element__recv_in__en[1] = channel__send__en[5];
  assign element__recv_in__msg[1] = channel__send__msg[5];
  assign channel__send__rdy[5] = element__recv_in__rdy[1];
  assign element__recv_in_count[1] = channel__count[5];
  assign element__recv_in__en[2] = channel__send__en[6];
  assign element__recv_in__msg[2] = channel__send__msg[6];
  assign channel__send__rdy[6] = element__recv_in__rdy[2];
  assign element__recv_in_count[2] = channel__count[6];
  assign element__recv_in__en[3] = channel__send__en[7];
  assign element__recv_in__msg[3] = channel__send__msg[7];
  assign channel__send__rdy[7] = element__recv_in__rdy[3];
  assign element__recv_in_count[3] = channel__count[7];
  assign crossbar__recv_data__en[4] = element__send_out__en[0];
  assign crossbar__recv_data__msg[4] = element__send_out__msg[0];
  assign element__send_out__rdy[0] = crossbar__recv_data__rdy[4];
  assign crossbar__recv_data__en[5] = element__send_out__en[1];
  assign crossbar__recv_data__msg[5] = element__send_out__msg[1];
  assign element__send_out__rdy[1] = crossbar__recv_data__rdy[5];

endmodule


// PyMTL Component ConstQueueRTL Definition
// Full name: ConstQueueRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__const_list_[CGRAData_16_1_1(Bits16(0x000a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py

module ConstQueueRTL__022ccf85b5d94e58
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] send_const__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_const__msg  ,
  input logic [0:0] send_const__rdy  
);
  localparam logic [2:0] __const__num_const_at_update_raddr  = 3'd4;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue [0:4];
  logic [2:0] cur;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:41
  // @update
  // def load():
  //   s.send_const.msg @= s.const_queue[ s.cur ]
  
  always_comb begin : load
    send_const__msg = const_queue[cur];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:45
  // @update
  // def update_en():
  //   s.send_const.en @= s.send_const.rdy
  
  always_comb begin : update_en
    send_const__en = send_const__rdy;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:49
  // @update_ff
  // def update_raddr():
  //   # if s.send_const.rdy:
  //     if s.cur + AddrType( 1 )  >= AddrType( num_const ):
  //       s.cur <<= AddrType( 0 )
  //     else:
  //       s.cur <<= s.cur + AddrType( 1 )
  
  always_ff @(posedge clk) begin : update_raddr
    if ( ( cur + 3'd1 ) >= 3'd4 ) begin
      cur <= 3'd0;
    end
    else
      cur <= cur + 3'd1;
  end

  assign const_queue[0] = { 16'd10, 1'd1, 1'd0 };
  assign const_queue[1] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[2] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[3] = { 16'd0, 1'd1, 1'd0 };

endmodule


// PyMTL Component TileRTL Definition
// Full name: TileRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__ctrl_mem_size_4__data_mem_size_100__num_ctrl_4__total_steps_140__num_fu_inports_4__num_fu_outports_2__num_connect_inports_4__num_connect_outports_4__Fu_FlexibleFuRTL__FuList_[<class 'VectorCGRA.fu.single.PhiRTL.PhiRTL'>, <class 'VectorCGRA.fu.single.AdderRTL.AdderRTL'>, <class 'VectorCGRA.fu.single.CompRTL.CompRTL'>, <class 'VectorCGRA.fu.single.MulRTL.MulRTL'>, <class 'VectorCGRA.fu.single.BranchRTL.BranchRTL'>, <class 'VectorCGRA.fu.single.MemUnitRTL.MemUnitRTL'>]__const_list_[CGRAData_16_1_1(Bits16(0x000a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py

module TileRTL__3eb488da24ed7118#(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_data__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_data__msg [0:3] ,
  output logic [0:0] recv_data__rdy [0:3] ,
  input logic [0:0] recv_waddr__en  ,
  input logic [1:0] recv_waddr__msg  ,
  output logic [0:0] recv_waddr__rdy  ,
  input logic [0:0] recv_wopt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_wopt__msg  ,
  output logic [0:0] recv_wopt__rdy  ,
  output logic [0:0] send_data__en [0:3] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_data__msg [0:3] ,
  input logic [0:0] send_data__rdy [0:3] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  //-------------------------------------------------------------
  // Component channel[0:7]
  //-------------------------------------------------------------

  logic [0:0] channel__clk [0:7];
  logic [1:0] channel__count [0:7];
  logic [0:0] channel__reset [0:7];
  logic [0:0] channel__recv__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__recv__msg [0:7];
  logic [0:0] channel__recv__rdy [0:7];
  logic [0:0] channel__send__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__send__msg [0:7];
  logic [0:0] channel__send__rdy [0:7];

  ChannelRTL__b3d10fbae4900e6b channel__0
  (
    .clk( channel__clk[0] ),
    .count( channel__count[0] ),
    .reset( channel__reset[0] ),
    .recv__en( channel__recv__en[0] ),
    .recv__msg( channel__recv__msg[0] ),
    .recv__rdy( channel__recv__rdy[0] ),
    .send__en( channel__send__en[0] ),
    .send__msg( channel__send__msg[0] ),
    .send__rdy( channel__send__rdy[0] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__1
  (
    .clk( channel__clk[1] ),
    .count( channel__count[1] ),
    .reset( channel__reset[1] ),
    .recv__en( channel__recv__en[1] ),
    .recv__msg( channel__recv__msg[1] ),
    .recv__rdy( channel__recv__rdy[1] ),
    .send__en( channel__send__en[1] ),
    .send__msg( channel__send__msg[1] ),
    .send__rdy( channel__send__rdy[1] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__2
  (
    .clk( channel__clk[2] ),
    .count( channel__count[2] ),
    .reset( channel__reset[2] ),
    .recv__en( channel__recv__en[2] ),
    .recv__msg( channel__recv__msg[2] ),
    .recv__rdy( channel__recv__rdy[2] ),
    .send__en( channel__send__en[2] ),
    .send__msg( channel__send__msg[2] ),
    .send__rdy( channel__send__rdy[2] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__3
  (
    .clk( channel__clk[3] ),
    .count( channel__count[3] ),
    .reset( channel__reset[3] ),
    .recv__en( channel__recv__en[3] ),
    .recv__msg( channel__recv__msg[3] ),
    .recv__rdy( channel__recv__rdy[3] ),
    .send__en( channel__send__en[3] ),
    .send__msg( channel__send__msg[3] ),
    .send__rdy( channel__send__rdy[3] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__4
  (
    .clk( channel__clk[4] ),
    .count( channel__count[4] ),
    .reset( channel__reset[4] ),
    .recv__en( channel__recv__en[4] ),
    .recv__msg( channel__recv__msg[4] ),
    .recv__rdy( channel__recv__rdy[4] ),
    .send__en( channel__send__en[4] ),
    .send__msg( channel__send__msg[4] ),
    .send__rdy( channel__send__rdy[4] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__5
  (
    .clk( channel__clk[5] ),
    .count( channel__count[5] ),
    .reset( channel__reset[5] ),
    .recv__en( channel__recv__en[5] ),
    .recv__msg( channel__recv__msg[5] ),
    .recv__rdy( channel__recv__rdy[5] ),
    .send__en( channel__send__en[5] ),
    .send__msg( channel__send__msg[5] ),
    .send__rdy( channel__send__rdy[5] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__6
  (
    .clk( channel__clk[6] ),
    .count( channel__count[6] ),
    .reset( channel__reset[6] ),
    .recv__en( channel__recv__en[6] ),
    .recv__msg( channel__recv__msg[6] ),
    .recv__rdy( channel__recv__rdy[6] ),
    .send__en( channel__send__en[6] ),
    .send__msg( channel__send__msg[6] ),
    .send__rdy( channel__send__rdy[6] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__7
  (
    .clk( channel__clk[7] ),
    .count( channel__count[7] ),
    .reset( channel__reset[7] ),
    .recv__en( channel__recv__en[7] ),
    .recv__msg( channel__recv__msg[7] ),
    .recv__rdy( channel__recv__rdy[7] ),
    .send__en( channel__send__en[7] ),
    .send__msg( channel__send__msg[7] ),
    .send__rdy( channel__send__rdy[7] )
  );

  //-------------------------------------------------------------
  // End of component channel[0:7]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component const_queue
  //-------------------------------------------------------------

  logic [0:0] const_queue__clk;
  logic [0:0] const_queue__reset;
  logic [0:0] const_queue__send_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue__send_const__msg;
  logic [0:0] const_queue__send_const__rdy;

  ConstQueueRTL__022ccf85b5d94e58 const_queue
  (
    .clk( const_queue__clk ),
    .reset( const_queue__reset ),
    .send_const__en( const_queue__send_const__en ),
    .send_const__msg( const_queue__send_const__msg ),
    .send_const__rdy( const_queue__send_const__rdy )
  );

  //-------------------------------------------------------------
  // End of component const_queue
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component crossbar
  //-------------------------------------------------------------

  logic [0:0] crossbar__clk;
  logic [0:0] crossbar__reset;
  logic [0:0] crossbar__recv_data__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__recv_data__msg [0:5];
  logic [0:0] crossbar__recv_data__rdy [0:5];
  logic [0:0] crossbar__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc crossbar__recv_opt__msg;
  logic [0:0] crossbar__recv_opt__rdy;
  logic [0:0] crossbar__send_data__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__send_data__msg [0:7];
  logic [0:0] crossbar__send_data__rdy [0:7];
  logic [0:0] crossbar__send_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 crossbar__send_predicate__msg;
  logic [0:0] crossbar__send_predicate__rdy;

  CrossbarRTL__27570a81c91409e5 crossbar
  (
    .clk( crossbar__clk ),
    .reset( crossbar__reset ),
    .recv_data__en( crossbar__recv_data__en ),
    .recv_data__msg( crossbar__recv_data__msg ),
    .recv_data__rdy( crossbar__recv_data__rdy ),
    .recv_opt__en( crossbar__recv_opt__en ),
    .recv_opt__msg( crossbar__recv_opt__msg ),
    .recv_opt__rdy( crossbar__recv_opt__rdy ),
    .send_data__en( crossbar__send_data__en ),
    .send_data__msg( crossbar__send_data__msg ),
    .send_data__rdy( crossbar__send_data__rdy ),
    .send_predicate__en( crossbar__send_predicate__en ),
    .send_predicate__msg( crossbar__send_predicate__msg ),
    .send_predicate__rdy( crossbar__send_predicate__rdy )
  );

  //-------------------------------------------------------------
  // End of component crossbar
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ctrl_mem
  //-------------------------------------------------------------

  logic [0:0] ctrl_mem__clk;
  logic [0:0] ctrl_mem__reset;
  logic [0:0] ctrl_mem__recv_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__recv_ctrl__msg;
  logic [0:0] ctrl_mem__recv_ctrl__rdy;
  logic [0:0] ctrl_mem__recv_waddr__en;
  logic [1:0] ctrl_mem__recv_waddr__msg;
  logic [0:0] ctrl_mem__recv_waddr__rdy;
  logic [0:0] ctrl_mem__send_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__send_ctrl__msg;
  logic [0:0] ctrl_mem__send_ctrl__rdy;

  CtrlMemRTL__42b68a36bf462733 ctrl_mem
  (
    .clk( ctrl_mem__clk ),
    .reset( ctrl_mem__reset ),
    .recv_ctrl__en( ctrl_mem__recv_ctrl__en ),
    .recv_ctrl__msg( ctrl_mem__recv_ctrl__msg ),
    .recv_ctrl__rdy( ctrl_mem__recv_ctrl__rdy ),
    .recv_waddr__en( ctrl_mem__recv_waddr__en ),
    .recv_waddr__msg( ctrl_mem__recv_waddr__msg ),
    .recv_waddr__rdy( ctrl_mem__recv_waddr__rdy ),
    .send_ctrl__en( ctrl_mem__send_ctrl__en ),
    .send_ctrl__msg( ctrl_mem__send_ctrl__msg ),
    .send_ctrl__rdy( ctrl_mem__send_ctrl__rdy )
  );

  //-------------------------------------------------------------
  // End of component ctrl_mem
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component element
  //-------------------------------------------------------------

  logic [0:0] element__clk;
  logic [1:0] element__recv_in_count [0:3];
  logic [0:0] element__reset;
  logic [0:0] element__from_mem_rdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__from_mem_rdata__msg [0:5];
  logic [0:0] element__from_mem_rdata__rdy [0:5];
  logic [0:0] element__recv_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_const__msg;
  logic [0:0] element__recv_const__rdy;
  logic [0:0] element__recv_in__en [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_in__msg [0:3];
  logic [0:0] element__recv_in__rdy [0:3];
  logic [0:0] element__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc element__recv_opt__msg;
  logic [0:0] element__recv_opt__rdy;
  logic [0:0] element__recv_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 element__recv_predicate__msg;
  logic [0:0] element__recv_predicate__rdy;
  logic [0:0] element__send_out__en [0:1];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__send_out__msg [0:1];
  logic [0:0] element__send_out__rdy [0:1];
  logic [0:0] element__to_mem_raddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_raddr__msg [0:5];
  logic [0:0] element__to_mem_raddr__rdy [0:5];
  logic [0:0] element__to_mem_waddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_waddr__msg [0:5];
  logic [0:0] element__to_mem_waddr__rdy [0:5];
  logic [0:0] element__to_mem_wdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__to_mem_wdata__msg [0:5];
  logic [0:0] element__to_mem_wdata__rdy [0:5];

  FlexibleFuRTL__91aabf4745f968b9 element
  (
    .clk( element__clk ),
    .recv_in_count( element__recv_in_count ),
    .reset( element__reset ),
    .from_mem_rdata__en( element__from_mem_rdata__en ),
    .from_mem_rdata__msg( element__from_mem_rdata__msg ),
    .from_mem_rdata__rdy( element__from_mem_rdata__rdy ),
    .recv_const__en( element__recv_const__en ),
    .recv_const__msg( element__recv_const__msg ),
    .recv_const__rdy( element__recv_const__rdy ),
    .recv_in__en( element__recv_in__en ),
    .recv_in__msg( element__recv_in__msg ),
    .recv_in__rdy( element__recv_in__rdy ),
    .recv_opt__en( element__recv_opt__en ),
    .recv_opt__msg( element__recv_opt__msg ),
    .recv_opt__rdy( element__recv_opt__rdy ),
    .recv_predicate__en( element__recv_predicate__en ),
    .recv_predicate__msg( element__recv_predicate__msg ),
    .recv_predicate__rdy( element__recv_predicate__rdy ),
    .send_out__en( element__send_out__en ),
    .send_out__msg( element__send_out__msg ),
    .send_out__rdy( element__send_out__rdy ),
    .to_mem_raddr__en( element__to_mem_raddr__en ),
    .to_mem_raddr__msg( element__to_mem_raddr__msg ),
    .to_mem_raddr__rdy( element__to_mem_raddr__rdy ),
    .to_mem_waddr__en( element__to_mem_waddr__en ),
    .to_mem_waddr__msg( element__to_mem_waddr__msg ),
    .to_mem_waddr__rdy( element__to_mem_waddr__rdy ),
    .to_mem_wdata__en( element__to_mem_wdata__en ),
    .to_mem_wdata__msg( element__to_mem_wdata__msg ),
    .to_mem_wdata__rdy( element__to_mem_wdata__rdy )
  );

  //-------------------------------------------------------------
  // End of component element
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component reg_predicate
  //-------------------------------------------------------------

  logic [0:0] reg_predicate__clk;
  logic [0:0] reg_predicate__reset;
  logic [0:0] reg_predicate__recv__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__recv__msg;
  logic [0:0] reg_predicate__recv__rdy;
  logic [0:0] reg_predicate__send__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__send__msg;
  logic [0:0] reg_predicate__send__rdy;

  RegisterRTL__e306da7100516ae4 reg_predicate
  (
    .clk( reg_predicate__clk ),
    .reset( reg_predicate__reset ),
    .recv__en( reg_predicate__recv__en ),
    .recv__msg( reg_predicate__recv__msg ),
    .recv__rdy( reg_predicate__recv__rdy ),
    .send__en( reg_predicate__send__en ),
    .send__msg( reg_predicate__send__msg ),
    .send__rdy( reg_predicate__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component reg_predicate
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py:112
  // @update
  // def update_opt():
  //   s.element.recv_opt.msg   @= s.ctrl_mem.send_ctrl.msg
  //   s.crossbar.recv_opt.msg  @= s.ctrl_mem.send_ctrl.msg
  //   s.element.recv_opt.en    @= s.ctrl_mem.send_ctrl.en
  //   s.crossbar.recv_opt.en   @= s.ctrl_mem.send_ctrl.en
  //   s.ctrl_mem.send_ctrl.rdy @= s.element.recv_opt.rdy & s.crossbar.recv_opt.rdy
  
  always_comb begin : update_opt
    element__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    crossbar__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    element__recv_opt__en = ctrl_mem__send_ctrl__en;
    crossbar__recv_opt__en = ctrl_mem__send_ctrl__en;
    ctrl_mem__send_ctrl__rdy = element__recv_opt__rdy & crossbar__recv_opt__rdy;
  end

  assign element__clk = clk;
  assign element__reset = reset;
  assign const_queue__clk = clk;
  assign const_queue__reset = reset;
  assign crossbar__clk = clk;
  assign crossbar__reset = reset;
  assign ctrl_mem__clk = clk;
  assign ctrl_mem__reset = reset;
  assign channel__clk[0] = clk;
  assign channel__reset[0] = reset;
  assign channel__clk[1] = clk;
  assign channel__reset[1] = reset;
  assign channel__clk[2] = clk;
  assign channel__reset[2] = reset;
  assign channel__clk[3] = clk;
  assign channel__reset[3] = reset;
  assign channel__clk[4] = clk;
  assign channel__reset[4] = reset;
  assign channel__clk[5] = clk;
  assign channel__reset[5] = reset;
  assign channel__clk[6] = clk;
  assign channel__reset[6] = reset;
  assign channel__clk[7] = clk;
  assign channel__reset[7] = reset;
  assign reg_predicate__clk = clk;
  assign reg_predicate__reset = reset;
  assign ctrl_mem__recv_waddr__en = recv_waddr__en;
  assign ctrl_mem__recv_waddr__msg = recv_waddr__msg;
  assign recv_waddr__rdy = ctrl_mem__recv_waddr__rdy;
  assign ctrl_mem__recv_ctrl__en = recv_wopt__en;
  assign ctrl_mem__recv_ctrl__msg = recv_wopt__msg;
  assign recv_wopt__rdy = ctrl_mem__recv_ctrl__rdy;
  assign element__recv_const__en = const_queue__send_const__en;
  assign element__recv_const__msg = const_queue__send_const__msg;
  assign const_queue__send_const__rdy = element__recv_const__rdy;
  assign element__to_mem_raddr__rdy[0] = 1'd0;
  assign element__from_mem_rdata__en[0] = 1'd0;
  assign element__from_mem_rdata__msg[0] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[0] = 1'd0;
  assign element__to_mem_wdata__rdy[0] = 1'd0;
  assign element__to_mem_raddr__rdy[1] = 1'd0;
  assign element__from_mem_rdata__en[1] = 1'd0;
  assign element__from_mem_rdata__msg[1] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[1] = 1'd0;
  assign element__to_mem_wdata__rdy[1] = 1'd0;
  assign element__to_mem_raddr__rdy[2] = 1'd0;
  assign element__from_mem_rdata__en[2] = 1'd0;
  assign element__from_mem_rdata__msg[2] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[2] = 1'd0;
  assign element__to_mem_wdata__rdy[2] = 1'd0;
  assign element__to_mem_raddr__rdy[3] = 1'd0;
  assign element__from_mem_rdata__en[3] = 1'd0;
  assign element__from_mem_rdata__msg[3] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[3] = 1'd0;
  assign element__to_mem_wdata__rdy[3] = 1'd0;
  assign element__to_mem_raddr__rdy[4] = 1'd0;
  assign element__from_mem_rdata__en[4] = 1'd0;
  assign element__from_mem_rdata__msg[4] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[4] = 1'd0;
  assign element__to_mem_wdata__rdy[4] = 1'd0;
  assign to_mem_raddr__en = element__to_mem_raddr__en[5];
  assign to_mem_raddr__msg = element__to_mem_raddr__msg[5];
  assign element__to_mem_raddr__rdy[5] = to_mem_raddr__rdy;
  assign element__from_mem_rdata__en[5] = from_mem_rdata__en;
  assign element__from_mem_rdata__msg[5] = from_mem_rdata__msg;
  assign from_mem_rdata__rdy = element__from_mem_rdata__rdy[5];
  assign to_mem_waddr__en = element__to_mem_waddr__en[5];
  assign to_mem_waddr__msg = element__to_mem_waddr__msg[5];
  assign element__to_mem_waddr__rdy[5] = to_mem_waddr__rdy;
  assign to_mem_wdata__en = element__to_mem_wdata__en[5];
  assign to_mem_wdata__msg = element__to_mem_wdata__msg[5];
  assign element__to_mem_wdata__rdy[5] = to_mem_wdata__rdy;
  assign crossbar__recv_data__en[0] = recv_data__en[0];
  assign crossbar__recv_data__msg[0] = recv_data__msg[0];
  assign recv_data__rdy[0] = crossbar__recv_data__rdy[0];
  assign crossbar__recv_data__en[1] = recv_data__en[1];
  assign crossbar__recv_data__msg[1] = recv_data__msg[1];
  assign recv_data__rdy[1] = crossbar__recv_data__rdy[1];
  assign crossbar__recv_data__en[2] = recv_data__en[2];
  assign crossbar__recv_data__msg[2] = recv_data__msg[2];
  assign recv_data__rdy[2] = crossbar__recv_data__rdy[2];
  assign crossbar__recv_data__en[3] = recv_data__en[3];
  assign crossbar__recv_data__msg[3] = recv_data__msg[3];
  assign recv_data__rdy[3] = crossbar__recv_data__rdy[3];
  assign channel__recv__en[0] = crossbar__send_data__en[0];
  assign channel__recv__msg[0] = crossbar__send_data__msg[0];
  assign crossbar__send_data__rdy[0] = channel__recv__rdy[0];
  assign channel__recv__en[1] = crossbar__send_data__en[1];
  assign channel__recv__msg[1] = crossbar__send_data__msg[1];
  assign crossbar__send_data__rdy[1] = channel__recv__rdy[1];
  assign channel__recv__en[2] = crossbar__send_data__en[2];
  assign channel__recv__msg[2] = crossbar__send_data__msg[2];
  assign crossbar__send_data__rdy[2] = channel__recv__rdy[2];
  assign channel__recv__en[3] = crossbar__send_data__en[3];
  assign channel__recv__msg[3] = crossbar__send_data__msg[3];
  assign crossbar__send_data__rdy[3] = channel__recv__rdy[3];
  assign channel__recv__en[4] = crossbar__send_data__en[4];
  assign channel__recv__msg[4] = crossbar__send_data__msg[4];
  assign crossbar__send_data__rdy[4] = channel__recv__rdy[4];
  assign channel__recv__en[5] = crossbar__send_data__en[5];
  assign channel__recv__msg[5] = crossbar__send_data__msg[5];
  assign crossbar__send_data__rdy[5] = channel__recv__rdy[5];
  assign channel__recv__en[6] = crossbar__send_data__en[6];
  assign channel__recv__msg[6] = crossbar__send_data__msg[6];
  assign crossbar__send_data__rdy[6] = channel__recv__rdy[6];
  assign channel__recv__en[7] = crossbar__send_data__en[7];
  assign channel__recv__msg[7] = crossbar__send_data__msg[7];
  assign crossbar__send_data__rdy[7] = channel__recv__rdy[7];
  assign reg_predicate__recv__en = crossbar__send_predicate__en;
  assign reg_predicate__recv__msg = crossbar__send_predicate__msg;
  assign crossbar__send_predicate__rdy = reg_predicate__recv__rdy;
  assign element__recv_predicate__en = reg_predicate__send__en;
  assign element__recv_predicate__msg = reg_predicate__send__msg;
  assign reg_predicate__send__rdy = element__recv_predicate__rdy;
  assign send_data__en[0] = channel__send__en[0];
  assign send_data__msg[0] = channel__send__msg[0];
  assign channel__send__rdy[0] = send_data__rdy[0];
  assign send_data__en[1] = channel__send__en[1];
  assign send_data__msg[1] = channel__send__msg[1];
  assign channel__send__rdy[1] = send_data__rdy[1];
  assign send_data__en[2] = channel__send__en[2];
  assign send_data__msg[2] = channel__send__msg[2];
  assign channel__send__rdy[2] = send_data__rdy[2];
  assign send_data__en[3] = channel__send__en[3];
  assign send_data__msg[3] = channel__send__msg[3];
  assign channel__send__rdy[3] = send_data__rdy[3];
  assign element__recv_in__en[0] = channel__send__en[4];
  assign element__recv_in__msg[0] = channel__send__msg[4];
  assign channel__send__rdy[4] = element__recv_in__rdy[0];
  assign element__recv_in_count[0] = channel__count[4];
  assign element__recv_in__en[1] = channel__send__en[5];
  assign element__recv_in__msg[1] = channel__send__msg[5];
  assign channel__send__rdy[5] = element__recv_in__rdy[1];
  assign element__recv_in_count[1] = channel__count[5];
  assign element__recv_in__en[2] = channel__send__en[6];
  assign element__recv_in__msg[2] = channel__send__msg[6];
  assign channel__send__rdy[6] = element__recv_in__rdy[2];
  assign element__recv_in_count[2] = channel__count[6];
  assign element__recv_in__en[3] = channel__send__en[7];
  assign element__recv_in__msg[3] = channel__send__msg[7];
  assign channel__send__rdy[7] = element__recv_in__rdy[3];
  assign element__recv_in_count[3] = channel__count[7];
  assign crossbar__recv_data__en[4] = element__send_out__en[0];
  assign crossbar__recv_data__msg[4] = element__send_out__msg[0];
  assign element__send_out__rdy[0] = crossbar__recv_data__rdy[4];
  assign crossbar__recv_data__en[5] = element__send_out__en[1];
  assign crossbar__recv_data__msg[5] = element__send_out__msg[1];
  assign element__send_out__rdy[1] = crossbar__recv_data__rdy[5];

endmodule


// PyMTL Component ConstQueueRTL Definition
// Full name: ConstQueueRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__const_list_[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0013),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py

module ConstQueueRTL__f910ad0ac2d956a4
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] send_const__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_const__msg  ,
  input logic [0:0] send_const__rdy  
);
  localparam logic [2:0] __const__num_const_at_update_raddr  = 3'd4;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue [0:4];
  logic [2:0] cur;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:41
  // @update
  // def load():
  //   s.send_const.msg @= s.const_queue[ s.cur ]
  
  always_comb begin : load
    send_const__msg = const_queue[cur];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:45
  // @update
  // def update_en():
  //   s.send_const.en @= s.send_const.rdy
  
  always_comb begin : update_en
    send_const__en = send_const__rdy;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:49
  // @update_ff
  // def update_raddr():
  //   # if s.send_const.rdy:
  //     if s.cur + AddrType( 1 )  >= AddrType( num_const ):
  //       s.cur <<= AddrType( 0 )
  //     else:
  //       s.cur <<= s.cur + AddrType( 1 )
  
  always_ff @(posedge clk) begin : update_raddr
    if ( ( cur + 3'd1 ) >= 3'd4 ) begin
      cur <= 3'd0;
    end
    else
      cur <= cur + 3'd1;
  end

  assign const_queue[0] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[1] = { 16'd19, 1'd1, 1'd0 };
  assign const_queue[2] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[3] = { 16'd0, 1'd1, 1'd0 };

endmodule


// PyMTL Component TileRTL Definition
// Full name: TileRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__ctrl_mem_size_4__data_mem_size_100__num_ctrl_4__total_steps_140__num_fu_inports_4__num_fu_outports_2__num_connect_inports_4__num_connect_outports_4__Fu_FlexibleFuRTL__FuList_[<class 'VectorCGRA.fu.single.PhiRTL.PhiRTL'>, <class 'VectorCGRA.fu.single.AdderRTL.AdderRTL'>, <class 'VectorCGRA.fu.single.CompRTL.CompRTL'>, <class 'VectorCGRA.fu.single.MulRTL.MulRTL'>, <class 'VectorCGRA.fu.single.BranchRTL.BranchRTL'>, <class 'VectorCGRA.fu.single.MemUnitRTL.MemUnitRTL'>]__const_list_[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0013),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py

module TileRTL__d56273f01cfaa191 #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_data__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_data__msg [0:3] ,
  output logic [0:0] recv_data__rdy [0:3] ,
  input logic [0:0] recv_waddr__en  ,
  input logic [1:0] recv_waddr__msg  ,
  output logic [0:0] recv_waddr__rdy  ,
  input logic [0:0] recv_wopt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_wopt__msg  ,
  output logic [0:0] recv_wopt__rdy  ,
  output logic [0:0] send_data__en [0:3] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_data__msg [0:3] ,
  input logic [0:0] send_data__rdy [0:3] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  //-------------------------------------------------------------
  // Component channel[0:7]
  //-------------------------------------------------------------

  logic [0:0] channel__clk [0:7];
  logic [1:0] channel__count [0:7];
  logic [0:0] channel__reset [0:7];
  logic [0:0] channel__recv__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__recv__msg [0:7];
  logic [0:0] channel__recv__rdy [0:7];
  logic [0:0] channel__send__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__send__msg [0:7];
  logic [0:0] channel__send__rdy [0:7];

  ChannelRTL__b3d10fbae4900e6b channel__0
  (
    .clk( channel__clk[0] ),
    .count( channel__count[0] ),
    .reset( channel__reset[0] ),
    .recv__en( channel__recv__en[0] ),
    .recv__msg( channel__recv__msg[0] ),
    .recv__rdy( channel__recv__rdy[0] ),
    .send__en( channel__send__en[0] ),
    .send__msg( channel__send__msg[0] ),
    .send__rdy( channel__send__rdy[0] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__1
  (
    .clk( channel__clk[1] ),
    .count( channel__count[1] ),
    .reset( channel__reset[1] ),
    .recv__en( channel__recv__en[1] ),
    .recv__msg( channel__recv__msg[1] ),
    .recv__rdy( channel__recv__rdy[1] ),
    .send__en( channel__send__en[1] ),
    .send__msg( channel__send__msg[1] ),
    .send__rdy( channel__send__rdy[1] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__2
  (
    .clk( channel__clk[2] ),
    .count( channel__count[2] ),
    .reset( channel__reset[2] ),
    .recv__en( channel__recv__en[2] ),
    .recv__msg( channel__recv__msg[2] ),
    .recv__rdy( channel__recv__rdy[2] ),
    .send__en( channel__send__en[2] ),
    .send__msg( channel__send__msg[2] ),
    .send__rdy( channel__send__rdy[2] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__3
  (
    .clk( channel__clk[3] ),
    .count( channel__count[3] ),
    .reset( channel__reset[3] ),
    .recv__en( channel__recv__en[3] ),
    .recv__msg( channel__recv__msg[3] ),
    .recv__rdy( channel__recv__rdy[3] ),
    .send__en( channel__send__en[3] ),
    .send__msg( channel__send__msg[3] ),
    .send__rdy( channel__send__rdy[3] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__4
  (
    .clk( channel__clk[4] ),
    .count( channel__count[4] ),
    .reset( channel__reset[4] ),
    .recv__en( channel__recv__en[4] ),
    .recv__msg( channel__recv__msg[4] ),
    .recv__rdy( channel__recv__rdy[4] ),
    .send__en( channel__send__en[4] ),
    .send__msg( channel__send__msg[4] ),
    .send__rdy( channel__send__rdy[4] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__5
  (
    .clk( channel__clk[5] ),
    .count( channel__count[5] ),
    .reset( channel__reset[5] ),
    .recv__en( channel__recv__en[5] ),
    .recv__msg( channel__recv__msg[5] ),
    .recv__rdy( channel__recv__rdy[5] ),
    .send__en( channel__send__en[5] ),
    .send__msg( channel__send__msg[5] ),
    .send__rdy( channel__send__rdy[5] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__6
  (
    .clk( channel__clk[6] ),
    .count( channel__count[6] ),
    .reset( channel__reset[6] ),
    .recv__en( channel__recv__en[6] ),
    .recv__msg( channel__recv__msg[6] ),
    .recv__rdy( channel__recv__rdy[6] ),
    .send__en( channel__send__en[6] ),
    .send__msg( channel__send__msg[6] ),
    .send__rdy( channel__send__rdy[6] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__7
  (
    .clk( channel__clk[7] ),
    .count( channel__count[7] ),
    .reset( channel__reset[7] ),
    .recv__en( channel__recv__en[7] ),
    .recv__msg( channel__recv__msg[7] ),
    .recv__rdy( channel__recv__rdy[7] ),
    .send__en( channel__send__en[7] ),
    .send__msg( channel__send__msg[7] ),
    .send__rdy( channel__send__rdy[7] )
  );

  //-------------------------------------------------------------
  // End of component channel[0:7]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component const_queue
  //-------------------------------------------------------------

  logic [0:0] const_queue__clk;
  logic [0:0] const_queue__reset;
  logic [0:0] const_queue__send_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue__send_const__msg;
  logic [0:0] const_queue__send_const__rdy;

  ConstQueueRTL__f910ad0ac2d956a4 const_queue
  (
    .clk( const_queue__clk ),
    .reset( const_queue__reset ),
    .send_const__en( const_queue__send_const__en ),
    .send_const__msg( const_queue__send_const__msg ),
    .send_const__rdy( const_queue__send_const__rdy )
  );

  //-------------------------------------------------------------
  // End of component const_queue
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component crossbar
  //-------------------------------------------------------------

  logic [0:0] crossbar__clk;
  logic [0:0] crossbar__reset;
  logic [0:0] crossbar__recv_data__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__recv_data__msg [0:5];
  logic [0:0] crossbar__recv_data__rdy [0:5];
  logic [0:0] crossbar__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc crossbar__recv_opt__msg;
  logic [0:0] crossbar__recv_opt__rdy;
  logic [0:0] crossbar__send_data__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__send_data__msg [0:7];
  logic [0:0] crossbar__send_data__rdy [0:7];
  logic [0:0] crossbar__send_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 crossbar__send_predicate__msg;
  logic [0:0] crossbar__send_predicate__rdy;

  CrossbarRTL__27570a81c91409e5 crossbar
  (
    .clk( crossbar__clk ),
    .reset( crossbar__reset ),
    .recv_data__en( crossbar__recv_data__en ),
    .recv_data__msg( crossbar__recv_data__msg ),
    .recv_data__rdy( crossbar__recv_data__rdy ),
    .recv_opt__en( crossbar__recv_opt__en ),
    .recv_opt__msg( crossbar__recv_opt__msg ),
    .recv_opt__rdy( crossbar__recv_opt__rdy ),
    .send_data__en( crossbar__send_data__en ),
    .send_data__msg( crossbar__send_data__msg ),
    .send_data__rdy( crossbar__send_data__rdy ),
    .send_predicate__en( crossbar__send_predicate__en ),
    .send_predicate__msg( crossbar__send_predicate__msg ),
    .send_predicate__rdy( crossbar__send_predicate__rdy )
  );

  //-------------------------------------------------------------
  // End of component crossbar
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ctrl_mem
  //-------------------------------------------------------------

  logic [0:0] ctrl_mem__clk;
  logic [0:0] ctrl_mem__reset;
  logic [0:0] ctrl_mem__recv_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__recv_ctrl__msg;
  logic [0:0] ctrl_mem__recv_ctrl__rdy;
  logic [0:0] ctrl_mem__recv_waddr__en;
  logic [1:0] ctrl_mem__recv_waddr__msg;
  logic [0:0] ctrl_mem__recv_waddr__rdy;
  logic [0:0] ctrl_mem__send_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__send_ctrl__msg;
  logic [0:0] ctrl_mem__send_ctrl__rdy;

  CtrlMemRTL__42b68a36bf462733 ctrl_mem
  (
    .clk( ctrl_mem__clk ),
    .reset( ctrl_mem__reset ),
    .recv_ctrl__en( ctrl_mem__recv_ctrl__en ),
    .recv_ctrl__msg( ctrl_mem__recv_ctrl__msg ),
    .recv_ctrl__rdy( ctrl_mem__recv_ctrl__rdy ),
    .recv_waddr__en( ctrl_mem__recv_waddr__en ),
    .recv_waddr__msg( ctrl_mem__recv_waddr__msg ),
    .recv_waddr__rdy( ctrl_mem__recv_waddr__rdy ),
    .send_ctrl__en( ctrl_mem__send_ctrl__en ),
    .send_ctrl__msg( ctrl_mem__send_ctrl__msg ),
    .send_ctrl__rdy( ctrl_mem__send_ctrl__rdy )
  );

  //-------------------------------------------------------------
  // End of component ctrl_mem
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component element
  //-------------------------------------------------------------

  logic [0:0] element__clk;
  logic [1:0] element__recv_in_count [0:3];
  logic [0:0] element__reset;
  logic [0:0] element__from_mem_rdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__from_mem_rdata__msg [0:5];
  logic [0:0] element__from_mem_rdata__rdy [0:5];
  logic [0:0] element__recv_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_const__msg;
  logic [0:0] element__recv_const__rdy;
  logic [0:0] element__recv_in__en [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_in__msg [0:3];
  logic [0:0] element__recv_in__rdy [0:3];
  logic [0:0] element__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc element__recv_opt__msg;
  logic [0:0] element__recv_opt__rdy;
  logic [0:0] element__recv_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 element__recv_predicate__msg;
  logic [0:0] element__recv_predicate__rdy;
  logic [0:0] element__send_out__en [0:1];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__send_out__msg [0:1];
  logic [0:0] element__send_out__rdy [0:1];
  logic [0:0] element__to_mem_raddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_raddr__msg [0:5];
  logic [0:0] element__to_mem_raddr__rdy [0:5];
  logic [0:0] element__to_mem_waddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_waddr__msg [0:5];
  logic [0:0] element__to_mem_waddr__rdy [0:5];
  logic [0:0] element__to_mem_wdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__to_mem_wdata__msg [0:5];
  logic [0:0] element__to_mem_wdata__rdy [0:5];

  FlexibleFuRTL__91aabf4745f968b9 element
  (
    .clk( element__clk ),
    .recv_in_count( element__recv_in_count ),
    .reset( element__reset ),
    .from_mem_rdata__en( element__from_mem_rdata__en ),
    .from_mem_rdata__msg( element__from_mem_rdata__msg ),
    .from_mem_rdata__rdy( element__from_mem_rdata__rdy ),
    .recv_const__en( element__recv_const__en ),
    .recv_const__msg( element__recv_const__msg ),
    .recv_const__rdy( element__recv_const__rdy ),
    .recv_in__en( element__recv_in__en ),
    .recv_in__msg( element__recv_in__msg ),
    .recv_in__rdy( element__recv_in__rdy ),
    .recv_opt__en( element__recv_opt__en ),
    .recv_opt__msg( element__recv_opt__msg ),
    .recv_opt__rdy( element__recv_opt__rdy ),
    .recv_predicate__en( element__recv_predicate__en ),
    .recv_predicate__msg( element__recv_predicate__msg ),
    .recv_predicate__rdy( element__recv_predicate__rdy ),
    .send_out__en( element__send_out__en ),
    .send_out__msg( element__send_out__msg ),
    .send_out__rdy( element__send_out__rdy ),
    .to_mem_raddr__en( element__to_mem_raddr__en ),
    .to_mem_raddr__msg( element__to_mem_raddr__msg ),
    .to_mem_raddr__rdy( element__to_mem_raddr__rdy ),
    .to_mem_waddr__en( element__to_mem_waddr__en ),
    .to_mem_waddr__msg( element__to_mem_waddr__msg ),
    .to_mem_waddr__rdy( element__to_mem_waddr__rdy ),
    .to_mem_wdata__en( element__to_mem_wdata__en ),
    .to_mem_wdata__msg( element__to_mem_wdata__msg ),
    .to_mem_wdata__rdy( element__to_mem_wdata__rdy )
  );

  //-------------------------------------------------------------
  // End of component element
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component reg_predicate
  //-------------------------------------------------------------

  logic [0:0] reg_predicate__clk;
  logic [0:0] reg_predicate__reset;
  logic [0:0] reg_predicate__recv__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__recv__msg;
  logic [0:0] reg_predicate__recv__rdy;
  logic [0:0] reg_predicate__send__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__send__msg;
  logic [0:0] reg_predicate__send__rdy;

  RegisterRTL__e306da7100516ae4 reg_predicate
  (
    .clk( reg_predicate__clk ),
    .reset( reg_predicate__reset ),
    .recv__en( reg_predicate__recv__en ),
    .recv__msg( reg_predicate__recv__msg ),
    .recv__rdy( reg_predicate__recv__rdy ),
    .send__en( reg_predicate__send__en ),
    .send__msg( reg_predicate__send__msg ),
    .send__rdy( reg_predicate__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component reg_predicate
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py:112
  // @update
  // def update_opt():
  //   s.element.recv_opt.msg   @= s.ctrl_mem.send_ctrl.msg
  //   s.crossbar.recv_opt.msg  @= s.ctrl_mem.send_ctrl.msg
  //   s.element.recv_opt.en    @= s.ctrl_mem.send_ctrl.en
  //   s.crossbar.recv_opt.en   @= s.ctrl_mem.send_ctrl.en
  //   s.ctrl_mem.send_ctrl.rdy @= s.element.recv_opt.rdy & s.crossbar.recv_opt.rdy
  
  always_comb begin : update_opt
    element__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    crossbar__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    element__recv_opt__en = ctrl_mem__send_ctrl__en;
    crossbar__recv_opt__en = ctrl_mem__send_ctrl__en;
    ctrl_mem__send_ctrl__rdy = element__recv_opt__rdy & crossbar__recv_opt__rdy;
  end

  assign element__clk = clk;
  assign element__reset = reset;
  assign const_queue__clk = clk;
  assign const_queue__reset = reset;
  assign crossbar__clk = clk;
  assign crossbar__reset = reset;
  assign ctrl_mem__clk = clk;
  assign ctrl_mem__reset = reset;
  assign channel__clk[0] = clk;
  assign channel__reset[0] = reset;
  assign channel__clk[1] = clk;
  assign channel__reset[1] = reset;
  assign channel__clk[2] = clk;
  assign channel__reset[2] = reset;
  assign channel__clk[3] = clk;
  assign channel__reset[3] = reset;
  assign channel__clk[4] = clk;
  assign channel__reset[4] = reset;
  assign channel__clk[5] = clk;
  assign channel__reset[5] = reset;
  assign channel__clk[6] = clk;
  assign channel__reset[6] = reset;
  assign channel__clk[7] = clk;
  assign channel__reset[7] = reset;
  assign reg_predicate__clk = clk;
  assign reg_predicate__reset = reset;
  assign ctrl_mem__recv_waddr__en = recv_waddr__en;
  assign ctrl_mem__recv_waddr__msg = recv_waddr__msg;
  assign recv_waddr__rdy = ctrl_mem__recv_waddr__rdy;
  assign ctrl_mem__recv_ctrl__en = recv_wopt__en;
  assign ctrl_mem__recv_ctrl__msg = recv_wopt__msg;
  assign recv_wopt__rdy = ctrl_mem__recv_ctrl__rdy;
  assign element__recv_const__en = const_queue__send_const__en;
  assign element__recv_const__msg = const_queue__send_const__msg;
  assign const_queue__send_const__rdy = element__recv_const__rdy;
  assign element__to_mem_raddr__rdy[0] = 1'd0;
  assign element__from_mem_rdata__en[0] = 1'd0;
  assign element__from_mem_rdata__msg[0] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[0] = 1'd0;
  assign element__to_mem_wdata__rdy[0] = 1'd0;
  assign element__to_mem_raddr__rdy[1] = 1'd0;
  assign element__from_mem_rdata__en[1] = 1'd0;
  assign element__from_mem_rdata__msg[1] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[1] = 1'd0;
  assign element__to_mem_wdata__rdy[1] = 1'd0;
  assign element__to_mem_raddr__rdy[2] = 1'd0;
  assign element__from_mem_rdata__en[2] = 1'd0;
  assign element__from_mem_rdata__msg[2] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[2] = 1'd0;
  assign element__to_mem_wdata__rdy[2] = 1'd0;
  assign element__to_mem_raddr__rdy[3] = 1'd0;
  assign element__from_mem_rdata__en[3] = 1'd0;
  assign element__from_mem_rdata__msg[3] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[3] = 1'd0;
  assign element__to_mem_wdata__rdy[3] = 1'd0;
  assign element__to_mem_raddr__rdy[4] = 1'd0;
  assign element__from_mem_rdata__en[4] = 1'd0;
  assign element__from_mem_rdata__msg[4] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[4] = 1'd0;
  assign element__to_mem_wdata__rdy[4] = 1'd0;
  assign to_mem_raddr__en = element__to_mem_raddr__en[5];
  assign to_mem_raddr__msg = element__to_mem_raddr__msg[5];
  assign element__to_mem_raddr__rdy[5] = to_mem_raddr__rdy;
  assign element__from_mem_rdata__en[5] = from_mem_rdata__en;
  assign element__from_mem_rdata__msg[5] = from_mem_rdata__msg;
  assign from_mem_rdata__rdy = element__from_mem_rdata__rdy[5];
  assign to_mem_waddr__en = element__to_mem_waddr__en[5];
  assign to_mem_waddr__msg = element__to_mem_waddr__msg[5];
  assign element__to_mem_waddr__rdy[5] = to_mem_waddr__rdy;
  assign to_mem_wdata__en = element__to_mem_wdata__en[5];
  assign to_mem_wdata__msg = element__to_mem_wdata__msg[5];
  assign element__to_mem_wdata__rdy[5] = to_mem_wdata__rdy;
  assign crossbar__recv_data__en[0] = recv_data__en[0];
  assign crossbar__recv_data__msg[0] = recv_data__msg[0];
  assign recv_data__rdy[0] = crossbar__recv_data__rdy[0];
  assign crossbar__recv_data__en[1] = recv_data__en[1];
  assign crossbar__recv_data__msg[1] = recv_data__msg[1];
  assign recv_data__rdy[1] = crossbar__recv_data__rdy[1];
  assign crossbar__recv_data__en[2] = recv_data__en[2];
  assign crossbar__recv_data__msg[2] = recv_data__msg[2];
  assign recv_data__rdy[2] = crossbar__recv_data__rdy[2];
  assign crossbar__recv_data__en[3] = recv_data__en[3];
  assign crossbar__recv_data__msg[3] = recv_data__msg[3];
  assign recv_data__rdy[3] = crossbar__recv_data__rdy[3];
  assign channel__recv__en[0] = crossbar__send_data__en[0];
  assign channel__recv__msg[0] = crossbar__send_data__msg[0];
  assign crossbar__send_data__rdy[0] = channel__recv__rdy[0];
  assign channel__recv__en[1] = crossbar__send_data__en[1];
  assign channel__recv__msg[1] = crossbar__send_data__msg[1];
  assign crossbar__send_data__rdy[1] = channel__recv__rdy[1];
  assign channel__recv__en[2] = crossbar__send_data__en[2];
  assign channel__recv__msg[2] = crossbar__send_data__msg[2];
  assign crossbar__send_data__rdy[2] = channel__recv__rdy[2];
  assign channel__recv__en[3] = crossbar__send_data__en[3];
  assign channel__recv__msg[3] = crossbar__send_data__msg[3];
  assign crossbar__send_data__rdy[3] = channel__recv__rdy[3];
  assign channel__recv__en[4] = crossbar__send_data__en[4];
  assign channel__recv__msg[4] = crossbar__send_data__msg[4];
  assign crossbar__send_data__rdy[4] = channel__recv__rdy[4];
  assign channel__recv__en[5] = crossbar__send_data__en[5];
  assign channel__recv__msg[5] = crossbar__send_data__msg[5];
  assign crossbar__send_data__rdy[5] = channel__recv__rdy[5];
  assign channel__recv__en[6] = crossbar__send_data__en[6];
  assign channel__recv__msg[6] = crossbar__send_data__msg[6];
  assign crossbar__send_data__rdy[6] = channel__recv__rdy[6];
  assign channel__recv__en[7] = crossbar__send_data__en[7];
  assign channel__recv__msg[7] = crossbar__send_data__msg[7];
  assign crossbar__send_data__rdy[7] = channel__recv__rdy[7];
  assign reg_predicate__recv__en = crossbar__send_predicate__en;
  assign reg_predicate__recv__msg = crossbar__send_predicate__msg;
  assign crossbar__send_predicate__rdy = reg_predicate__recv__rdy;
  assign element__recv_predicate__en = reg_predicate__send__en;
  assign element__recv_predicate__msg = reg_predicate__send__msg;
  assign reg_predicate__send__rdy = element__recv_predicate__rdy;
  assign send_data__en[0] = channel__send__en[0];
  assign send_data__msg[0] = channel__send__msg[0];
  assign channel__send__rdy[0] = send_data__rdy[0];
  assign send_data__en[1] = channel__send__en[1];
  assign send_data__msg[1] = channel__send__msg[1];
  assign channel__send__rdy[1] = send_data__rdy[1];
  assign send_data__en[2] = channel__send__en[2];
  assign send_data__msg[2] = channel__send__msg[2];
  assign channel__send__rdy[2] = send_data__rdy[2];
  assign send_data__en[3] = channel__send__en[3];
  assign send_data__msg[3] = channel__send__msg[3];
  assign channel__send__rdy[3] = send_data__rdy[3];
  assign element__recv_in__en[0] = channel__send__en[4];
  assign element__recv_in__msg[0] = channel__send__msg[4];
  assign channel__send__rdy[4] = element__recv_in__rdy[0];
  assign element__recv_in_count[0] = channel__count[4];
  assign element__recv_in__en[1] = channel__send__en[5];
  assign element__recv_in__msg[1] = channel__send__msg[5];
  assign channel__send__rdy[5] = element__recv_in__rdy[1];
  assign element__recv_in_count[1] = channel__count[5];
  assign element__recv_in__en[2] = channel__send__en[6];
  assign element__recv_in__msg[2] = channel__send__msg[6];
  assign channel__send__rdy[6] = element__recv_in__rdy[2];
  assign element__recv_in_count[2] = channel__count[6];
  assign element__recv_in__en[3] = channel__send__en[7];
  assign element__recv_in__msg[3] = channel__send__msg[7];
  assign channel__send__rdy[7] = element__recv_in__rdy[3];
  assign element__recv_in_count[3] = channel__count[7];
  assign crossbar__recv_data__en[4] = element__send_out__en[0];
  assign crossbar__recv_data__msg[4] = element__send_out__msg[0];
  assign element__send_out__rdy[0] = crossbar__recv_data__rdy[4];
  assign crossbar__recv_data__en[5] = element__send_out__en[1];
  assign crossbar__recv_data__msg[5] = element__send_out__msg[1];
  assign element__send_out__rdy[1] = crossbar__recv_data__rdy[5];

endmodule


// PyMTL Component ConstQueueRTL Definition
// Full name: ConstQueueRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__const_list_[CGRAData_16_1_1(Bits16(0x0001),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py

module ConstQueueRTL__b83016ec7fe57004
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  output logic [0:0] send_const__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_const__msg  ,
  input logic [0:0] send_const__rdy  
);
  localparam logic [2:0] __const__num_const_at_update_raddr  = 3'd4;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue [0:4];
  logic [2:0] cur;

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:41
  // @update
  // def load():
  //   s.send_const.msg @= s.const_queue[ s.cur ]
  
  always_comb begin : load
    send_const__msg = const_queue[cur];
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:45
  // @update
  // def update_en():
  //   s.send_const.en @= s.send_const.rdy
  
  always_comb begin : update_en
    send_const__en = send_const__rdy;
  end

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/mem/const/ConstQueueRTL.py:49
  // @update_ff
  // def update_raddr():
  //   # if s.send_const.rdy:
  //     if s.cur + AddrType( 1 )  >= AddrType( num_const ):
  //       s.cur <<= AddrType( 0 )
  //     else:
  //       s.cur <<= s.cur + AddrType( 1 )
  
  always_ff @(posedge clk) begin : update_raddr
    if ( ( cur + 3'd1 ) >= 3'd4 ) begin
      cur <= 3'd0;
    end
    else
      cur <= cur + 3'd1;
  end

  assign const_queue[0] = { 16'd1, 1'd1, 1'd0 };
  assign const_queue[1] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[2] = { 16'd0, 1'd1, 1'd0 };
  assign const_queue[3] = { 16'd0, 1'd1, 1'd0 };

endmodule


// PyMTL Component TileRTL Definition
// Full name: TileRTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__ctrl_mem_size_4__data_mem_size_100__num_ctrl_4__total_steps_140__num_fu_inports_4__num_fu_outports_2__num_connect_inports_4__num_connect_outports_4__Fu_FlexibleFuRTL__FuList_[<class 'VectorCGRA.fu.single.PhiRTL.PhiRTL'>, <class 'VectorCGRA.fu.single.AdderRTL.AdderRTL'>, <class 'VectorCGRA.fu.single.CompRTL.CompRTL'>, <class 'VectorCGRA.fu.single.MulRTL.MulRTL'>, <class 'VectorCGRA.fu.single.BranchRTL.BranchRTL'>, <class 'VectorCGRA.fu.single.MemUnitRTL.MemUnitRTL'>]__const_list_[CGRAData_16_1_1(Bits16(0x0001),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py

module TileRTL__f2822cdaf2b80d8f#(
parameter int unsigned TCDMAddrWidth = 6
)(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] from_mem_rdata__en  ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 from_mem_rdata__msg  ,
  output logic [0:0] from_mem_rdata__rdy  ,
  input logic [0:0] recv_data__en [0:3] ,
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 recv_data__msg [0:3] ,
  output logic [0:0] recv_data__rdy [0:3] ,
  input logic [0:0] recv_waddr__en  ,
  input logic [1:0] recv_waddr__msg  ,
  output logic [0:0] recv_waddr__rdy  ,
  input logic [0:0] recv_wopt__en  ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_wopt__msg  ,
  output logic [0:0] recv_wopt__rdy  ,
  output logic [0:0] send_data__en [0:3] ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 send_data__msg [0:3] ,
  input logic [0:0] send_data__rdy [0:3] ,
  output logic [0:0] to_mem_raddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_raddr__msg  ,
  input logic [0:0] to_mem_raddr__rdy  ,
  output logic [0:0] to_mem_waddr__en  ,
  output logic [TCDMAddrWidth-1:0] to_mem_waddr__msg  ,
  input logic [0:0] to_mem_waddr__rdy  ,
  output logic [0:0] to_mem_wdata__en  ,
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 to_mem_wdata__msg  ,
  input logic [0:0] to_mem_wdata__rdy  
);
  //-------------------------------------------------------------
  // Component channel[0:7]
  //-------------------------------------------------------------

  logic [0:0] channel__clk [0:7];
  logic [1:0] channel__count [0:7];
  logic [0:0] channel__reset [0:7];
  logic [0:0] channel__recv__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__recv__msg [0:7];
  logic [0:0] channel__recv__rdy [0:7];
  logic [0:0] channel__send__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 channel__send__msg [0:7];
  logic [0:0] channel__send__rdy [0:7];

  ChannelRTL__b3d10fbae4900e6b channel__0
  (
    .clk( channel__clk[0] ),
    .count( channel__count[0] ),
    .reset( channel__reset[0] ),
    .recv__en( channel__recv__en[0] ),
    .recv__msg( channel__recv__msg[0] ),
    .recv__rdy( channel__recv__rdy[0] ),
    .send__en( channel__send__en[0] ),
    .send__msg( channel__send__msg[0] ),
    .send__rdy( channel__send__rdy[0] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__1
  (
    .clk( channel__clk[1] ),
    .count( channel__count[1] ),
    .reset( channel__reset[1] ),
    .recv__en( channel__recv__en[1] ),
    .recv__msg( channel__recv__msg[1] ),
    .recv__rdy( channel__recv__rdy[1] ),
    .send__en( channel__send__en[1] ),
    .send__msg( channel__send__msg[1] ),
    .send__rdy( channel__send__rdy[1] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__2
  (
    .clk( channel__clk[2] ),
    .count( channel__count[2] ),
    .reset( channel__reset[2] ),
    .recv__en( channel__recv__en[2] ),
    .recv__msg( channel__recv__msg[2] ),
    .recv__rdy( channel__recv__rdy[2] ),
    .send__en( channel__send__en[2] ),
    .send__msg( channel__send__msg[2] ),
    .send__rdy( channel__send__rdy[2] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__3
  (
    .clk( channel__clk[3] ),
    .count( channel__count[3] ),
    .reset( channel__reset[3] ),
    .recv__en( channel__recv__en[3] ),
    .recv__msg( channel__recv__msg[3] ),
    .recv__rdy( channel__recv__rdy[3] ),
    .send__en( channel__send__en[3] ),
    .send__msg( channel__send__msg[3] ),
    .send__rdy( channel__send__rdy[3] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__4
  (
    .clk( channel__clk[4] ),
    .count( channel__count[4] ),
    .reset( channel__reset[4] ),
    .recv__en( channel__recv__en[4] ),
    .recv__msg( channel__recv__msg[4] ),
    .recv__rdy( channel__recv__rdy[4] ),
    .send__en( channel__send__en[4] ),
    .send__msg( channel__send__msg[4] ),
    .send__rdy( channel__send__rdy[4] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__5
  (
    .clk( channel__clk[5] ),
    .count( channel__count[5] ),
    .reset( channel__reset[5] ),
    .recv__en( channel__recv__en[5] ),
    .recv__msg( channel__recv__msg[5] ),
    .recv__rdy( channel__recv__rdy[5] ),
    .send__en( channel__send__en[5] ),
    .send__msg( channel__send__msg[5] ),
    .send__rdy( channel__send__rdy[5] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__6
  (
    .clk( channel__clk[6] ),
    .count( channel__count[6] ),
    .reset( channel__reset[6] ),
    .recv__en( channel__recv__en[6] ),
    .recv__msg( channel__recv__msg[6] ),
    .recv__rdy( channel__recv__rdy[6] ),
    .send__en( channel__send__en[6] ),
    .send__msg( channel__send__msg[6] ),
    .send__rdy( channel__send__rdy[6] )
  );

  ChannelRTL__b3d10fbae4900e6b channel__7
  (
    .clk( channel__clk[7] ),
    .count( channel__count[7] ),
    .reset( channel__reset[7] ),
    .recv__en( channel__recv__en[7] ),
    .recv__msg( channel__recv__msg[7] ),
    .recv__rdy( channel__recv__rdy[7] ),
    .send__en( channel__send__en[7] ),
    .send__msg( channel__send__msg[7] ),
    .send__rdy( channel__send__rdy[7] )
  );

  //-------------------------------------------------------------
  // End of component channel[0:7]
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component const_queue
  //-------------------------------------------------------------

  logic [0:0] const_queue__clk;
  logic [0:0] const_queue__reset;
  logic [0:0] const_queue__send_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 const_queue__send_const__msg;
  logic [0:0] const_queue__send_const__rdy;

  ConstQueueRTL__b83016ec7fe57004 const_queue
  (
    .clk( const_queue__clk ),
    .reset( const_queue__reset ),
    .send_const__en( const_queue__send_const__en ),
    .send_const__msg( const_queue__send_const__msg ),
    .send_const__rdy( const_queue__send_const__rdy )
  );

  //-------------------------------------------------------------
  // End of component const_queue
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component crossbar
  //-------------------------------------------------------------

  logic [0:0] crossbar__clk;
  logic [0:0] crossbar__reset;
  logic [0:0] crossbar__recv_data__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__recv_data__msg [0:5];
  logic [0:0] crossbar__recv_data__rdy [0:5];
  logic [0:0] crossbar__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc crossbar__recv_opt__msg;
  logic [0:0] crossbar__recv_opt__rdy;
  logic [0:0] crossbar__send_data__en [0:7];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 crossbar__send_data__msg [0:7];
  logic [0:0] crossbar__send_data__rdy [0:7];
  logic [0:0] crossbar__send_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 crossbar__send_predicate__msg;
  logic [0:0] crossbar__send_predicate__rdy;

  CrossbarRTL__27570a81c91409e5 crossbar
  (
    .clk( crossbar__clk ),
    .reset( crossbar__reset ),
    .recv_data__en( crossbar__recv_data__en ),
    .recv_data__msg( crossbar__recv_data__msg ),
    .recv_data__rdy( crossbar__recv_data__rdy ),
    .recv_opt__en( crossbar__recv_opt__en ),
    .recv_opt__msg( crossbar__recv_opt__msg ),
    .recv_opt__rdy( crossbar__recv_opt__rdy ),
    .send_data__en( crossbar__send_data__en ),
    .send_data__msg( crossbar__send_data__msg ),
    .send_data__rdy( crossbar__send_data__rdy ),
    .send_predicate__en( crossbar__send_predicate__en ),
    .send_predicate__msg( crossbar__send_predicate__msg ),
    .send_predicate__rdy( crossbar__send_predicate__rdy )
  );

  //-------------------------------------------------------------
  // End of component crossbar
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ctrl_mem
  //-------------------------------------------------------------

  logic [0:0] ctrl_mem__clk;
  logic [0:0] ctrl_mem__reset;
  logic [0:0] ctrl_mem__recv_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__recv_ctrl__msg;
  logic [0:0] ctrl_mem__recv_ctrl__rdy;
  logic [0:0] ctrl_mem__recv_waddr__en;
  logic [1:0] ctrl_mem__recv_waddr__msg;
  logic [0:0] ctrl_mem__recv_waddr__rdy;
  logic [0:0] ctrl_mem__send_ctrl__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc ctrl_mem__send_ctrl__msg;
  logic [0:0] ctrl_mem__send_ctrl__rdy;

  CtrlMemRTL__42b68a36bf462733 ctrl_mem
  (
    .clk( ctrl_mem__clk ),
    .reset( ctrl_mem__reset ),
    .recv_ctrl__en( ctrl_mem__recv_ctrl__en ),
    .recv_ctrl__msg( ctrl_mem__recv_ctrl__msg ),
    .recv_ctrl__rdy( ctrl_mem__recv_ctrl__rdy ),
    .recv_waddr__en( ctrl_mem__recv_waddr__en ),
    .recv_waddr__msg( ctrl_mem__recv_waddr__msg ),
    .recv_waddr__rdy( ctrl_mem__recv_waddr__rdy ),
    .send_ctrl__en( ctrl_mem__send_ctrl__en ),
    .send_ctrl__msg( ctrl_mem__send_ctrl__msg ),
    .send_ctrl__rdy( ctrl_mem__send_ctrl__rdy )
  );

  //-------------------------------------------------------------
  // End of component ctrl_mem
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component element
  //-------------------------------------------------------------

  logic [0:0] element__clk;
  logic [1:0] element__recv_in_count [0:3];
  logic [0:0] element__reset;
  logic [0:0] element__from_mem_rdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__from_mem_rdata__msg [0:5];
  logic [0:0] element__from_mem_rdata__rdy [0:5];
  logic [0:0] element__recv_const__en;
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_const__msg;
  logic [0:0] element__recv_const__rdy;
  logic [0:0] element__recv_in__en [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__recv_in__msg [0:3];
  logic [0:0] element__recv_in__rdy [0:3];
  logic [0:0] element__recv_opt__en;
  CGRAConfig_6_4_6_8__764c37c5066f1efc element__recv_opt__msg;
  logic [0:0] element__recv_opt__rdy;
  logic [0:0] element__recv_predicate__en;
  CGRAData_1_1__payload_1__predicate_1 element__recv_predicate__msg;
  logic [0:0] element__recv_predicate__rdy;
  logic [0:0] element__send_out__en [0:1];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__send_out__msg [0:1];
  logic [0:0] element__send_out__rdy [0:1];
  logic [0:0] element__to_mem_raddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_raddr__msg [0:5];
  logic [0:0] element__to_mem_raddr__rdy [0:5];
  logic [0:0] element__to_mem_waddr__en [0:5];
  logic [TCDMAddrWidth-1:0] element__to_mem_waddr__msg [0:5];
  logic [0:0] element__to_mem_waddr__rdy [0:5];
  logic [0:0] element__to_mem_wdata__en [0:5];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 element__to_mem_wdata__msg [0:5];
  logic [0:0] element__to_mem_wdata__rdy [0:5];

  FlexibleFuRTL__91aabf4745f968b9 element
  (
    .clk( element__clk ),
    .recv_in_count( element__recv_in_count ),
    .reset( element__reset ),
    .from_mem_rdata__en( element__from_mem_rdata__en ),
    .from_mem_rdata__msg( element__from_mem_rdata__msg ),
    .from_mem_rdata__rdy( element__from_mem_rdata__rdy ),
    .recv_const__en( element__recv_const__en ),
    .recv_const__msg( element__recv_const__msg ),
    .recv_const__rdy( element__recv_const__rdy ),
    .recv_in__en( element__recv_in__en ),
    .recv_in__msg( element__recv_in__msg ),
    .recv_in__rdy( element__recv_in__rdy ),
    .recv_opt__en( element__recv_opt__en ),
    .recv_opt__msg( element__recv_opt__msg ),
    .recv_opt__rdy( element__recv_opt__rdy ),
    .recv_predicate__en( element__recv_predicate__en ),
    .recv_predicate__msg( element__recv_predicate__msg ),
    .recv_predicate__rdy( element__recv_predicate__rdy ),
    .send_out__en( element__send_out__en ),
    .send_out__msg( element__send_out__msg ),
    .send_out__rdy( element__send_out__rdy ),
    .to_mem_raddr__en( element__to_mem_raddr__en ),
    .to_mem_raddr__msg( element__to_mem_raddr__msg ),
    .to_mem_raddr__rdy( element__to_mem_raddr__rdy ),
    .to_mem_waddr__en( element__to_mem_waddr__en ),
    .to_mem_waddr__msg( element__to_mem_waddr__msg ),
    .to_mem_waddr__rdy( element__to_mem_waddr__rdy ),
    .to_mem_wdata__en( element__to_mem_wdata__en ),
    .to_mem_wdata__msg( element__to_mem_wdata__msg ),
    .to_mem_wdata__rdy( element__to_mem_wdata__rdy )
  );

  //-------------------------------------------------------------
  // End of component element
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component reg_predicate
  //-------------------------------------------------------------

  logic [0:0] reg_predicate__clk;
  logic [0:0] reg_predicate__reset;
  logic [0:0] reg_predicate__recv__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__recv__msg;
  logic [0:0] reg_predicate__recv__rdy;
  logic [0:0] reg_predicate__send__en;
  CGRAData_1_1__payload_1__predicate_1 reg_predicate__send__msg;
  logic [0:0] reg_predicate__send__rdy;

  RegisterRTL__e306da7100516ae4 reg_predicate
  (
    .clk( reg_predicate__clk ),
    .reset( reg_predicate__reset ),
    .recv__en( reg_predicate__recv__en ),
    .recv__msg( reg_predicate__recv__msg ),
    .recv__rdy( reg_predicate__recv__rdy ),
    .send__en( reg_predicate__send__en ),
    .send__msg( reg_predicate__send__msg ),
    .send__rdy( reg_predicate__send__rdy )
  );

  //-------------------------------------------------------------
  // End of component reg_predicate
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/lab-cgra/OpenCGRA/VectorCGRA/tile/TileRTL.py:112
  // @update
  // def update_opt():
  //   s.element.recv_opt.msg   @= s.ctrl_mem.send_ctrl.msg
  //   s.crossbar.recv_opt.msg  @= s.ctrl_mem.send_ctrl.msg
  //   s.element.recv_opt.en    @= s.ctrl_mem.send_ctrl.en
  //   s.crossbar.recv_opt.en   @= s.ctrl_mem.send_ctrl.en
  //   s.ctrl_mem.send_ctrl.rdy @= s.element.recv_opt.rdy & s.crossbar.recv_opt.rdy
  
  always_comb begin : update_opt
    element__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    crossbar__recv_opt__msg = ctrl_mem__send_ctrl__msg;
    element__recv_opt__en = ctrl_mem__send_ctrl__en;
    crossbar__recv_opt__en = ctrl_mem__send_ctrl__en;
    ctrl_mem__send_ctrl__rdy = element__recv_opt__rdy & crossbar__recv_opt__rdy;
  end

  assign element__clk = clk;
  assign element__reset = reset;
  assign const_queue__clk = clk;
  assign const_queue__reset = reset;
  assign crossbar__clk = clk;
  assign crossbar__reset = reset;
  assign ctrl_mem__clk = clk;
  assign ctrl_mem__reset = reset;
  assign channel__clk[0] = clk;
  assign channel__reset[0] = reset;
  assign channel__clk[1] = clk;
  assign channel__reset[1] = reset;
  assign channel__clk[2] = clk;
  assign channel__reset[2] = reset;
  assign channel__clk[3] = clk;
  assign channel__reset[3] = reset;
  assign channel__clk[4] = clk;
  assign channel__reset[4] = reset;
  assign channel__clk[5] = clk;
  assign channel__reset[5] = reset;
  assign channel__clk[6] = clk;
  assign channel__reset[6] = reset;
  assign channel__clk[7] = clk;
  assign channel__reset[7] = reset;
  assign reg_predicate__clk = clk;
  assign reg_predicate__reset = reset;
  assign ctrl_mem__recv_waddr__en = recv_waddr__en;
  assign ctrl_mem__recv_waddr__msg = recv_waddr__msg;
  assign recv_waddr__rdy = ctrl_mem__recv_waddr__rdy;
  assign ctrl_mem__recv_ctrl__en = recv_wopt__en;
  assign ctrl_mem__recv_ctrl__msg = recv_wopt__msg;
  assign recv_wopt__rdy = ctrl_mem__recv_ctrl__rdy;
  assign element__recv_const__en = const_queue__send_const__en;
  assign element__recv_const__msg = const_queue__send_const__msg;
  assign const_queue__send_const__rdy = element__recv_const__rdy;
  assign element__to_mem_raddr__rdy[0] = 1'd0;
  assign element__from_mem_rdata__en[0] = 1'd0;
  assign element__from_mem_rdata__msg[0] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[0] = 1'd0;
  assign element__to_mem_wdata__rdy[0] = 1'd0;
  assign element__to_mem_raddr__rdy[1] = 1'd0;
  assign element__from_mem_rdata__en[1] = 1'd0;
  assign element__from_mem_rdata__msg[1] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[1] = 1'd0;
  assign element__to_mem_wdata__rdy[1] = 1'd0;
  assign element__to_mem_raddr__rdy[2] = 1'd0;
  assign element__from_mem_rdata__en[2] = 1'd0;
  assign element__from_mem_rdata__msg[2] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[2] = 1'd0;
  assign element__to_mem_wdata__rdy[2] = 1'd0;
  assign element__to_mem_raddr__rdy[3] = 1'd0;
  assign element__from_mem_rdata__en[3] = 1'd0;
  assign element__from_mem_rdata__msg[3] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[3] = 1'd0;
  assign element__to_mem_wdata__rdy[3] = 1'd0;
  assign element__to_mem_raddr__rdy[4] = 1'd0;
  assign element__from_mem_rdata__en[4] = 1'd0;
  assign element__from_mem_rdata__msg[4] = { 16'd0, 1'd0, 1'd0 };
  assign element__to_mem_waddr__rdy[4] = 1'd0;
  assign element__to_mem_wdata__rdy[4] = 1'd0;
  assign to_mem_raddr__en = element__to_mem_raddr__en[5];
  assign to_mem_raddr__msg = element__to_mem_raddr__msg[5];
  assign element__to_mem_raddr__rdy[5] = to_mem_raddr__rdy;
  assign element__from_mem_rdata__en[5] = from_mem_rdata__en;
  assign element__from_mem_rdata__msg[5] = from_mem_rdata__msg;
  assign from_mem_rdata__rdy = element__from_mem_rdata__rdy[5];
  assign to_mem_waddr__en = element__to_mem_waddr__en[5];
  assign to_mem_waddr__msg = element__to_mem_waddr__msg[5];
  assign element__to_mem_waddr__rdy[5] = to_mem_waddr__rdy;
  assign to_mem_wdata__en = element__to_mem_wdata__en[5];
  assign to_mem_wdata__msg = element__to_mem_wdata__msg[5];
  assign element__to_mem_wdata__rdy[5] = to_mem_wdata__rdy;
  assign crossbar__recv_data__en[0] = recv_data__en[0];
  assign crossbar__recv_data__msg[0] = recv_data__msg[0];
  assign recv_data__rdy[0] = crossbar__recv_data__rdy[0];
  assign crossbar__recv_data__en[1] = recv_data__en[1];
  assign crossbar__recv_data__msg[1] = recv_data__msg[1];
  assign recv_data__rdy[1] = crossbar__recv_data__rdy[1];
  assign crossbar__recv_data__en[2] = recv_data__en[2];
  assign crossbar__recv_data__msg[2] = recv_data__msg[2];
  assign recv_data__rdy[2] = crossbar__recv_data__rdy[2];
  assign crossbar__recv_data__en[3] = recv_data__en[3];
  assign crossbar__recv_data__msg[3] = recv_data__msg[3];
  assign recv_data__rdy[3] = crossbar__recv_data__rdy[3];
  assign channel__recv__en[0] = crossbar__send_data__en[0];
  assign channel__recv__msg[0] = crossbar__send_data__msg[0];
  assign crossbar__send_data__rdy[0] = channel__recv__rdy[0];
  assign channel__recv__en[1] = crossbar__send_data__en[1];
  assign channel__recv__msg[1] = crossbar__send_data__msg[1];
  assign crossbar__send_data__rdy[1] = channel__recv__rdy[1];
  assign channel__recv__en[2] = crossbar__send_data__en[2];
  assign channel__recv__msg[2] = crossbar__send_data__msg[2];
  assign crossbar__send_data__rdy[2] = channel__recv__rdy[2];
  assign channel__recv__en[3] = crossbar__send_data__en[3];
  assign channel__recv__msg[3] = crossbar__send_data__msg[3];
  assign crossbar__send_data__rdy[3] = channel__recv__rdy[3];
  assign channel__recv__en[4] = crossbar__send_data__en[4];
  assign channel__recv__msg[4] = crossbar__send_data__msg[4];
  assign crossbar__send_data__rdy[4] = channel__recv__rdy[4];
  assign channel__recv__en[5] = crossbar__send_data__en[5];
  assign channel__recv__msg[5] = crossbar__send_data__msg[5];
  assign crossbar__send_data__rdy[5] = channel__recv__rdy[5];
  assign channel__recv__en[6] = crossbar__send_data__en[6];
  assign channel__recv__msg[6] = crossbar__send_data__msg[6];
  assign crossbar__send_data__rdy[6] = channel__recv__rdy[6];
  assign channel__recv__en[7] = crossbar__send_data__en[7];
  assign channel__recv__msg[7] = crossbar__send_data__msg[7];
  assign crossbar__send_data__rdy[7] = channel__recv__rdy[7];
  assign reg_predicate__recv__en = crossbar__send_predicate__en;
  assign reg_predicate__recv__msg = crossbar__send_predicate__msg;
  assign crossbar__send_predicate__rdy = reg_predicate__recv__rdy;
  assign element__recv_predicate__en = reg_predicate__send__en;
  assign element__recv_predicate__msg = reg_predicate__send__msg;
  assign reg_predicate__send__rdy = element__recv_predicate__rdy;
  assign send_data__en[0] = channel__send__en[0];
  assign send_data__msg[0] = channel__send__msg[0];
  assign channel__send__rdy[0] = send_data__rdy[0];
  assign send_data__en[1] = channel__send__en[1];
  assign send_data__msg[1] = channel__send__msg[1];
  assign channel__send__rdy[1] = send_data__rdy[1];
  assign send_data__en[2] = channel__send__en[2];
  assign send_data__msg[2] = channel__send__msg[2];
  assign channel__send__rdy[2] = send_data__rdy[2];
  assign send_data__en[3] = channel__send__en[3];
  assign send_data__msg[3] = channel__send__msg[3];
  assign channel__send__rdy[3] = send_data__rdy[3];
  assign element__recv_in__en[0] = channel__send__en[4];
  assign element__recv_in__msg[0] = channel__send__msg[4];
  assign channel__send__rdy[4] = element__recv_in__rdy[0];
  assign element__recv_in_count[0] = channel__count[4];
  assign element__recv_in__en[1] = channel__send__en[5];
  assign element__recv_in__msg[1] = channel__send__msg[5];
  assign channel__send__rdy[5] = element__recv_in__rdy[1];
  assign element__recv_in_count[1] = channel__count[5];
  assign element__recv_in__en[2] = channel__send__en[6];
  assign element__recv_in__msg[2] = channel__send__msg[6];
  assign channel__send__rdy[6] = element__recv_in__rdy[2];
  assign element__recv_in_count[2] = channel__count[6];
  assign element__recv_in__en[3] = channel__send__en[7];
  assign element__recv_in__msg[3] = channel__send__msg[7];
  assign channel__send__rdy[7] = element__recv_in__rdy[3];
  assign element__recv_in_count[3] = channel__count[7];
  assign crossbar__recv_data__en[4] = element__send_out__en[0];
  assign crossbar__recv_data__msg[4] = element__send_out__msg[0];
  assign element__send_out__rdy[0] = crossbar__recv_data__rdy[4];
  assign crossbar__recv_data__en[5] = element__send_out__en[1];
  assign crossbar__recv_data__msg[5] = element__send_out__msg[1];
  assign element__send_out__rdy[1] = crossbar__recv_data__rdy[5];

endmodule


// PyMTL Component CGRARTL Definition
// Full name: CGRARTL__DataType_CGRAData_16_1_1__payload_16__predicate_1__bypass_1__PredicateType_CGRAData_1_1__payload_1__predicate_1__CtrlType_CGRAConfig_6_4_6_8__764c37c5066f1efc__width_4__height_4__ctrl_mem_size_4__data_mem_size_100__num_ctrl_4__total_steps_140__FunctionUnit_FlexibleFuRTL__FuList_[<class 'VectorCGRA.fu.single.AdderRTL.AdderRTL'>, <class 'VectorCGRA.fu.single.PhiRTL.PhiRTL'>, <class 'VectorCGRA.fu.single.MemUnitRTL.MemUnitRTL'>, <class 'VectorCGRA.fu.single.CompRTL.CompRTL'>, <class 'VectorCGRA.fu.single.MulRTL.MulRTL'>, <class 'VectorCGRA.fu.single.BranchRTL.BranchRTL'>]__preload_data_[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0001),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0002),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0003),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0004),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0005),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0006),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0007),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0008),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0009),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x000f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0010),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0011),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0012),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0013),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0014),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0015),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0016),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0017),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0018),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0019),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x001f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0020),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0021),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0022),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0023),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0024),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0025),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0026),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0027),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0028),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0029),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x002f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0030),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0031),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0032),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0033),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0034),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0035),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0036),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0037),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0038),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0039),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x003f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0040),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0041),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0042),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0043),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0044),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0045),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0046),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0047),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0048),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0049),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x004f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0050),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0051),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0052),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0053),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0054),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0055),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0056),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0057),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0058),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0059),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005b),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005c),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005d),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005e),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x005f),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0060),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0061),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0062),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0063),Bits1(0x1),Bits1(0x0))]__preload_const_[[CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0013),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0001),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x000a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x000a),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))], [CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0)), CGRAData_16_1_1(Bits16(0x0000),Bits1(0x1),Bits1(0x0))]]
// At /home/lab-cgra/OpenCGRA/VectorCGRA/cgra/CGRARTL.py

module CGRARTL__e95cacd33b23104e #(
parameter int unsigned TCDMAddrWidth = 6
)(
  input logic [0:0] clk ,
  input logic [0:0] reset ,
  input logic [0:0] recv_waddr__en [0:15] ,
  input logic [1:0] recv_waddr__msg [0:15] ,
  output logic [0:0] recv_waddr__rdy [0:15] ,
  input logic [0:0] recv_wopt__en [0:15] ,
  input CGRAConfig_6_4_6_8__764c37c5066f1efc recv_wopt__msg [0:15] ,
  output logic [0:0] recv_wopt__rdy [0:15] ,
  
  //Added
  //-------------------------------------------------------------
  
  //write to memory
  	//-------------------------------------------------------------
  output logic [0:0] data_mem__recv_waddr__en1 [0:3],
  // size of waddr = clog2(Population Data Size)
  output logic [TCDMAddrWidth-1:0] data_mem__recv_waddr__msg1 [0:3],
  input logic [0:0] data_mem__recv_waddr__rdy1 [0:3],
  output logic [0:0] data_mem__recv_wdata__en1 [0:3],
  output CGRAData_16_1_1__payload_16__predicate_1__bypass_1 data_mem__recv_wdata__msg1 [0:3],
  input logic [0:0] data_mem__recv_wdata__rdy1 [0:3],
  	//-------------------------------------------------------------
  	
  //Reading from memory
  	//-------------------------------------------------------------
  output logic data_mem__recv_raddr__en1 [0:3],
  // size of raddr = clog2(Population Data Size)
  output logic [TCDMAddrWidth-1:0] data_mem__recv_raddr__msg1 [0:3],
  input logic data_mem__recv_raddr__rdy1 [0:3],
  input logic data_mem__send_rdata__en1 [0:3],
  input CGRAData_16_1_1__payload_16__predicate_1__bypass_1 data_mem__send_rdata__msg1 [0:3],
  output logic [0:0] data_mem__send_rdata__rdy1 [0:3]
  	//-------------------------------------------------------------
  //-------------------------------------------------------------
  
);
  //-------------------------------------------------------------
  // Component data_mem
  //-------------------------------------------------------------

  
  logic [0:0] data_mem__clk;
  logic [0:0] data_mem__reset;
  logic [0:0] data_mem__recv_raddr__en [0:3];
  logic [TCDMAddrWidth-1:0] data_mem__recv_raddr__msg [0:3];
  logic [0:0] data_mem__recv_raddr__rdy [0:3];
  logic [0:0] data_mem__recv_waddr__en [0:3];
  logic [TCDMAddrWidth-1:0] data_mem__recv_waddr__msg [0:3];
  logic [0:0] data_mem__recv_waddr__rdy [0:3];
  logic [0:0] data_mem__recv_wdata__en [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 data_mem__recv_wdata__msg [0:3];
  logic [0:0] data_mem__recv_wdata__rdy [0:3];
  logic [0:0] data_mem__send_rdata__en [0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 data_mem__send_rdata__msg [0:3];
  logic [0:0] data_mem__send_rdata__rdy [0:3];
  
  DataMemRTL__b41b35d1723673b4 data_mem
  (
    .clk( data_mem__clk ),
    .reset( data_mem__reset ),
    .recv_raddr__en( data_mem__recv_raddr__en ),
    .recv_raddr__msg( data_mem__recv_raddr__msg ),
    .recv_raddr__rdy( data_mem__recv_raddr__rdy ),
    .recv_waddr__en( data_mem__recv_waddr__en ),
    .recv_waddr__msg( data_mem__recv_waddr__msg ),
    .recv_waddr__rdy( data_mem__recv_waddr__rdy ),
    .recv_wdata__en( data_mem__recv_wdata__en ),
    .recv_wdata__msg( data_mem__recv_wdata__msg ),
    .recv_wdata__rdy( data_mem__recv_wdata__rdy ),
    .send_rdata__en( data_mem__send_rdata__en ),
    .send_rdata__msg( data_mem__send_rdata__msg ),
    .send_rdata__rdy( data_mem__send_rdata__rdy )
  );
  
  //-------------------------------------------------------------
  // End of component data_mem
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component tile[0:15]
  //-------------------------------------------------------------

  logic [0:0] tile__clk [0:15];
  logic [0:0] tile__reset [0:15];
  logic [0:0] tile__from_mem_rdata__en [0:15];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 tile__from_mem_rdata__msg [0:15];
  logic [0:0] tile__from_mem_rdata__rdy [0:15];
  logic [0:0] tile__recv_data__en [0:15][0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 tile__recv_data__msg [0:15][0:3];
  logic [0:0] tile__recv_data__rdy [0:15][0:3];
  logic [0:0] tile__recv_waddr__en [0:15];
  logic [1:0] tile__recv_waddr__msg [0:15];
  logic [0:0] tile__recv_waddr__rdy [0:15];
  logic [0:0] tile__recv_wopt__en [0:15];
  CGRAConfig_6_4_6_8__764c37c5066f1efc tile__recv_wopt__msg [0:15];
  logic [0:0] tile__recv_wopt__rdy [0:15];
  logic [0:0] tile__send_data__en [0:15][0:3];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 tile__send_data__msg [0:15][0:3];
  logic [0:0] tile__send_data__rdy [0:15][0:3];
  logic [0:0] tile__to_mem_raddr__en [0:15];
  logic [TCDMAddrWidth-1:0] tile__to_mem_raddr__msg [0:15];
  logic [0:0] tile__to_mem_raddr__rdy [0:15];
  logic [0:0] tile__to_mem_waddr__en [0:15];
  logic [TCDMAddrWidth-1:0] tile__to_mem_waddr__msg [0:15];
  logic [0:0] tile__to_mem_waddr__rdy [0:15];
  logic [0:0] tile__to_mem_wdata__en [0:15];
  CGRAData_16_1_1__payload_16__predicate_1__bypass_1 tile__to_mem_wdata__msg [0:15];
  logic [0:0] tile__to_mem_wdata__rdy [0:15];

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__0 (
    .clk( tile__clk[0] ),
    .reset( tile__reset[0] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[0] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[0] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[0] ),
    .recv_data__en( tile__recv_data__en[0] ),
    .recv_data__msg( tile__recv_data__msg[0] ),
    .recv_data__rdy( tile__recv_data__rdy[0] ),
    .recv_waddr__en( tile__recv_waddr__en[0] ),
    .recv_waddr__msg( tile__recv_waddr__msg[0] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[0] ),
    .recv_wopt__en( tile__recv_wopt__en[0] ),
    .recv_wopt__msg( tile__recv_wopt__msg[0] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[0] ),
    .send_data__en( tile__send_data__en[0] ),
    .send_data__msg( tile__send_data__msg[0] ),
    .send_data__rdy( tile__send_data__rdy[0] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[0] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[0] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[0] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[0] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[0] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[0] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[0] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[0] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[0] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__1 (
    .clk( tile__clk[1] ),
    .reset( tile__reset[1] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[1] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[1] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[1] ),
    .recv_data__en( tile__recv_data__en[1] ),
    .recv_data__msg( tile__recv_data__msg[1] ),
    .recv_data__rdy( tile__recv_data__rdy[1] ),
    .recv_waddr__en( tile__recv_waddr__en[1] ),
    .recv_waddr__msg( tile__recv_waddr__msg[1] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[1] ),
    .recv_wopt__en( tile__recv_wopt__en[1] ),
    .recv_wopt__msg( tile__recv_wopt__msg[1] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[1] ),
    .send_data__en( tile__send_data__en[1] ),
    .send_data__msg( tile__send_data__msg[1] ),
    .send_data__rdy( tile__send_data__rdy[1] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[1] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[1] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[1] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[1] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[1] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[1] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[1] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[1] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[1] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__2 (
    .clk( tile__clk[2] ),
    .reset( tile__reset[2] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[2] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[2] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[2] ),
    .recv_data__en( tile__recv_data__en[2] ),
    .recv_data__msg( tile__recv_data__msg[2] ),
    .recv_data__rdy( tile__recv_data__rdy[2] ),
    .recv_waddr__en( tile__recv_waddr__en[2] ),
    .recv_waddr__msg( tile__recv_waddr__msg[2] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[2] ),
    .recv_wopt__en( tile__recv_wopt__en[2] ),
    .recv_wopt__msg( tile__recv_wopt__msg[2] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[2] ),
    .send_data__en( tile__send_data__en[2] ),
    .send_data__msg( tile__send_data__msg[2] ),
    .send_data__rdy( tile__send_data__rdy[2] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[2] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[2] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[2] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[2] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[2] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[2] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[2] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[2] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[2] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__3 (
    .clk( tile__clk[3] ),
    .reset( tile__reset[3] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[3] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[3] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[3] ),
    .recv_data__en( tile__recv_data__en[3] ),
    .recv_data__msg( tile__recv_data__msg[3] ),
    .recv_data__rdy( tile__recv_data__rdy[3] ),
    .recv_waddr__en( tile__recv_waddr__en[3] ),
    .recv_waddr__msg( tile__recv_waddr__msg[3] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[3] ),
    .recv_wopt__en( tile__recv_wopt__en[3] ),
    .recv_wopt__msg( tile__recv_wopt__msg[3] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[3] ),
    .send_data__en( tile__send_data__en[3] ),
    .send_data__msg( tile__send_data__msg[3] ),
    .send_data__rdy( tile__send_data__rdy[3] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[3] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[3] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[3] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[3] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[3] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[3] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[3] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[3] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[3] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__4 (
    .clk( tile__clk[4] ),
    .reset( tile__reset[4] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[4] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[4] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[4] ),
    .recv_data__en( tile__recv_data__en[4] ),
    .recv_data__msg( tile__recv_data__msg[4] ),
    .recv_data__rdy( tile__recv_data__rdy[4] ),
    .recv_waddr__en( tile__recv_waddr__en[4] ),
    .recv_waddr__msg( tile__recv_waddr__msg[4] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[4] ),
    .recv_wopt__en( tile__recv_wopt__en[4] ),
    .recv_wopt__msg( tile__recv_wopt__msg[4] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[4] ),
    .send_data__en( tile__send_data__en[4] ),
    .send_data__msg( tile__send_data__msg[4] ),
    .send_data__rdy( tile__send_data__rdy[4] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[4] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[4] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[4] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[4] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[4] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[4] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[4] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[4] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[4] )
  );

  TileRTL__d56273f01cfaa191 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__5 (
    .clk( tile__clk[5] ),
    .reset( tile__reset[5] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[5] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[5] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[5] ),
    .recv_data__en( tile__recv_data__en[5] ),
    .recv_data__msg( tile__recv_data__msg[5] ),
    .recv_data__rdy( tile__recv_data__rdy[5] ),
    .recv_waddr__en( tile__recv_waddr__en[5] ),
    .recv_waddr__msg( tile__recv_waddr__msg[5] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[5] ),
    .recv_wopt__en( tile__recv_wopt__en[5] ),
    .recv_wopt__msg( tile__recv_wopt__msg[5] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[5] ),
    .send_data__en( tile__send_data__en[5] ),
    .send_data__msg( tile__send_data__msg[5] ),
    .send_data__rdy( tile__send_data__rdy[5] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[5] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[5] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[5] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[5] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[5] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[5] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[5] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[5] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[5] )
  );

  TileRTL__f2822cdaf2b80d8f #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__6 (
    .clk( tile__clk[6] ),
    .reset( tile__reset[6] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[6] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[6] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[6] ),
    .recv_data__en( tile__recv_data__en[6] ),
    .recv_data__msg( tile__recv_data__msg[6] ),
    .recv_data__rdy( tile__recv_data__rdy[6] ),
    .recv_waddr__en( tile__recv_waddr__en[6] ),
    .recv_waddr__msg( tile__recv_waddr__msg[6] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[6] ),
    .recv_wopt__en( tile__recv_wopt__en[6] ),
    .recv_wopt__msg( tile__recv_wopt__msg[6] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[6] ),
    .send_data__en( tile__send_data__en[6] ),
    .send_data__msg( tile__send_data__msg[6] ),
    .send_data__rdy( tile__send_data__rdy[6] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[6] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[6] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[6] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[6] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[6] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[6] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[6] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[6] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[6] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__7 (
    .clk( tile__clk[7] ),
    .reset( tile__reset[7] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[7] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[7] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[7] ),
    .recv_data__en( tile__recv_data__en[7] ),
    .recv_data__msg( tile__recv_data__msg[7] ),
    .recv_data__rdy( tile__recv_data__rdy[7] ),
    .recv_waddr__en( tile__recv_waddr__en[7] ),
    .recv_waddr__msg( tile__recv_waddr__msg[7] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[7] ),
    .recv_wopt__en( tile__recv_wopt__en[7] ),
    .recv_wopt__msg( tile__recv_wopt__msg[7] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[7] ),
    .send_data__en( tile__send_data__en[7] ),
    .send_data__msg( tile__send_data__msg[7] ),
    .send_data__rdy( tile__send_data__rdy[7] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[7] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[7] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[7] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[7] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[7] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[7] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[7] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[7] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[7] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__8 (
    .clk( tile__clk[8] ),
    .reset( tile__reset[8] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[8] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[8] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[8] ),
    .recv_data__en( tile__recv_data__en[8] ),
    .recv_data__msg( tile__recv_data__msg[8] ),
    .recv_data__rdy( tile__recv_data__rdy[8] ),
    .recv_waddr__en( tile__recv_waddr__en[8] ),
    .recv_waddr__msg( tile__recv_waddr__msg[8] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[8] ),
    .recv_wopt__en( tile__recv_wopt__en[8] ),
    .recv_wopt__msg( tile__recv_wopt__msg[8] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[8] ),
    .send_data__en( tile__send_data__en[8] ),
    .send_data__msg( tile__send_data__msg[8] ),
    .send_data__rdy( tile__send_data__rdy[8] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[8] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[8] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[8] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[8] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[8] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[8] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[8] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[8] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[8] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__9 (
    .clk( tile__clk[9] ),
    .reset( tile__reset[9] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[9] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[9] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[9] ),
    .recv_data__en( tile__recv_data__en[9] ),
    .recv_data__msg( tile__recv_data__msg[9] ),
    .recv_data__rdy( tile__recv_data__rdy[9] ),
    .recv_waddr__en( tile__recv_waddr__en[9] ),
    .recv_waddr__msg( tile__recv_waddr__msg[9] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[9] ),
    .recv_wopt__en( tile__recv_wopt__en[9] ),
    .recv_wopt__msg( tile__recv_wopt__msg[9] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[9] ),
    .send_data__en( tile__send_data__en[9] ),
    .send_data__msg( tile__send_data__msg[9] ),
    .send_data__rdy( tile__send_data__rdy[9] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[9] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[9] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[9] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[9] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[9] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[9] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[9] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[9] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[9] )
  );

  TileRTL__3eb488da24ed7118 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__10 (
    .clk( tile__clk[10] ),
    .reset( tile__reset[10] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[10] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[10] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[10] ),
    .recv_data__en( tile__recv_data__en[10] ),
    .recv_data__msg( tile__recv_data__msg[10] ),
    .recv_data__rdy( tile__recv_data__rdy[10] ),
    .recv_waddr__en( tile__recv_waddr__en[10] ),
    .recv_waddr__msg( tile__recv_waddr__msg[10] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[10] ),
    .recv_wopt__en( tile__recv_wopt__en[10] ),
    .recv_wopt__msg( tile__recv_wopt__msg[10] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[10] ),
    .send_data__en( tile__send_data__en[10] ),
    .send_data__msg( tile__send_data__msg[10] ),
    .send_data__rdy( tile__send_data__rdy[10] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[10] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[10] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[10] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[10] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[10] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[10] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[10] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[10] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[10] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__11 (
    .clk( tile__clk[11] ),
    .reset( tile__reset[11] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[11] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[11] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[11] ),
    .recv_data__en( tile__recv_data__en[11] ),
    .recv_data__msg( tile__recv_data__msg[11] ),
    .recv_data__rdy( tile__recv_data__rdy[11] ),
    .recv_waddr__en( tile__recv_waddr__en[11] ),
    .recv_waddr__msg( tile__recv_waddr__msg[11] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[11] ),
    .recv_wopt__en( tile__recv_wopt__en[11] ),
    .recv_wopt__msg( tile__recv_wopt__msg[11] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[11] ),
    .send_data__en( tile__send_data__en[11] ),
    .send_data__msg( tile__send_data__msg[11] ),
    .send_data__rdy( tile__send_data__rdy[11] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[11] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[11] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[11] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[11] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[11] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[11] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[11] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[11] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[11] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__12 (
    .clk( tile__clk[12] ),
    .reset( tile__reset[12] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[12] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[12] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[12] ),
    .recv_data__en( tile__recv_data__en[12] ),
    .recv_data__msg( tile__recv_data__msg[12] ),
    .recv_data__rdy( tile__recv_data__rdy[12] ),
    .recv_waddr__en( tile__recv_waddr__en[12] ),
    .recv_waddr__msg( tile__recv_waddr__msg[12] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[12] ),
    .recv_wopt__en( tile__recv_wopt__en[12] ),
    .recv_wopt__msg( tile__recv_wopt__msg[12] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[12] ),
    .send_data__en( tile__send_data__en[12] ),
    .send_data__msg( tile__send_data__msg[12] ),
    .send_data__rdy( tile__send_data__rdy[12] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[12] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[12] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[12] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[12] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[12] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[12] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[12] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[12] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[12] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__13 (
    .clk( tile__clk[13] ),
    .reset( tile__reset[13] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[13] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[13] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[13] ),
    .recv_data__en( tile__recv_data__en[13] ),
    .recv_data__msg( tile__recv_data__msg[13] ),
    .recv_data__rdy( tile__recv_data__rdy[13] ),
    .recv_waddr__en( tile__recv_waddr__en[13] ),
    .recv_waddr__msg( tile__recv_waddr__msg[13] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[13] ),
    .recv_wopt__en( tile__recv_wopt__en[13] ),
    .recv_wopt__msg( tile__recv_wopt__msg[13] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[13] ),
    .send_data__en( tile__send_data__en[13] ),
    .send_data__msg( tile__send_data__msg[13] ),
    .send_data__rdy( tile__send_data__rdy[13] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[13] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[13] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[13] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[13] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[13] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[13] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[13] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[13] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[13] )
  );

  TileRTL__3eb488da24ed7118 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__14  (
    .clk( tile__clk[14] ),
    .reset( tile__reset[14] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[14] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[14] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[14] ),
    .recv_data__en( tile__recv_data__en[14] ),
    .recv_data__msg( tile__recv_data__msg[14] ),
    .recv_data__rdy( tile__recv_data__rdy[14] ),
    .recv_waddr__en( tile__recv_waddr__en[14] ),
    .recv_waddr__msg( tile__recv_waddr__msg[14] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[14] ),
    .recv_wopt__en( tile__recv_wopt__en[14] ),
    .recv_wopt__msg( tile__recv_wopt__msg[14] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[14] ),
    .send_data__en( tile__send_data__en[14] ),
    .send_data__msg( tile__send_data__msg[14] ),
    .send_data__rdy( tile__send_data__rdy[14] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[14] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[14] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[14] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[14] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[14] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[14] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[14] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[14] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[14] )
  );

  TileRTL__c49ddb6cf72af7d2 #(
.TCDMAddrWidth(TCDMAddrWidth)
)tile__15  (
    .clk( tile__clk[15] ),
    .reset( tile__reset[15] ),
    .from_mem_rdata__en( tile__from_mem_rdata__en[15] ),
    .from_mem_rdata__msg( tile__from_mem_rdata__msg[15] ),
    .from_mem_rdata__rdy( tile__from_mem_rdata__rdy[15] ),
    .recv_data__en( tile__recv_data__en[15] ),
    .recv_data__msg( tile__recv_data__msg[15] ),
    .recv_data__rdy( tile__recv_data__rdy[15] ),
    .recv_waddr__en( tile__recv_waddr__en[15] ),
    .recv_waddr__msg( tile__recv_waddr__msg[15] ),
    .recv_waddr__rdy( tile__recv_waddr__rdy[15] ),
    .recv_wopt__en( tile__recv_wopt__en[15] ),
    .recv_wopt__msg( tile__recv_wopt__msg[15] ),
    .recv_wopt__rdy( tile__recv_wopt__rdy[15] ),
    .send_data__en( tile__send_data__en[15] ),
    .send_data__msg( tile__send_data__msg[15] ),
    .send_data__rdy( tile__send_data__rdy[15] ),
    .to_mem_raddr__en( tile__to_mem_raddr__en[15] ),
    .to_mem_raddr__msg( tile__to_mem_raddr__msg[15] ),
    .to_mem_raddr__rdy( tile__to_mem_raddr__rdy[15] ),
    .to_mem_waddr__en( tile__to_mem_waddr__en[15] ),
    .to_mem_waddr__msg( tile__to_mem_waddr__msg[15] ),
    .to_mem_waddr__rdy( tile__to_mem_waddr__rdy[15] ),
    .to_mem_wdata__en( tile__to_mem_wdata__en[15] ),
    .to_mem_wdata__msg( tile__to_mem_wdata__msg[15] ),
    .to_mem_wdata__rdy( tile__to_mem_wdata__rdy[15] )
  );

  //-------------------------------------------------------------
  // End of component tile[0:15]
  //-------------------------------------------------------------

  assign tile__clk[0] = clk;
  assign tile__reset[0] = reset;
  assign tile__clk[1] = clk;
  assign tile__reset[1] = reset;
  assign tile__clk[2] = clk;
  assign tile__reset[2] = reset;
  assign tile__clk[3] = clk;
  assign tile__reset[3] = reset;
  assign tile__clk[4] = clk;
  assign tile__reset[4] = reset;
  assign tile__clk[5] = clk;
  assign tile__reset[5] = reset;
  assign tile__clk[6] = clk;
  assign tile__reset[6] = reset;
  assign tile__clk[7] = clk;
  assign tile__reset[7] = reset;
  assign tile__clk[8] = clk;
  assign tile__reset[8] = reset;
  assign tile__clk[9] = clk;
  assign tile__reset[9] = reset;
  assign tile__clk[10] = clk;
  assign tile__reset[10] = reset;
  assign tile__clk[11] = clk;
  assign tile__reset[11] = reset;
  assign tile__clk[12] = clk;
  assign tile__reset[12] = reset;
  assign tile__clk[13] = clk;
  assign tile__reset[13] = reset;
  assign tile__clk[14] = clk;
  assign tile__reset[14] = reset;
  assign tile__clk[15] = clk;
  assign tile__reset[15] = reset;
  //assign data_mem__clk = clk;
  //assign data_mem__reset = reset;
  assign tile__recv_waddr__en[0] = recv_waddr__en[0];
  assign tile__recv_waddr__msg[0] = recv_waddr__msg[0];
  assign recv_waddr__rdy[0] = tile__recv_waddr__rdy[0];
  assign tile__recv_wopt__en[0] = recv_wopt__en[0];
  assign tile__recv_wopt__msg[0] = recv_wopt__msg[0];
  assign recv_wopt__rdy[0] = tile__recv_wopt__rdy[0];
  assign tile__recv_data__en[4][1] = tile__send_data__en[0][0];
  assign tile__recv_data__msg[4][1] = tile__send_data__msg[0][0];
  assign tile__send_data__rdy[0][0] = tile__recv_data__rdy[4][1];
  assign tile__recv_data__en[1][2] = tile__send_data__en[0][3];
  assign tile__recv_data__msg[1][2] = tile__send_data__msg[0][3];
  assign tile__send_data__rdy[0][3] = tile__recv_data__rdy[1][2];
  assign tile__send_data__rdy[0][1] = 1'd0;
  assign tile__recv_data__en[0][1] = 1'd0;
  assign tile__recv_data__msg[0][1] = { 16'd0, 1'd0, 1'd0 };
  assign tile__send_data__rdy[0][2] = 1'd0;
  assign tile__recv_data__en[0][2] = 1'd0;
  assign tile__recv_data__msg[0][2] = { 16'd0, 1'd0, 1'd0 };
  assign data_mem__recv_raddr__en[0] = tile__to_mem_raddr__en[0];
  assign data_mem__recv_raddr__msg[0] = tile__to_mem_raddr__msg[0];
  assign tile__to_mem_raddr__rdy[0] = data_mem__recv_raddr__rdy[0];
  assign tile__from_mem_rdata__en[0] = data_mem__send_rdata__en[0];
  assign tile__from_mem_rdata__msg[0] = data_mem__send_rdata__msg[0];
  assign data_mem__send_rdata__rdy[0] = tile__from_mem_rdata__rdy[0];
  assign data_mem__recv_waddr__en[0] = tile__to_mem_waddr__en[0];
  assign data_mem__recv_waddr__msg[0] = tile__to_mem_waddr__msg[0];
  assign tile__to_mem_waddr__rdy[0] = data_mem__recv_waddr__rdy[0];
  assign data_mem__recv_wdata__en[0] = tile__to_mem_wdata__en[0];
  assign data_mem__recv_wdata__msg[0] = tile__to_mem_wdata__msg[0];
  assign tile__to_mem_wdata__rdy[0] = data_mem__recv_wdata__rdy[0];
  assign tile__recv_waddr__en[1] = recv_waddr__en[1];
  assign tile__recv_waddr__msg[1] = recv_waddr__msg[1];
  assign recv_waddr__rdy[1] = tile__recv_waddr__rdy[1];
  assign tile__recv_wopt__en[1] = recv_wopt__en[1];
  assign tile__recv_wopt__msg[1] = recv_wopt__msg[1];
  assign recv_wopt__rdy[1] = tile__recv_wopt__rdy[1];
  assign tile__recv_data__en[5][1] = tile__send_data__en[1][0];
  assign tile__recv_data__msg[5][1] = tile__send_data__msg[1][0];
  assign tile__send_data__rdy[1][0] = tile__recv_data__rdy[5][1];
  assign tile__recv_data__en[0][3] = tile__send_data__en[1][2];
  assign tile__recv_data__msg[0][3] = tile__send_data__msg[1][2];
  assign tile__send_data__rdy[1][2] = tile__recv_data__rdy[0][3];
  assign tile__recv_data__en[2][2] = tile__send_data__en[1][3];
  assign tile__recv_data__msg[2][2] = tile__send_data__msg[1][3];
  assign tile__send_data__rdy[1][3] = tile__recv_data__rdy[2][2];
  assign tile__send_data__rdy[1][1] = 1'd0;
  assign tile__recv_data__en[1][1] = 1'd0;
  assign tile__recv_data__msg[1][1] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[1] = 1'd0;
  assign tile__from_mem_rdata__en[1] = 1'd0;
  assign tile__from_mem_rdata__msg[1] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[1] = 1'd0;
  assign tile__to_mem_wdata__rdy[1] = 1'd0;
  assign tile__recv_waddr__en[2] = recv_waddr__en[2];
  assign tile__recv_waddr__msg[2] = recv_waddr__msg[2];
  assign recv_waddr__rdy[2] = tile__recv_waddr__rdy[2];
  assign tile__recv_wopt__en[2] = recv_wopt__en[2];
  assign tile__recv_wopt__msg[2] = recv_wopt__msg[2];
  assign recv_wopt__rdy[2] = tile__recv_wopt__rdy[2];
  assign tile__recv_data__en[6][1] = tile__send_data__en[2][0];
  assign tile__recv_data__msg[6][1] = tile__send_data__msg[2][0];
  assign tile__send_data__rdy[2][0] = tile__recv_data__rdy[6][1];
  assign tile__recv_data__en[1][3] = tile__send_data__en[2][2];
  assign tile__recv_data__msg[1][3] = tile__send_data__msg[2][2];
  assign tile__send_data__rdy[2][2] = tile__recv_data__rdy[1][3];
  assign tile__recv_data__en[3][2] = tile__send_data__en[2][3];
  assign tile__recv_data__msg[3][2] = tile__send_data__msg[2][3];
  assign tile__send_data__rdy[2][3] = tile__recv_data__rdy[3][2];
  assign tile__send_data__rdy[2][1] = 1'd0;
  assign tile__recv_data__en[2][1] = 1'd0;
  assign tile__recv_data__msg[2][1] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[2] = 1'd0;
  assign tile__from_mem_rdata__en[2] = 1'd0;
  assign tile__from_mem_rdata__msg[2] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[2] = 1'd0;
  assign tile__to_mem_wdata__rdy[2] = 1'd0;
  assign tile__recv_waddr__en[3] = recv_waddr__en[3];
  assign tile__recv_waddr__msg[3] = recv_waddr__msg[3];
  assign recv_waddr__rdy[3] = tile__recv_waddr__rdy[3];
  assign tile__recv_wopt__en[3] = recv_wopt__en[3];
  assign tile__recv_wopt__msg[3] = recv_wopt__msg[3];
  assign recv_wopt__rdy[3] = tile__recv_wopt__rdy[3];
  assign tile__recv_data__en[7][1] = tile__send_data__en[3][0];
  assign tile__recv_data__msg[7][1] = tile__send_data__msg[3][0];
  assign tile__send_data__rdy[3][0] = tile__recv_data__rdy[7][1];
  assign tile__recv_data__en[2][3] = tile__send_data__en[3][2];
  assign tile__recv_data__msg[2][3] = tile__send_data__msg[3][2];
  assign tile__send_data__rdy[3][2] = tile__recv_data__rdy[2][3];
  assign tile__send_data__rdy[3][1] = 1'd0;
  assign tile__recv_data__en[3][1] = 1'd0;
  assign tile__recv_data__msg[3][1] = { 16'd0, 1'd0, 1'd0 };
  assign tile__send_data__rdy[3][3] = 1'd0;
  assign tile__recv_data__en[3][3] = 1'd0;
  assign tile__recv_data__msg[3][3] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[3] = 1'd0;
  assign tile__from_mem_rdata__en[3] = 1'd0;
  assign tile__from_mem_rdata__msg[3] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[3] = 1'd0;
  assign tile__to_mem_wdata__rdy[3] = 1'd0;
  assign tile__recv_waddr__en[4] = recv_waddr__en[4];
  assign tile__recv_waddr__msg[4] = recv_waddr__msg[4];
  assign recv_waddr__rdy[4] = tile__recv_waddr__rdy[4];
  assign tile__recv_wopt__en[4] = recv_wopt__en[4];
  assign tile__recv_wopt__msg[4] = recv_wopt__msg[4];
  assign recv_wopt__rdy[4] = tile__recv_wopt__rdy[4];
  assign tile__recv_data__en[0][0] = tile__send_data__en[4][1];
  assign tile__recv_data__msg[0][0] = tile__send_data__msg[4][1];
  assign tile__send_data__rdy[4][1] = tile__recv_data__rdy[0][0];
  assign tile__recv_data__en[8][1] = tile__send_data__en[4][0];
  assign tile__recv_data__msg[8][1] = tile__send_data__msg[4][0];
  assign tile__send_data__rdy[4][0] = tile__recv_data__rdy[8][1];
  assign tile__recv_data__en[5][2] = tile__send_data__en[4][3];
  assign tile__recv_data__msg[5][2] = tile__send_data__msg[4][3];
  assign tile__send_data__rdy[4][3] = tile__recv_data__rdy[5][2];
  assign tile__send_data__rdy[4][2] = 1'd0;
  assign tile__recv_data__en[4][2] = 1'd0;
  assign tile__recv_data__msg[4][2] = { 16'd0, 1'd0, 1'd0 };
  assign data_mem__recv_raddr__en[1] = tile__to_mem_raddr__en[4];
  assign data_mem__recv_raddr__msg[1] = tile__to_mem_raddr__msg[4];
  assign tile__to_mem_raddr__rdy[4] = data_mem__recv_raddr__rdy[1];
  assign tile__from_mem_rdata__en[4] = data_mem__send_rdata__en[1];
  assign tile__from_mem_rdata__msg[4] = data_mem__send_rdata__msg[1];
  assign data_mem__send_rdata__rdy[1] = tile__from_mem_rdata__rdy[4];
  assign data_mem__recv_waddr__en[1] = tile__to_mem_waddr__en[4];
  assign data_mem__recv_waddr__msg[1] = tile__to_mem_waddr__msg[4];
  assign tile__to_mem_waddr__rdy[4] = data_mem__recv_waddr__rdy[1];
  assign data_mem__recv_wdata__en[1] = tile__to_mem_wdata__en[4];
  assign data_mem__recv_wdata__msg[1] = tile__to_mem_wdata__msg[4];
  assign tile__to_mem_wdata__rdy[4] = data_mem__recv_wdata__rdy[1];
  assign tile__recv_waddr__en[5] = recv_waddr__en[5];
  assign tile__recv_waddr__msg[5] = recv_waddr__msg[5];
  assign recv_waddr__rdy[5] = tile__recv_waddr__rdy[5];
  assign tile__recv_wopt__en[5] = recv_wopt__en[5];
  assign tile__recv_wopt__msg[5] = recv_wopt__msg[5];
  assign recv_wopt__rdy[5] = tile__recv_wopt__rdy[5];
  assign tile__recv_data__en[1][0] = tile__send_data__en[5][1];
  assign tile__recv_data__msg[1][0] = tile__send_data__msg[5][1];
  assign tile__send_data__rdy[5][1] = tile__recv_data__rdy[1][0];
  assign tile__recv_data__en[9][1] = tile__send_data__en[5][0];
  assign tile__recv_data__msg[9][1] = tile__send_data__msg[5][0];
  assign tile__send_data__rdy[5][0] = tile__recv_data__rdy[9][1];
  assign tile__recv_data__en[4][3] = tile__send_data__en[5][2];
  assign tile__recv_data__msg[4][3] = tile__send_data__msg[5][2];
  assign tile__send_data__rdy[5][2] = tile__recv_data__rdy[4][3];
  assign tile__recv_data__en[6][2] = tile__send_data__en[5][3];
  assign tile__recv_data__msg[6][2] = tile__send_data__msg[5][3];
  assign tile__send_data__rdy[5][3] = tile__recv_data__rdy[6][2];
  assign tile__to_mem_raddr__rdy[5] = 1'd0;
  assign tile__from_mem_rdata__en[5] = 1'd0;
  assign tile__from_mem_rdata__msg[5] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[5] = 1'd0;
  assign tile__to_mem_wdata__rdy[5] = 1'd0;
  assign tile__recv_waddr__en[6] = recv_waddr__en[6];
  assign tile__recv_waddr__msg[6] = recv_waddr__msg[6];
  assign recv_waddr__rdy[6] = tile__recv_waddr__rdy[6];
  assign tile__recv_wopt__en[6] = recv_wopt__en[6];
  assign tile__recv_wopt__msg[6] = recv_wopt__msg[6];
  assign recv_wopt__rdy[6] = tile__recv_wopt__rdy[6];
  assign tile__recv_data__en[2][0] = tile__send_data__en[6][1];
  assign tile__recv_data__msg[2][0] = tile__send_data__msg[6][1];
  assign tile__send_data__rdy[6][1] = tile__recv_data__rdy[2][0];
  assign tile__recv_data__en[10][1] = tile__send_data__en[6][0];
  assign tile__recv_data__msg[10][1] = tile__send_data__msg[6][0];
  assign tile__send_data__rdy[6][0] = tile__recv_data__rdy[10][1];
  assign tile__recv_data__en[5][3] = tile__send_data__en[6][2];
  assign tile__recv_data__msg[5][3] = tile__send_data__msg[6][2];
  assign tile__send_data__rdy[6][2] = tile__recv_data__rdy[5][3];
  assign tile__recv_data__en[7][2] = tile__send_data__en[6][3];
  assign tile__recv_data__msg[7][2] = tile__send_data__msg[6][3];
  assign tile__send_data__rdy[6][3] = tile__recv_data__rdy[7][2];
  assign tile__to_mem_raddr__rdy[6] = 1'd0;
  assign tile__from_mem_rdata__en[6] = 1'd0;
  assign tile__from_mem_rdata__msg[6] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[6] = 1'd0;
  assign tile__to_mem_wdata__rdy[6] = 1'd0;
  assign tile__recv_waddr__en[7] = recv_waddr__en[7];
  assign tile__recv_waddr__msg[7] = recv_waddr__msg[7];
  assign recv_waddr__rdy[7] = tile__recv_waddr__rdy[7];
  assign tile__recv_wopt__en[7] = recv_wopt__en[7];
  assign tile__recv_wopt__msg[7] = recv_wopt__msg[7];
  assign recv_wopt__rdy[7] = tile__recv_wopt__rdy[7];
  assign tile__recv_data__en[3][0] = tile__send_data__en[7][1];
  assign tile__recv_data__msg[3][0] = tile__send_data__msg[7][1];
  assign tile__send_data__rdy[7][1] = tile__recv_data__rdy[3][0];
  assign tile__recv_data__en[11][1] = tile__send_data__en[7][0];
  assign tile__recv_data__msg[11][1] = tile__send_data__msg[7][0];
  assign tile__send_data__rdy[7][0] = tile__recv_data__rdy[11][1];
  assign tile__recv_data__en[6][3] = tile__send_data__en[7][2];
  assign tile__recv_data__msg[6][3] = tile__send_data__msg[7][2];
  assign tile__send_data__rdy[7][2] = tile__recv_data__rdy[6][3];
  assign tile__send_data__rdy[7][3] = 1'd0;
  assign tile__recv_data__en[7][3] = 1'd0;
  assign tile__recv_data__msg[7][3] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[7] = 1'd0;
  assign tile__from_mem_rdata__en[7] = 1'd0;
  assign tile__from_mem_rdata__msg[7] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[7] = 1'd0;
  assign tile__to_mem_wdata__rdy[7] = 1'd0;
  assign tile__recv_waddr__en[8] = recv_waddr__en[8];
  assign tile__recv_waddr__msg[8] = recv_waddr__msg[8];
  assign recv_waddr__rdy[8] = tile__recv_waddr__rdy[8];
  assign tile__recv_wopt__en[8] = recv_wopt__en[8];
  assign tile__recv_wopt__msg[8] = recv_wopt__msg[8];
  assign recv_wopt__rdy[8] = tile__recv_wopt__rdy[8];
  assign tile__recv_data__en[4][0] = tile__send_data__en[8][1];
  assign tile__recv_data__msg[4][0] = tile__send_data__msg[8][1];
  assign tile__send_data__rdy[8][1] = tile__recv_data__rdy[4][0];
  assign tile__recv_data__en[12][1] = tile__send_data__en[8][0];
  assign tile__recv_data__msg[12][1] = tile__send_data__msg[8][0];
  assign tile__send_data__rdy[8][0] = tile__recv_data__rdy[12][1];
  assign tile__recv_data__en[9][2] = tile__send_data__en[8][3];
  assign tile__recv_data__msg[9][2] = tile__send_data__msg[8][3];
  assign tile__send_data__rdy[8][3] = tile__recv_data__rdy[9][2];
  assign tile__send_data__rdy[8][2] = 1'd0;
  assign tile__recv_data__en[8][2] = 1'd0;
  assign tile__recv_data__msg[8][2] = { 16'd0, 1'd0, 1'd0 };
  assign data_mem__recv_raddr__en[2] = tile__to_mem_raddr__en[8];
  assign data_mem__recv_raddr__msg[2] = tile__to_mem_raddr__msg[8];
  assign tile__to_mem_raddr__rdy[8] = data_mem__recv_raddr__rdy[2];
  assign tile__from_mem_rdata__en[8] = data_mem__send_rdata__en[2];
  assign tile__from_mem_rdata__msg[8] = data_mem__send_rdata__msg[2];
  assign data_mem__send_rdata__rdy[2] = tile__from_mem_rdata__rdy[8];
  assign data_mem__recv_waddr__en[2] = tile__to_mem_waddr__en[8];
  assign data_mem__recv_waddr__msg[2] = tile__to_mem_waddr__msg[8];
  assign tile__to_mem_waddr__rdy[8] = data_mem__recv_waddr__rdy[2];
  assign data_mem__recv_wdata__en[2] = tile__to_mem_wdata__en[8];
  assign data_mem__recv_wdata__msg[2] = tile__to_mem_wdata__msg[8];
  assign tile__to_mem_wdata__rdy[8] = data_mem__recv_wdata__rdy[2];
  assign tile__recv_waddr__en[9] = recv_waddr__en[9];
  assign tile__recv_waddr__msg[9] = recv_waddr__msg[9];
  assign recv_waddr__rdy[9] = tile__recv_waddr__rdy[9];
  assign tile__recv_wopt__en[9] = recv_wopt__en[9];
  assign tile__recv_wopt__msg[9] = recv_wopt__msg[9];
  assign recv_wopt__rdy[9] = tile__recv_wopt__rdy[9];
  assign tile__recv_data__en[5][0] = tile__send_data__en[9][1];
  assign tile__recv_data__msg[5][0] = tile__send_data__msg[9][1];
  assign tile__send_data__rdy[9][1] = tile__recv_data__rdy[5][0];
  assign tile__recv_data__en[13][1] = tile__send_data__en[9][0];
  assign tile__recv_data__msg[13][1] = tile__send_data__msg[9][0];
  assign tile__send_data__rdy[9][0] = tile__recv_data__rdy[13][1];
  assign tile__recv_data__en[8][3] = tile__send_data__en[9][2];
  assign tile__recv_data__msg[8][3] = tile__send_data__msg[9][2];
  assign tile__send_data__rdy[9][2] = tile__recv_data__rdy[8][3];
  assign tile__recv_data__en[10][2] = tile__send_data__en[9][3];
  assign tile__recv_data__msg[10][2] = tile__send_data__msg[9][3];
  assign tile__send_data__rdy[9][3] = tile__recv_data__rdy[10][2];
  assign tile__to_mem_raddr__rdy[9] = 1'd0;
  assign tile__from_mem_rdata__en[9] = 1'd0;
  assign tile__from_mem_rdata__msg[9] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[9] = 1'd0;
  assign tile__to_mem_wdata__rdy[9] = 1'd0;
  assign tile__recv_waddr__en[10] = recv_waddr__en[10];
  assign tile__recv_waddr__msg[10] = recv_waddr__msg[10];
  assign recv_waddr__rdy[10] = tile__recv_waddr__rdy[10];
  assign tile__recv_wopt__en[10] = recv_wopt__en[10];
  assign tile__recv_wopt__msg[10] = recv_wopt__msg[10];
  assign recv_wopt__rdy[10] = tile__recv_wopt__rdy[10];
  assign tile__recv_data__en[6][0] = tile__send_data__en[10][1];
  assign tile__recv_data__msg[6][0] = tile__send_data__msg[10][1];
  assign tile__send_data__rdy[10][1] = tile__recv_data__rdy[6][0];
  assign tile__recv_data__en[14][1] = tile__send_data__en[10][0];
  assign tile__recv_data__msg[14][1] = tile__send_data__msg[10][0];
  assign tile__send_data__rdy[10][0] = tile__recv_data__rdy[14][1];
  assign tile__recv_data__en[9][3] = tile__send_data__en[10][2];
  assign tile__recv_data__msg[9][3] = tile__send_data__msg[10][2];
  assign tile__send_data__rdy[10][2] = tile__recv_data__rdy[9][3];
  assign tile__recv_data__en[11][2] = tile__send_data__en[10][3];
  assign tile__recv_data__msg[11][2] = tile__send_data__msg[10][3];
  assign tile__send_data__rdy[10][3] = tile__recv_data__rdy[11][2];
  assign tile__to_mem_raddr__rdy[10] = 1'd0;
  assign tile__from_mem_rdata__en[10] = 1'd0;
  assign tile__from_mem_rdata__msg[10] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[10] = 1'd0;
  assign tile__to_mem_wdata__rdy[10] = 1'd0;
  assign tile__recv_waddr__en[11] = recv_waddr__en[11];
  assign tile__recv_waddr__msg[11] = recv_waddr__msg[11];
  assign recv_waddr__rdy[11] = tile__recv_waddr__rdy[11];
  assign tile__recv_wopt__en[11] = recv_wopt__en[11];
  assign tile__recv_wopt__msg[11] = recv_wopt__msg[11];
  assign recv_wopt__rdy[11] = tile__recv_wopt__rdy[11];
  assign tile__recv_data__en[7][0] = tile__send_data__en[11][1];
  assign tile__recv_data__msg[7][0] = tile__send_data__msg[11][1];
  assign tile__send_data__rdy[11][1] = tile__recv_data__rdy[7][0];
  assign tile__recv_data__en[15][1] = tile__send_data__en[11][0];
  assign tile__recv_data__msg[15][1] = tile__send_data__msg[11][0];
  assign tile__send_data__rdy[11][0] = tile__recv_data__rdy[15][1];
  assign tile__recv_data__en[10][3] = tile__send_data__en[11][2];
  assign tile__recv_data__msg[10][3] = tile__send_data__msg[11][2];
  assign tile__send_data__rdy[11][2] = tile__recv_data__rdy[10][3];
  assign tile__send_data__rdy[11][3] = 1'd0;
  assign tile__recv_data__en[11][3] = 1'd0;
  assign tile__recv_data__msg[11][3] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[11] = 1'd0;
  assign tile__from_mem_rdata__en[11] = 1'd0;
  assign tile__from_mem_rdata__msg[11] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[11] = 1'd0;
  assign tile__to_mem_wdata__rdy[11] = 1'd0;
  assign tile__recv_waddr__en[12] = recv_waddr__en[12];
  assign tile__recv_waddr__msg[12] = recv_waddr__msg[12];
  assign recv_waddr__rdy[12] = tile__recv_waddr__rdy[12];
  assign tile__recv_wopt__en[12] = recv_wopt__en[12];
  assign tile__recv_wopt__msg[12] = recv_wopt__msg[12];
  assign recv_wopt__rdy[12] = tile__recv_wopt__rdy[12];
  assign tile__recv_data__en[8][0] = tile__send_data__en[12][1];
  assign tile__recv_data__msg[8][0] = tile__send_data__msg[12][1];
  assign tile__send_data__rdy[12][1] = tile__recv_data__rdy[8][0];
  assign tile__recv_data__en[13][2] = tile__send_data__en[12][3];
  assign tile__recv_data__msg[13][2] = tile__send_data__msg[12][3];
  assign tile__send_data__rdy[12][3] = tile__recv_data__rdy[13][2];
  assign tile__send_data__rdy[12][0] = 1'd0;
  assign tile__recv_data__en[12][0] = 1'd0;
  assign tile__recv_data__msg[12][0] = { 16'd0, 1'd0, 1'd0 };
  assign tile__send_data__rdy[12][2] = 1'd0;
  assign tile__recv_data__en[12][2] = 1'd0;
  assign tile__recv_data__msg[12][2] = { 16'd0, 1'd0, 1'd0 };
  assign data_mem__recv_raddr__en[3] = tile__to_mem_raddr__en[12];
  assign data_mem__recv_raddr__msg[3] = tile__to_mem_raddr__msg[12];
  assign tile__to_mem_raddr__rdy[12] = data_mem__recv_raddr__rdy[3];
  assign tile__from_mem_rdata__en[12] = data_mem__send_rdata__en[3];
  assign tile__from_mem_rdata__msg[12] = data_mem__send_rdata__msg[3];
  assign data_mem__send_rdata__rdy[3] = tile__from_mem_rdata__rdy[12];
  assign data_mem__recv_waddr__en[3] = tile__to_mem_waddr__en[12];
  assign data_mem__recv_waddr__msg[3] = tile__to_mem_waddr__msg[12];
  assign tile__to_mem_waddr__rdy[12] = data_mem__recv_waddr__rdy[3];
  assign data_mem__recv_wdata__en[3] = tile__to_mem_wdata__en[12];
  assign data_mem__recv_wdata__msg[3] = tile__to_mem_wdata__msg[12];
  assign tile__to_mem_wdata__rdy[12] = data_mem__recv_wdata__rdy[3];
  assign tile__recv_waddr__en[13] = recv_waddr__en[13];
  assign tile__recv_waddr__msg[13] = recv_waddr__msg[13];
  assign recv_waddr__rdy[13] = tile__recv_waddr__rdy[13];
  assign tile__recv_wopt__en[13] = recv_wopt__en[13];
  assign tile__recv_wopt__msg[13] = recv_wopt__msg[13];
  assign recv_wopt__rdy[13] = tile__recv_wopt__rdy[13];
  assign tile__recv_data__en[9][0] = tile__send_data__en[13][1];
  assign tile__recv_data__msg[9][0] = tile__send_data__msg[13][1];
  assign tile__send_data__rdy[13][1] = tile__recv_data__rdy[9][0];
  assign tile__recv_data__en[12][3] = tile__send_data__en[13][2];
  assign tile__recv_data__msg[12][3] = tile__send_data__msg[13][2];
  assign tile__send_data__rdy[13][2] = tile__recv_data__rdy[12][3];
  assign tile__recv_data__en[14][2] = tile__send_data__en[13][3];
  assign tile__recv_data__msg[14][2] = tile__send_data__msg[13][3];
  assign tile__send_data__rdy[13][3] = tile__recv_data__rdy[14][2];
  assign tile__send_data__rdy[13][0] = 1'd0;
  assign tile__recv_data__en[13][0] = 1'd0;
  assign tile__recv_data__msg[13][0] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[13] = 1'd0;
  assign tile__from_mem_rdata__en[13] = 1'd0;
  assign tile__from_mem_rdata__msg[13] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[13] = 1'd0;
  assign tile__to_mem_wdata__rdy[13] = 1'd0;
  assign tile__recv_waddr__en[14] = recv_waddr__en[14];
  assign tile__recv_waddr__msg[14] = recv_waddr__msg[14];
  assign recv_waddr__rdy[14] = tile__recv_waddr__rdy[14];
  assign tile__recv_wopt__en[14] = recv_wopt__en[14];
  assign tile__recv_wopt__msg[14] = recv_wopt__msg[14];
  assign recv_wopt__rdy[14] = tile__recv_wopt__rdy[14];
  assign tile__recv_data__en[10][0] = tile__send_data__en[14][1];
  assign tile__recv_data__msg[10][0] = tile__send_data__msg[14][1];
  assign tile__send_data__rdy[14][1] = tile__recv_data__rdy[10][0];
  assign tile__recv_data__en[13][3] = tile__send_data__en[14][2];
  assign tile__recv_data__msg[13][3] = tile__send_data__msg[14][2];
  assign tile__send_data__rdy[14][2] = tile__recv_data__rdy[13][3];
  assign tile__recv_data__en[15][2] = tile__send_data__en[14][3];
  assign tile__recv_data__msg[15][2] = tile__send_data__msg[14][3];
  assign tile__send_data__rdy[14][3] = tile__recv_data__rdy[15][2];
  assign tile__send_data__rdy[14][0] = 1'd0;
  assign tile__recv_data__en[14][0] = 1'd0;
  assign tile__recv_data__msg[14][0] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[14] = 1'd0;
  assign tile__from_mem_rdata__en[14] = 1'd0;
  assign tile__from_mem_rdata__msg[14] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[14] = 1'd0;
  assign tile__to_mem_wdata__rdy[14] = 1'd0;
  assign tile__recv_waddr__en[15] = recv_waddr__en[15];
  assign tile__recv_waddr__msg[15] = recv_waddr__msg[15];
  assign recv_waddr__rdy[15] = tile__recv_waddr__rdy[15];
  assign tile__recv_wopt__en[15] = recv_wopt__en[15];
  assign tile__recv_wopt__msg[15] = recv_wopt__msg[15];
  assign recv_wopt__rdy[15] = tile__recv_wopt__rdy[15];
  assign tile__recv_data__en[11][0] = tile__send_data__en[15][1];
  assign tile__recv_data__msg[11][0] = tile__send_data__msg[15][1];
  assign tile__send_data__rdy[15][1] = tile__recv_data__rdy[11][0];
  assign tile__recv_data__en[14][3] = tile__send_data__en[15][2];
  assign tile__recv_data__msg[14][3] = tile__send_data__msg[15][2];
  assign tile__send_data__rdy[15][2] = tile__recv_data__rdy[14][3];
  assign tile__send_data__rdy[15][0] = 1'd0;
  assign tile__recv_data__en[15][0] = 1'd0;
  assign tile__recv_data__msg[15][0] = { 16'd0, 1'd0, 1'd0 };
  assign tile__send_data__rdy[15][3] = 1'd0;
  assign tile__recv_data__en[15][3] = 1'd0;
  assign tile__recv_data__msg[15][3] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_raddr__rdy[15] = 1'd0;
  assign tile__from_mem_rdata__en[15] = 1'd0;
  assign tile__from_mem_rdata__msg[15] = { 16'd0, 1'd0, 1'd0 };
  assign tile__to_mem_waddr__rdy[15] = 1'd0;
  assign tile__to_mem_wdata__rdy[15] = 1'd0;

endmodule
/* verilator lint_on DECLFILENAME */
// verilator lint_on UNSIGNED 
/* verilator lint_on WIDTH */
